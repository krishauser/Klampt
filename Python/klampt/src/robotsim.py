# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.




"""
Klamp't Core Python bindings
"""


from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_robotsim', [dirname(__file__)])
        except ImportError:
            import _robotsim
            return _robotsim
        if fp is not None:
            try:
                _mod = imp.load_module('_robotsim', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _robotsim = swig_import_helper()
    del swig_import_helper
else:
    import _robotsim
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _robotsim.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _robotsim.SwigPyIterator_value(self)
    def incr(self, n=1): return _robotsim.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _robotsim.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _robotsim.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _robotsim.SwigPyIterator_equal(self, *args)
    def copy(self): return _robotsim.SwigPyIterator_copy(self)
    def next(self): return _robotsim.SwigPyIterator_next(self)
    def __next__(self): return _robotsim.SwigPyIterator___next__(self)
    def previous(self): return _robotsim.SwigPyIterator_previous(self)
    def advance(self, *args): return _robotsim.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _robotsim.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _robotsim.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _robotsim.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _robotsim.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _robotsim.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _robotsim.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _robotsim.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class doubleArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, doubleArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, doubleArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _robotsim.new_doubleArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _robotsim.delete_doubleArray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _robotsim.doubleArray___getitem__(self, *args)
    def __setitem__(self, *args): return _robotsim.doubleArray___setitem__(self, *args)
    def cast(self): return _robotsim.doubleArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _robotsim.doubleArray_frompointer
    if _newclass:frompointer = staticmethod(_robotsim.doubleArray_frompointer)
doubleArray_swigregister = _robotsim.doubleArray_swigregister
doubleArray_swigregister(doubleArray)

def doubleArray_frompointer(*args):
  return _robotsim.doubleArray_frompointer(*args)
doubleArray_frompointer = _robotsim.doubleArray_frompointer

class floatArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, floatArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, floatArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _robotsim.new_floatArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _robotsim.delete_floatArray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _robotsim.floatArray___getitem__(self, *args)
    def __setitem__(self, *args): return _robotsim.floatArray___setitem__(self, *args)
    def cast(self): return _robotsim.floatArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _robotsim.floatArray_frompointer
    if _newclass:frompointer = staticmethod(_robotsim.floatArray_frompointer)
floatArray_swigregister = _robotsim.floatArray_swigregister
floatArray_swigregister(floatArray)

def floatArray_frompointer(*args):
  return _robotsim.floatArray_frompointer(*args)
floatArray_frompointer = _robotsim.floatArray_frompointer

class intArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _robotsim.new_intArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _robotsim.delete_intArray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _robotsim.intArray___getitem__(self, *args)
    def __setitem__(self, *args): return _robotsim.intArray___setitem__(self, *args)
    def cast(self): return _robotsim.intArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _robotsim.intArray_frompointer
    if _newclass:frompointer = staticmethod(_robotsim.intArray_frompointer)
intArray_swigregister = _robotsim.intArray_swigregister
intArray_swigregister(intArray)

def intArray_frompointer(*args):
  return _robotsim.intArray_frompointer(*args)
intArray_frompointer = _robotsim.intArray_frompointer

class stringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, stringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, stringVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _robotsim.stringVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _robotsim.stringVector___nonzero__(self)
    def __bool__(self): return _robotsim.stringVector___bool__(self)
    def __len__(self): return _robotsim.stringVector___len__(self)
    def pop(self): return _robotsim.stringVector_pop(self)
    def __getslice__(self, *args): return _robotsim.stringVector___getslice__(self, *args)
    def __setslice__(self, *args): return _robotsim.stringVector___setslice__(self, *args)
    def __delslice__(self, *args): return _robotsim.stringVector___delslice__(self, *args)
    def __delitem__(self, *args): return _robotsim.stringVector___delitem__(self, *args)
    def __getitem__(self, *args): return _robotsim.stringVector___getitem__(self, *args)
    def __setitem__(self, *args): return _robotsim.stringVector___setitem__(self, *args)
    def append(self, *args): return _robotsim.stringVector_append(self, *args)
    def empty(self): return _robotsim.stringVector_empty(self)
    def size(self): return _robotsim.stringVector_size(self)
    def clear(self): return _robotsim.stringVector_clear(self)
    def swap(self, *args): return _robotsim.stringVector_swap(self, *args)
    def get_allocator(self): return _robotsim.stringVector_get_allocator(self)
    def begin(self): return _robotsim.stringVector_begin(self)
    def end(self): return _robotsim.stringVector_end(self)
    def rbegin(self): return _robotsim.stringVector_rbegin(self)
    def rend(self): return _robotsim.stringVector_rend(self)
    def pop_back(self): return _robotsim.stringVector_pop_back(self)
    def erase(self, *args): return _robotsim.stringVector_erase(self, *args)
    def __init__(self, *args): 
        this = _robotsim.new_stringVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _robotsim.stringVector_push_back(self, *args)
    def front(self): return _robotsim.stringVector_front(self)
    def back(self): return _robotsim.stringVector_back(self)
    def assign(self, *args): return _robotsim.stringVector_assign(self, *args)
    def resize(self, *args): return _robotsim.stringVector_resize(self, *args)
    def insert(self, *args): return _robotsim.stringVector_insert(self, *args)
    def reserve(self, *args): return _robotsim.stringVector_reserve(self, *args)
    def capacity(self): return _robotsim.stringVector_capacity(self)
    __swig_destroy__ = _robotsim.delete_stringVector
    __del__ = lambda self : None;
stringVector_swigregister = _robotsim.stringVector_swigregister
stringVector_swigregister(stringVector)

class doubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, doubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, doubleVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _robotsim.doubleVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _robotsim.doubleVector___nonzero__(self)
    def __bool__(self): return _robotsim.doubleVector___bool__(self)
    def __len__(self): return _robotsim.doubleVector___len__(self)
    def pop(self): return _robotsim.doubleVector_pop(self)
    def __getslice__(self, *args): return _robotsim.doubleVector___getslice__(self, *args)
    def __setslice__(self, *args): return _robotsim.doubleVector___setslice__(self, *args)
    def __delslice__(self, *args): return _robotsim.doubleVector___delslice__(self, *args)
    def __delitem__(self, *args): return _robotsim.doubleVector___delitem__(self, *args)
    def __getitem__(self, *args): return _robotsim.doubleVector___getitem__(self, *args)
    def __setitem__(self, *args): return _robotsim.doubleVector___setitem__(self, *args)
    def append(self, *args): return _robotsim.doubleVector_append(self, *args)
    def empty(self): return _robotsim.doubleVector_empty(self)
    def size(self): return _robotsim.doubleVector_size(self)
    def clear(self): return _robotsim.doubleVector_clear(self)
    def swap(self, *args): return _robotsim.doubleVector_swap(self, *args)
    def get_allocator(self): return _robotsim.doubleVector_get_allocator(self)
    def begin(self): return _robotsim.doubleVector_begin(self)
    def end(self): return _robotsim.doubleVector_end(self)
    def rbegin(self): return _robotsim.doubleVector_rbegin(self)
    def rend(self): return _robotsim.doubleVector_rend(self)
    def pop_back(self): return _robotsim.doubleVector_pop_back(self)
    def erase(self, *args): return _robotsim.doubleVector_erase(self, *args)
    def __init__(self, *args): 
        this = _robotsim.new_doubleVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _robotsim.doubleVector_push_back(self, *args)
    def front(self): return _robotsim.doubleVector_front(self)
    def back(self): return _robotsim.doubleVector_back(self)
    def assign(self, *args): return _robotsim.doubleVector_assign(self, *args)
    def resize(self, *args): return _robotsim.doubleVector_resize(self, *args)
    def insert(self, *args): return _robotsim.doubleVector_insert(self, *args)
    def reserve(self, *args): return _robotsim.doubleVector_reserve(self, *args)
    def capacity(self): return _robotsim.doubleVector_capacity(self)
    __swig_destroy__ = _robotsim.delete_doubleVector
    __del__ = lambda self : None;
doubleVector_swigregister = _robotsim.doubleVector_swigregister
doubleVector_swigregister(doubleVector)

class floatVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, floatVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, floatVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _robotsim.floatVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _robotsim.floatVector___nonzero__(self)
    def __bool__(self): return _robotsim.floatVector___bool__(self)
    def __len__(self): return _robotsim.floatVector___len__(self)
    def pop(self): return _robotsim.floatVector_pop(self)
    def __getslice__(self, *args): return _robotsim.floatVector___getslice__(self, *args)
    def __setslice__(self, *args): return _robotsim.floatVector___setslice__(self, *args)
    def __delslice__(self, *args): return _robotsim.floatVector___delslice__(self, *args)
    def __delitem__(self, *args): return _robotsim.floatVector___delitem__(self, *args)
    def __getitem__(self, *args): return _robotsim.floatVector___getitem__(self, *args)
    def __setitem__(self, *args): return _robotsim.floatVector___setitem__(self, *args)
    def append(self, *args): return _robotsim.floatVector_append(self, *args)
    def empty(self): return _robotsim.floatVector_empty(self)
    def size(self): return _robotsim.floatVector_size(self)
    def clear(self): return _robotsim.floatVector_clear(self)
    def swap(self, *args): return _robotsim.floatVector_swap(self, *args)
    def get_allocator(self): return _robotsim.floatVector_get_allocator(self)
    def begin(self): return _robotsim.floatVector_begin(self)
    def end(self): return _robotsim.floatVector_end(self)
    def rbegin(self): return _robotsim.floatVector_rbegin(self)
    def rend(self): return _robotsim.floatVector_rend(self)
    def pop_back(self): return _robotsim.floatVector_pop_back(self)
    def erase(self, *args): return _robotsim.floatVector_erase(self, *args)
    def __init__(self, *args): 
        this = _robotsim.new_floatVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _robotsim.floatVector_push_back(self, *args)
    def front(self): return _robotsim.floatVector_front(self)
    def back(self): return _robotsim.floatVector_back(self)
    def assign(self, *args): return _robotsim.floatVector_assign(self, *args)
    def resize(self, *args): return _robotsim.floatVector_resize(self, *args)
    def insert(self, *args): return _robotsim.floatVector_insert(self, *args)
    def reserve(self, *args): return _robotsim.floatVector_reserve(self, *args)
    def capacity(self): return _robotsim.floatVector_capacity(self)
    __swig_destroy__ = _robotsim.delete_floatVector
    __del__ = lambda self : None;
floatVector_swigregister = _robotsim.floatVector_swigregister
floatVector_swigregister(floatVector)

class intVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _robotsim.intVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _robotsim.intVector___nonzero__(self)
    def __bool__(self): return _robotsim.intVector___bool__(self)
    def __len__(self): return _robotsim.intVector___len__(self)
    def pop(self): return _robotsim.intVector_pop(self)
    def __getslice__(self, *args): return _robotsim.intVector___getslice__(self, *args)
    def __setslice__(self, *args): return _robotsim.intVector___setslice__(self, *args)
    def __delslice__(self, *args): return _robotsim.intVector___delslice__(self, *args)
    def __delitem__(self, *args): return _robotsim.intVector___delitem__(self, *args)
    def __getitem__(self, *args): return _robotsim.intVector___getitem__(self, *args)
    def __setitem__(self, *args): return _robotsim.intVector___setitem__(self, *args)
    def append(self, *args): return _robotsim.intVector_append(self, *args)
    def empty(self): return _robotsim.intVector_empty(self)
    def size(self): return _robotsim.intVector_size(self)
    def clear(self): return _robotsim.intVector_clear(self)
    def swap(self, *args): return _robotsim.intVector_swap(self, *args)
    def get_allocator(self): return _robotsim.intVector_get_allocator(self)
    def begin(self): return _robotsim.intVector_begin(self)
    def end(self): return _robotsim.intVector_end(self)
    def rbegin(self): return _robotsim.intVector_rbegin(self)
    def rend(self): return _robotsim.intVector_rend(self)
    def pop_back(self): return _robotsim.intVector_pop_back(self)
    def erase(self, *args): return _robotsim.intVector_erase(self, *args)
    def __init__(self, *args): 
        this = _robotsim.new_intVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _robotsim.intVector_push_back(self, *args)
    def front(self): return _robotsim.intVector_front(self)
    def back(self): return _robotsim.intVector_back(self)
    def assign(self, *args): return _robotsim.intVector_assign(self, *args)
    def resize(self, *args): return _robotsim.intVector_resize(self, *args)
    def insert(self, *args): return _robotsim.intVector_insert(self, *args)
    def reserve(self, *args): return _robotsim.intVector_reserve(self, *args)
    def capacity(self): return _robotsim.intVector_capacity(self)
    __swig_destroy__ = _robotsim.delete_intVector
    __del__ = lambda self : None;
intVector_swigregister = _robotsim.intVector_swigregister
intVector_swigregister(intVector)

class doubleMatrix(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, doubleMatrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, doubleMatrix, name)
    __repr__ = _swig_repr
    def iterator(self): return _robotsim.doubleMatrix_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _robotsim.doubleMatrix___nonzero__(self)
    def __bool__(self): return _robotsim.doubleMatrix___bool__(self)
    def __len__(self): return _robotsim.doubleMatrix___len__(self)
    def pop(self): return _robotsim.doubleMatrix_pop(self)
    def __getslice__(self, *args): return _robotsim.doubleMatrix___getslice__(self, *args)
    def __setslice__(self, *args): return _robotsim.doubleMatrix___setslice__(self, *args)
    def __delslice__(self, *args): return _robotsim.doubleMatrix___delslice__(self, *args)
    def __delitem__(self, *args): return _robotsim.doubleMatrix___delitem__(self, *args)
    def __getitem__(self, *args): return _robotsim.doubleMatrix___getitem__(self, *args)
    def __setitem__(self, *args): return _robotsim.doubleMatrix___setitem__(self, *args)
    def append(self, *args): return _robotsim.doubleMatrix_append(self, *args)
    def empty(self): return _robotsim.doubleMatrix_empty(self)
    def size(self): return _robotsim.doubleMatrix_size(self)
    def clear(self): return _robotsim.doubleMatrix_clear(self)
    def swap(self, *args): return _robotsim.doubleMatrix_swap(self, *args)
    def get_allocator(self): return _robotsim.doubleMatrix_get_allocator(self)
    def begin(self): return _robotsim.doubleMatrix_begin(self)
    def end(self): return _robotsim.doubleMatrix_end(self)
    def rbegin(self): return _robotsim.doubleMatrix_rbegin(self)
    def rend(self): return _robotsim.doubleMatrix_rend(self)
    def pop_back(self): return _robotsim.doubleMatrix_pop_back(self)
    def erase(self, *args): return _robotsim.doubleMatrix_erase(self, *args)
    def __init__(self, *args): 
        this = _robotsim.new_doubleMatrix(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _robotsim.doubleMatrix_push_back(self, *args)
    def front(self): return _robotsim.doubleMatrix_front(self)
    def back(self): return _robotsim.doubleMatrix_back(self)
    def assign(self, *args): return _robotsim.doubleMatrix_assign(self, *args)
    def resize(self, *args): return _robotsim.doubleMatrix_resize(self, *args)
    def insert(self, *args): return _robotsim.doubleMatrix_insert(self, *args)
    def reserve(self, *args): return _robotsim.doubleMatrix_reserve(self, *args)
    def capacity(self): return _robotsim.doubleMatrix_capacity(self)
    __swig_destroy__ = _robotsim.delete_doubleMatrix
    __del__ = lambda self : None;
doubleMatrix_swigregister = _robotsim.doubleMatrix_swigregister
doubleMatrix_swigregister(doubleMatrix)

class TriangleMesh(_object):
    """
    A 3D indexed triangle mesh class.

    Attributes: vertices: a list of vertices, given as a flattened
    coordinate list [x1, y1, z1, x2, y2, ...]

    indices: a list of triangle vertices given as indices into the
    vertices list, i.e., [a1,b1,c2, a2,b2,c2, ...]

    Note: because the bindings are generated by SWIG, you can access the
    indices / vertices members via some automatically generated accessors
    / modifiers. In particular len(), append(), and indexing via [] are
    useful. Some other methods like resize() are also provided. However,
    you CANNOT set these items via assignment.

    Examples:

    m = TriangleMesh() m.vertices.append(0) m.vertices.append(0)
    m.vertices.append(0) print len(m.vertices) #prints 3 m.vertices =
    [0,0,0] #this is an error m.vertices += [1,2,3] #this is also an error

    C++ includes: geometry.h 
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TriangleMesh, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TriangleMesh, name)
    __repr__ = _swig_repr
    def translate(self, *args):
        """
        translate(TriangleMesh self, double const [3] t)

        Translates all the vertices by v=v+t. 
        """
        return _robotsim.TriangleMesh_translate(self, *args)

    def transform(self, *args):
        """
        transform(TriangleMesh self, double const [9] R, double const [3] t)

        Transforms all the vertices by the rigid transform v=R*v+t. 
        """
        return _robotsim.TriangleMesh_transform(self, *args)

    __swig_setmethods__["indices"] = _robotsim.TriangleMesh_indices_set
    __swig_getmethods__["indices"] = _robotsim.TriangleMesh_indices_get
    if _newclass:indices = _swig_property(_robotsim.TriangleMesh_indices_get, _robotsim.TriangleMesh_indices_set)
    __swig_setmethods__["vertices"] = _robotsim.TriangleMesh_vertices_set
    __swig_getmethods__["vertices"] = _robotsim.TriangleMesh_vertices_get
    if _newclass:vertices = _swig_property(_robotsim.TriangleMesh_vertices_get, _robotsim.TriangleMesh_vertices_set)
    def __init__(self): 
        """
        __init__(TriangleMesh self) -> TriangleMesh

        A 3D indexed triangle mesh class.

        Attributes: vertices: a list of vertices, given as a flattened
        coordinate list [x1, y1, z1, x2, y2, ...]

        indices: a list of triangle vertices given as indices into the
        vertices list, i.e., [a1,b1,c2, a2,b2,c2, ...]

        Note: because the bindings are generated by SWIG, you can access the
        indices / vertices members via some automatically generated accessors
        / modifiers. In particular len(), append(), and indexing via [] are
        useful. Some other methods like resize() are also provided. However,
        you CANNOT set these items via assignment.

        Examples:

        m = TriangleMesh() m.vertices.append(0) m.vertices.append(0)
        m.vertices.append(0) print len(m.vertices) #prints 3 m.vertices =
        [0,0,0] #this is an error m.vertices += [1,2,3] #this is also an error

        C++ includes: geometry.h 
        """
        this = _robotsim.new_TriangleMesh()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _robotsim.delete_TriangleMesh
    __del__ = lambda self : None;
TriangleMesh_swigregister = _robotsim.TriangleMesh_swigregister
TriangleMesh_swigregister(TriangleMesh)

class PointCloud(_object):
    """
    A 3D point cloud class.

    Attributes: vertices: a list of vertices, given as a list [x1, y1, z1,
    x2, y2, ... zn]

    properties: a list of vertex properties, given as a list [p11, p21,
    ..., pk1, p12, p22, ..., pk2, ... , pn1, pn2, ..., pn2] where each
    vertex has k properties. The name of each property is given by the
    propertyNames member.

    Note: because the bindings are generated by SWIG, you can access the
    vertices/properties/propertyName members via some automatically
    generated accessors / modifiers. In particular len(), append(), and
    indexing via [] are useful. Some other methods like resize() are also
    provided. However, you CANNOT set these items via assignment.

    Examples:

    pc = PointCloud() pc.propertyNames.append('rgb') pc.vertices.append(0)
    pc.vertices.append(0) pc.vertices.append(0) pc.properties.append(0)
    print len(pc.vertices) #prints 3 print pc.numPoints() #prints 1
    pc.addPoint([1,2,3]) print pc.numPoints() #prints 2 print
    len(pc.properties.size()) #prints 2: 1 property category x 2 points
    print pc.getProperty(1,0) #prints 0; this is the default value added
    when addPoint is called

    C++ includes: geometry.h 
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PointCloud, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PointCloud, name)
    __repr__ = _swig_repr
    def numPoints(self):
        """
        numPoints(PointCloud self) -> int

        Returns the number of points. 
        """
        return _robotsim.PointCloud_numPoints(self)

    def numProperties(self):
        """
        numProperties(PointCloud self) -> int

        Returns the number of properties. 
        """
        return _robotsim.PointCloud_numProperties(self)

    def setPoints(self, *args):
        """
        setPoints(PointCloud self, int num, doubleVector plist)

        Sets all the points to the given list (a 3n-list) 
        """
        return _robotsim.PointCloud_setPoints(self, *args)

    def addPoint(self, *args):
        """
        addPoint(PointCloud self, double const [3] p) -> int

        Adds a point. Sets all its properties to 0. Returns the index. 
        """
        return _robotsim.PointCloud_addPoint(self, *args)

    def setPoint(self, *args):
        """
        setPoint(PointCloud self, int index, double const [3] p)

        Sets the position of the point at the given index to p. 
        """
        return _robotsim.PointCloud_setPoint(self, *args)

    def getPoint(self, *args):
        """
        getPoint(PointCloud self, int index)

        Retrieves the position of the point at the given index. 
        """
        return _robotsim.PointCloud_getPoint(self, *args)

    def addProperty(self, *args):
        """
        addProperty(PointCloud self, std::string const & pname)
        addProperty(PointCloud self, std::string const & pname, doubleVector properties)

        Adds a new property with name pname, and sets values for this property
        to the given list (a n-list) 
        """
        return _robotsim.PointCloud_addProperty(self, *args)

    def setProperties(self, *args):
        """
        setProperties(PointCloud self, doubleVector properties)
        setProperties(PointCloud self, int pindex, doubleVector properties)

        Sets property pindex of all points to the given list (a n-list) 
        """
        return _robotsim.PointCloud_setProperties(self, *args)

    def setProperty(self, *args):
        """
        setProperty(PointCloud self, int index, int pindex, double value)
        setProperty(PointCloud self, int index, std::string const & pname, double value)

        Sets the property named pname of point index to the given value. 
        """
        return _robotsim.PointCloud_setProperty(self, *args)

    def getProperty(self, *args):
        """
        getProperty(PointCloud self, int index, int pindex) -> double
        getProperty(PointCloud self, int index, std::string const & pname) -> double

        Gets the property named pname of point index. 
        """
        return _robotsim.PointCloud_getProperty(self, *args)

    def translate(self, *args):
        """
        translate(PointCloud self, double const [3] t)

        Translates all the points by v=v+t. 
        """
        return _robotsim.PointCloud_translate(self, *args)

    def transform(self, *args):
        """
        transform(PointCloud self, double const [9] R, double const [3] t)

        Transforms all the points by the rigid transform v=R*v+t. 
        """
        return _robotsim.PointCloud_transform(self, *args)

    def join(self, *args):
        """
        join(PointCloud self, PointCloud pc)

        Adds the given point cloud to this one. They must share the same
        properties or else an exception is raised. 
        """
        return _robotsim.PointCloud_join(self, *args)

    def setSetting(self, *args):
        """
        setSetting(PointCloud self, std::string const & key, std::string const & value)

        Sets the given setting. 
        """
        return _robotsim.PointCloud_setSetting(self, *args)

    def getSetting(self, *args):
        """
        getSetting(PointCloud self, std::string const & key) -> std::string

        Retrieves the given setting. 
        """
        return _robotsim.PointCloud_getSetting(self, *args)

    __swig_setmethods__["vertices"] = _robotsim.PointCloud_vertices_set
    __swig_getmethods__["vertices"] = _robotsim.PointCloud_vertices_get
    if _newclass:vertices = _swig_property(_robotsim.PointCloud_vertices_get, _robotsim.PointCloud_vertices_set)
    __swig_setmethods__["propertyNames"] = _robotsim.PointCloud_propertyNames_set
    __swig_getmethods__["propertyNames"] = _robotsim.PointCloud_propertyNames_get
    if _newclass:propertyNames = _swig_property(_robotsim.PointCloud_propertyNames_get, _robotsim.PointCloud_propertyNames_set)
    __swig_setmethods__["properties"] = _robotsim.PointCloud_properties_set
    __swig_getmethods__["properties"] = _robotsim.PointCloud_properties_get
    if _newclass:properties = _swig_property(_robotsim.PointCloud_properties_get, _robotsim.PointCloud_properties_set)
    __swig_setmethods__["settings"] = _robotsim.PointCloud_settings_set
    __swig_getmethods__["settings"] = _robotsim.PointCloud_settings_get
    if _newclass:settings = _swig_property(_robotsim.PointCloud_settings_get, _robotsim.PointCloud_settings_set)
    def __init__(self): 
        """
        __init__(PointCloud self) -> PointCloud

        A 3D point cloud class.

        Attributes: vertices: a list of vertices, given as a list [x1, y1, z1,
        x2, y2, ... zn]

        properties: a list of vertex properties, given as a list [p11, p21,
        ..., pk1, p12, p22, ..., pk2, ... , pn1, pn2, ..., pn2] where each
        vertex has k properties. The name of each property is given by the
        propertyNames member.

        Note: because the bindings are generated by SWIG, you can access the
        vertices/properties/propertyName members via some automatically
        generated accessors / modifiers. In particular len(), append(), and
        indexing via [] are useful. Some other methods like resize() are also
        provided. However, you CANNOT set these items via assignment.

        Examples:

        pc = PointCloud() pc.propertyNames.append('rgb') pc.vertices.append(0)
        pc.vertices.append(0) pc.vertices.append(0) pc.properties.append(0)
        print len(pc.vertices) #prints 3 print pc.numPoints() #prints 1
        pc.addPoint([1,2,3]) print pc.numPoints() #prints 2 print
        len(pc.properties.size()) #prints 2: 1 property category x 2 points
        print pc.getProperty(1,0) #prints 0; this is the default value added
        when addPoint is called

        C++ includes: geometry.h 
        """
        this = _robotsim.new_PointCloud()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _robotsim.delete_PointCloud
    __del__ = lambda self : None;
PointCloud_swigregister = _robotsim.PointCloud_swigregister
PointCloud_swigregister(PointCloud)

class GeometricPrimitive(_object):
    """
    A geometric primitive. So far only points, spheres, segments, and
    AABBs can be constructed manually in the Python API.

    C++ includes: geometry.h 
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeometricPrimitive, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GeometricPrimitive, name)
    __repr__ = _swig_repr
    def setPoint(self, *args):
        """setPoint(GeometricPrimitive self, double const [3] pt)"""
        return _robotsim.GeometricPrimitive_setPoint(self, *args)

    def setSphere(self, *args):
        """setSphere(GeometricPrimitive self, double const [3] c, double r)"""
        return _robotsim.GeometricPrimitive_setSphere(self, *args)

    def setSegment(self, *args):
        """setSegment(GeometricPrimitive self, double const [3] a, double const [3] b)"""
        return _robotsim.GeometricPrimitive_setSegment(self, *args)

    def setAABB(self, *args):
        """setAABB(GeometricPrimitive self, double const [3] bmin, double const [3] bmax)"""
        return _robotsim.GeometricPrimitive_setAABB(self, *args)

    def loadString(self, *args):
        """loadString(GeometricPrimitive self, char const * str) -> bool"""
        return _robotsim.GeometricPrimitive_loadString(self, *args)

    def saveString(self):
        """saveString(GeometricPrimitive self) -> std::string"""
        return _robotsim.GeometricPrimitive_saveString(self)

    __swig_setmethods__["type"] = _robotsim.GeometricPrimitive_type_set
    __swig_getmethods__["type"] = _robotsim.GeometricPrimitive_type_get
    if _newclass:type = _swig_property(_robotsim.GeometricPrimitive_type_get, _robotsim.GeometricPrimitive_type_set)
    __swig_setmethods__["properties"] = _robotsim.GeometricPrimitive_properties_set
    __swig_getmethods__["properties"] = _robotsim.GeometricPrimitive_properties_get
    if _newclass:properties = _swig_property(_robotsim.GeometricPrimitive_properties_get, _robotsim.GeometricPrimitive_properties_set)
    def __init__(self): 
        """
        __init__(GeometricPrimitive self) -> GeometricPrimitive

        A geometric primitive. So far only points, spheres, segments, and
        AABBs can be constructed manually in the Python API.

        C++ includes: geometry.h 
        """
        this = _robotsim.new_GeometricPrimitive()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _robotsim.delete_GeometricPrimitive
    __del__ = lambda self : None;
GeometricPrimitive_swigregister = _robotsim.GeometricPrimitive_swigregister
GeometricPrimitive_swigregister(GeometricPrimitive)

class Geometry3D(_object):
    """
    A three-D geometry. Can either be a reference to a world item's
    geometry, in which case modifiers change the world item's geometry, or
    it can be a standalone geometry.

    There are four currently supported types of geometry: primitives (
    GeometricPrimitive)

    triangle meshes ( TriangleMesh)

    point clouds ( PointCloud)

    groups (Group) This class acts as a uniform container of all of these
    types.

    Each geometry stores a "current" transform, which is automatically
    updated for world items' geometries. The proximity queries are
    performed with respect to the transformed geometries (note the
    underlying geometry is not changed, which could be computationally
    expensive. The query is performed, however, as though they were).

    If you want to set a world item's geometry to be equal to a standalone
    geometry, use the set(rhs) function rather than the assignment (=)
    operator.

    Modifiers include any setX() functions, translate(), and transform().

    Proximity queries include collides(), withinDistance(), distance(),
    closestPoint(), and rayCast().

    Each object also has a "collision margin" which may virtually fatten
    the object, as far as proximity queries are concerned. This is useful
    for setting collision avoidance margins in motion planning. By default
    it is zero. (Note that this is NOT the same thing as simulation body
    collision padding!)

    C++ includes: geometry.h 
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Geometry3D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Geometry3D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(Geometry3D self) -> Geometry3D
        __init__(Geometry3D self, Geometry3D arg2) -> Geometry3D
        __init__(Geometry3D self, GeometricPrimitive arg2) -> Geometry3D
        __init__(Geometry3D self, TriangleMesh arg2) -> Geometry3D
        __init__(Geometry3D self, PointCloud arg2) -> Geometry3D
        """
        this = _robotsim.new_Geometry3D(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _robotsim.delete_Geometry3D
    __del__ = lambda self : None;
    def clone(self):
        """
        clone(Geometry3D self) -> Geometry3D

        Creates a standalone geometry from this geometry. 
        """
        return _robotsim.Geometry3D_clone(self)

    def set(self, *args):
        """
        set(Geometry3D self, Geometry3D arg2)

        Copies the geometry of the argument into this geometry. 
        """
        return _robotsim.Geometry3D_set(self, *args)

    def isStandalone(self):
        """
        isStandalone(Geometry3D self) -> bool

        Returns true if this is a standalone geometry. 
        """
        return _robotsim.Geometry3D_isStandalone(self)

    def free(self):
        """
        free(Geometry3D self)

        Frees the data associated with this geometry, if standalone. 
        """
        return _robotsim.Geometry3D_free(self)

    def type(self):
        """
        type(Geometry3D self) -> std::string

        Returns the type of geometry: TriangleMesh, PointCloud, or
        GeometricPrimitive. 
        """
        return _robotsim.Geometry3D_type(self)

    def empty(self):
        """
        empty(Geometry3D self) -> bool

        Returns true if this has no contents (not the same as
        numElements()==0) 
        """
        return _robotsim.Geometry3D_empty(self)

    def getTriangleMesh(self):
        """
        getTriangleMesh(Geometry3D self) -> TriangleMesh

        Returns a TriangleMesh if this geometry is of type TriangleMesh. 
        """
        return _robotsim.Geometry3D_getTriangleMesh(self)

    def getPointCloud(self):
        """
        getPointCloud(Geometry3D self) -> PointCloud

        Returns a PointCloud if this geometry is of type PointCloud. 
        """
        return _robotsim.Geometry3D_getPointCloud(self)

    def getGeometricPrimitive(self):
        """
        getGeometricPrimitive(Geometry3D self) -> GeometricPrimitive

        Returns a GeometricPrimitive if this geometry is of type
        GeometricPrimitive. 
        """
        return _robotsim.Geometry3D_getGeometricPrimitive(self)

    def setTriangleMesh(self, *args):
        """
        setTriangleMesh(Geometry3D self, TriangleMesh arg2)

        Sets this Geometry3D to a TriangleMesh. 
        """
        return _robotsim.Geometry3D_setTriangleMesh(self, *args)

    def setPointCloud(self, *args):
        """
        setPointCloud(Geometry3D self, PointCloud arg2)

        Sets this Geometry3D to a PointCloud. 
        """
        return _robotsim.Geometry3D_setPointCloud(self, *args)

    def setGeometricPrimitive(self, *args):
        """
        setGeometricPrimitive(Geometry3D self, GeometricPrimitive arg2)

        Sets this Geometry3D to a GeometricPrimitive. 
        """
        return _robotsim.Geometry3D_setGeometricPrimitive(self, *args)

    def setGroup(self):
        """
        setGroup(Geometry3D self)

        Sets this Geometry3D to a group geometry. To add sub-geometries,
        repeatedly call setElement() 
        """
        return _robotsim.Geometry3D_setGroup(self)

    def getElement(self, *args):
        """
        getElement(Geometry3D self, int element) -> Geometry3D

        Returns an element of the Geometry3D if it is a group. Raises an error
        if this is of any other type. 
        """
        return _robotsim.Geometry3D_getElement(self, *args)

    def setElement(self, *args):
        """
        setElement(Geometry3D self, int element, Geometry3D data)

        Sets an element of the Geometry3D if it is a group. Raises an error if
        this is of any other type. 
        """
        return _robotsim.Geometry3D_setElement(self, *args)

    def numElements(self):
        """
        numElements(Geometry3D self) -> int

        Returns the number of sub-elements in this geometry. 
        """
        return _robotsim.Geometry3D_numElements(self)

    def loadFile(self, *args):
        """
        loadFile(Geometry3D self, char const * fn) -> bool

        Loads from file. Standard mesh types, PCD files, and .geom files are
        supported. 
        """
        return _robotsim.Geometry3D_loadFile(self, *args)

    def saveFile(self, *args):
        """
        saveFile(Geometry3D self, char const * fn) -> bool

        Saves to file. Standard mesh types, PCD files, and .geom files are
        supported. 
        """
        return _robotsim.Geometry3D_saveFile(self, *args)

    def setCurrentTransform(self, *args):
        """
        setCurrentTransform(Geometry3D self, double const [9] R, double const [3] t)

        Sets the current transformation (not modifying the underlying data) 
        """
        return _robotsim.Geometry3D_setCurrentTransform(self, *args)

    def getCurrentTransform(self):
        """
        getCurrentTransform(Geometry3D self)

        Gets the current transformation. 
        """
        return _robotsim.Geometry3D_getCurrentTransform(self)

    def translate(self, *args):
        """
        translate(Geometry3D self, double const [3] t)

        Translates the geometry data. Permanently modifies the data and resets
        any collision data structures. 
        """
        return _robotsim.Geometry3D_translate(self, *args)

    def scale(self, *args):
        """
        scale(Geometry3D self, double s)
        scale(Geometry3D self, double sx, double sy, double sz)

        Scales the geometry data with different factors on each axis.
        Permanently modifies the data and resets any collision data
        structures. 
        """
        return _robotsim.Geometry3D_scale(self, *args)

    def rotate(self, *args):
        """
        rotate(Geometry3D self, double const [9] R)

        Rotates the geometry data. Permanently modifies the data and resets
        any collision data structures. 
        """
        return _robotsim.Geometry3D_rotate(self, *args)

    def transform(self, *args):
        """
        transform(Geometry3D self, double const [9] R, double const [3] t)

        Translates/rotates/scales the geometry data. Permanently modifies the
        data and resets any collision data structures. 
        """
        return _robotsim.Geometry3D_transform(self, *args)

    def setCollisionMargin(self, *args):
        """
        setCollisionMargin(Geometry3D self, double margin)

        Sets a padding around the base geometry which affects the results of
        proximity queries. 
        """
        return _robotsim.Geometry3D_setCollisionMargin(self, *args)

    def getCollisionMargin(self):
        """
        getCollisionMargin(Geometry3D self) -> double

        Returns the padding around the base geometry. Default 0. 
        """
        return _robotsim.Geometry3D_getCollisionMargin(self)

    def getBB(self):
        """
        getBB(Geometry3D self)

        Returns the axis-aligned bounding box of the object. 
        """
        return _robotsim.Geometry3D_getBB(self)

    def collides(self, *args):
        """
        collides(Geometry3D self, Geometry3D other) -> bool

        Returns true if this geometry collides with the other. 
        """
        return _robotsim.Geometry3D_collides(self, *args)

    def withinDistance(self, *args):
        """
        withinDistance(Geometry3D self, Geometry3D other, double tol) -> bool

        Returns true if this geometry is within distance tol to other. 
        """
        return _robotsim.Geometry3D_withinDistance(self, *args)

    def distance(self, *args):
        """
        distance(Geometry3D self, Geometry3D other, double relErr=0, double absErr=0) -> double
        distance(Geometry3D self, Geometry3D other, double relErr=0) -> double
        distance(Geometry3D self, Geometry3D other) -> double

        Returns the distance from this geometry to the other. 
        """
        return _robotsim.Geometry3D_distance(self, *args)

    def closestPoint(self, *args):
        """
        closestPoint(Geometry3D self, double const [3] pt) -> bool

        Returns (success,cp) giving the closest point to the input point.
        success is false if that operation is not supported with the given
        geometry type. cp are given in world coordinates. 
        """
        return _robotsim.Geometry3D_closestPoint(self, *args)

    def rayCast(self, *args):
        """
        rayCast(Geometry3D self, double const [3] s, double const [3] d) -> bool

        Returns (hit,pt) where hit is true if the ray starting at s and
        pointing in direction d hits the geometry (given in world
        coordinates); pt is the hit point, in world coordinates. 
        """
        return _robotsim.Geometry3D_rayCast(self, *args)

    __swig_setmethods__["world"] = _robotsim.Geometry3D_world_set
    __swig_getmethods__["world"] = _robotsim.Geometry3D_world_get
    if _newclass:world = _swig_property(_robotsim.Geometry3D_world_get, _robotsim.Geometry3D_world_set)
    __swig_setmethods__["id"] = _robotsim.Geometry3D_id_set
    __swig_getmethods__["id"] = _robotsim.Geometry3D_id_get
    if _newclass:id = _swig_property(_robotsim.Geometry3D_id_get, _robotsim.Geometry3D_id_set)
    __swig_setmethods__["geomPtr"] = _robotsim.Geometry3D_geomPtr_set
    __swig_getmethods__["geomPtr"] = _robotsim.Geometry3D_geomPtr_get
    if _newclass:geomPtr = _swig_property(_robotsim.Geometry3D_geomPtr_get, _robotsim.Geometry3D_geomPtr_set)
Geometry3D_swigregister = _robotsim.Geometry3D_swigregister
Geometry3D_swigregister(Geometry3D)

class Appearance(_object):
    """Proxy of C++ Appearance class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Appearance, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Appearance, name)
    __repr__ = _swig_repr
    ALL = _robotsim.Appearance_ALL
    VERTICES = _robotsim.Appearance_VERTICES
    EDGES = _robotsim.Appearance_EDGES
    FACES = _robotsim.Appearance_FACES
    def __init__(self, *args): 
        """
        __init__(Appearance self) -> Appearance
        __init__(Appearance self, Appearance app) -> Appearance
        """
        this = _robotsim.new_Appearance(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _robotsim.delete_Appearance
    __del__ = lambda self : None;
    def refresh(self, deep=True):
        """
        refresh(Appearance self, bool deep=True)
        refresh(Appearance self)
        """
        return _robotsim.Appearance_refresh(self, deep)

    def clone(self):
        """clone(Appearance self) -> Appearance"""
        return _robotsim.Appearance_clone(self)

    def set(self, *args):
        """set(Appearance self, Appearance arg2)"""
        return _robotsim.Appearance_set(self, *args)

    def isStandalone(self):
        """isStandalone(Appearance self) -> bool"""
        return _robotsim.Appearance_isStandalone(self)

    def free(self):
        """free(Appearance self)"""
        return _robotsim.Appearance_free(self)

    def setDraw(self, *args):
        """
        setDraw(Appearance self, bool draw)
        setDraw(Appearance self, int primitive, bool draw)
        """
        return _robotsim.Appearance_setDraw(self, *args)

    def getDraw(self, *args):
        """
        getDraw(Appearance self) -> bool
        getDraw(Appearance self, int primitive) -> bool
        """
        return _robotsim.Appearance_getDraw(self, *args)

    def setColor(self, *args):
        """
        setColor(Appearance self, float r, float g, float b, float a=1)
        setColor(Appearance self, float r, float g, float b)
        setColor(Appearance self, int primitive, float r, float g, float b, float a)
        """
        return _robotsim.Appearance_setColor(self, *args)

    def getColor(self, *args):
        """
        getColor(Appearance self)
        getColor(Appearance self, int primitive)
        """
        return _robotsim.Appearance_getColor(self, *args)

    def setColors(self, *args):
        """
        setColors(Appearance self, int primitive, floatVector colors, bool alpha=False)
        setColors(Appearance self, int primitive, floatVector colors)
        """
        return _robotsim.Appearance_setColors(self, *args)

    def setTexture1D(self, *args):
        """setTexture1D(Appearance self, int w, char const * format, std::vector< unsigned char,std::allocator< unsigned char > > const & bytes)"""
        return _robotsim.Appearance_setTexture1D(self, *args)

    def setTexture2D(self, *args):
        """setTexture2D(Appearance self, int w, int h, char const * format, std::vector< unsigned char,std::allocator< unsigned char > > const & bytes)"""
        return _robotsim.Appearance_setTexture2D(self, *args)

    def setTexcoords(self, *args):
        """setTexcoords(Appearance self, doubleVector uvs)"""
        return _robotsim.Appearance_setTexcoords(self, *args)

    def setPointSize(self, *args):
        """setPointSize(Appearance self, float size)"""
        return _robotsim.Appearance_setPointSize(self, *args)

    def drawGL(self, *args):
        """
        drawGL(Appearance self)
        drawGL(Appearance self, Geometry3D geom)
        """
        return _robotsim.Appearance_drawGL(self, *args)

    def drawWorldGL(self, *args):
        """drawWorldGL(Appearance self, Geometry3D geom)"""
        return _robotsim.Appearance_drawWorldGL(self, *args)

    __swig_setmethods__["world"] = _robotsim.Appearance_world_set
    __swig_getmethods__["world"] = _robotsim.Appearance_world_get
    if _newclass:world = _swig_property(_robotsim.Appearance_world_get, _robotsim.Appearance_world_set)
    __swig_setmethods__["id"] = _robotsim.Appearance_id_set
    __swig_getmethods__["id"] = _robotsim.Appearance_id_get
    if _newclass:id = _swig_property(_robotsim.Appearance_id_get, _robotsim.Appearance_id_set)
    __swig_setmethods__["appearancePtr"] = _robotsim.Appearance_appearancePtr_set
    __swig_getmethods__["appearancePtr"] = _robotsim.Appearance_appearancePtr_get
    if _newclass:appearancePtr = _swig_property(_robotsim.Appearance_appearancePtr_get, _robotsim.Appearance_appearancePtr_set)
Appearance_swigregister = _robotsim.Appearance_swigregister
Appearance_swigregister(Appearance)

class Viewport(_object):
    """Proxy of C++ Viewport class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Viewport, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Viewport, name)
    __repr__ = _swig_repr
    def fromJson(self, *args):
        """fromJson(Viewport self, std::string const & str) -> bool"""
        return _robotsim.Viewport_fromJson(self, *args)

    def toJson(self):
        """toJson(Viewport self) -> std::string"""
        return _robotsim.Viewport_toJson(self)

    def setModelviewMatrix(self, *args):
        """setModelviewMatrix(Viewport self, double const [16] M)"""
        return _robotsim.Viewport_setModelviewMatrix(self, *args)

    def setRigidTransform(self, *args):
        """setRigidTransform(Viewport self, double const [9] R, double const [3] t)"""
        return _robotsim.Viewport_setRigidTransform(self, *args)

    def getRigidTransform(self):
        """getRigidTransform(Viewport self)"""
        return _robotsim.Viewport_getRigidTransform(self)

    __swig_setmethods__["perspective"] = _robotsim.Viewport_perspective_set
    __swig_getmethods__["perspective"] = _robotsim.Viewport_perspective_get
    if _newclass:perspective = _swig_property(_robotsim.Viewport_perspective_get, _robotsim.Viewport_perspective_set)
    __swig_setmethods__["scale"] = _robotsim.Viewport_scale_set
    __swig_getmethods__["scale"] = _robotsim.Viewport_scale_get
    if _newclass:scale = _swig_property(_robotsim.Viewport_scale_get, _robotsim.Viewport_scale_set)
    __swig_setmethods__["x"] = _robotsim.Viewport_x_set
    __swig_getmethods__["x"] = _robotsim.Viewport_x_get
    if _newclass:x = _swig_property(_robotsim.Viewport_x_get, _robotsim.Viewport_x_set)
    __swig_setmethods__["y"] = _robotsim.Viewport_y_set
    __swig_getmethods__["y"] = _robotsim.Viewport_y_get
    if _newclass:y = _swig_property(_robotsim.Viewport_y_get, _robotsim.Viewport_y_set)
    __swig_setmethods__["w"] = _robotsim.Viewport_w_set
    __swig_getmethods__["w"] = _robotsim.Viewport_w_get
    if _newclass:w = _swig_property(_robotsim.Viewport_w_get, _robotsim.Viewport_w_set)
    __swig_setmethods__["h"] = _robotsim.Viewport_h_set
    __swig_getmethods__["h"] = _robotsim.Viewport_h_get
    if _newclass:h = _swig_property(_robotsim.Viewport_h_get, _robotsim.Viewport_h_set)
    __swig_setmethods__["n"] = _robotsim.Viewport_n_set
    __swig_getmethods__["n"] = _robotsim.Viewport_n_get
    if _newclass:n = _swig_property(_robotsim.Viewport_n_get, _robotsim.Viewport_n_set)
    __swig_setmethods__["f"] = _robotsim.Viewport_f_set
    __swig_getmethods__["f"] = _robotsim.Viewport_f_get
    if _newclass:f = _swig_property(_robotsim.Viewport_f_get, _robotsim.Viewport_f_set)
    __swig_setmethods__["xform"] = _robotsim.Viewport_xform_set
    __swig_getmethods__["xform"] = _robotsim.Viewport_xform_get
    if _newclass:xform = _swig_property(_robotsim.Viewport_xform_get, _robotsim.Viewport_xform_set)
    def __init__(self): 
        """__init__(Viewport self) -> Viewport"""
        this = _robotsim.new_Viewport()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _robotsim.delete_Viewport
    __del__ = lambda self : None;
Viewport_swigregister = _robotsim.Viewport_swigregister
Viewport_swigregister(Viewport)

class Widget(_object):
    """Proxy of C++ Widget class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Widget, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Widget, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(Widget self) -> Widget"""
        this = _robotsim.new_Widget()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _robotsim.delete_Widget
    __del__ = lambda self : None;
    def hover(self, *args):
        """hover(Widget self, int x, int y, Viewport viewport) -> bool"""
        return _robotsim.Widget_hover(self, *args)

    def beginDrag(self, *args):
        """beginDrag(Widget self, int x, int y, Viewport viewport) -> bool"""
        return _robotsim.Widget_beginDrag(self, *args)

    def drag(self, *args):
        """drag(Widget self, int dx, int dy, Viewport viewport)"""
        return _robotsim.Widget_drag(self, *args)

    def endDrag(self):
        """endDrag(Widget self)"""
        return _robotsim.Widget_endDrag(self)

    def keypress(self, *args):
        """keypress(Widget self, char c)"""
        return _robotsim.Widget_keypress(self, *args)

    def drawGL(self, *args):
        """drawGL(Widget self, Viewport viewport)"""
        return _robotsim.Widget_drawGL(self, *args)

    def idle(self):
        """idle(Widget self)"""
        return _robotsim.Widget_idle(self)

    def wantsRedraw(self):
        """wantsRedraw(Widget self) -> bool"""
        return _robotsim.Widget_wantsRedraw(self)

    def hasHighlight(self):
        """hasHighlight(Widget self) -> bool"""
        return _robotsim.Widget_hasHighlight(self)

    def hasFocus(self):
        """hasFocus(Widget self) -> bool"""
        return _robotsim.Widget_hasFocus(self)

    __swig_setmethods__["index"] = _robotsim.Widget_index_set
    __swig_getmethods__["index"] = _robotsim.Widget_index_get
    if _newclass:index = _swig_property(_robotsim.Widget_index_get, _robotsim.Widget_index_set)
Widget_swigregister = _robotsim.Widget_swigregister
Widget_swigregister(Widget)

class WidgetSet(Widget):
    """Proxy of C++ WidgetSet class"""
    __swig_setmethods__ = {}
    for _s in [Widget]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WidgetSet, name, value)
    __swig_getmethods__ = {}
    for _s in [Widget]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, WidgetSet, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(WidgetSet self) -> WidgetSet"""
        this = _robotsim.new_WidgetSet()
        try: self.this.append(this)
        except: self.this = this
    def add(self, *args):
        """add(WidgetSet self, Widget subwidget)"""
        return _robotsim.WidgetSet_add(self, *args)

    def remove(self, *args):
        """remove(WidgetSet self, Widget subwidget)"""
        return _robotsim.WidgetSet_remove(self, *args)

    def enable(self, *args):
        """enable(WidgetSet self, Widget subwidget, bool enabled)"""
        return _robotsim.WidgetSet_enable(self, *args)

    __swig_destroy__ = _robotsim.delete_WidgetSet
    __del__ = lambda self : None;
WidgetSet_swigregister = _robotsim.WidgetSet_swigregister
WidgetSet_swigregister(WidgetSet)

class PointPoser(Widget):
    """Proxy of C++ PointPoser class"""
    __swig_setmethods__ = {}
    for _s in [Widget]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PointPoser, name, value)
    __swig_getmethods__ = {}
    for _s in [Widget]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PointPoser, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(PointPoser self) -> PointPoser"""
        this = _robotsim.new_PointPoser()
        try: self.this.append(this)
        except: self.this = this
    def set(self, *args):
        """set(PointPoser self, double const [3] t)"""
        return _robotsim.PointPoser_set(self, *args)

    def get(self):
        """get(PointPoser self)"""
        return _robotsim.PointPoser_get(self)

    def setAxes(self, *args):
        """
        setAxes(PointPoser self, double const [9] R)

        Sets the reference axes (by default aligned to x,y,z) 
        """
        return _robotsim.PointPoser_setAxes(self, *args)

    __swig_destroy__ = _robotsim.delete_PointPoser
    __del__ = lambda self : None;
PointPoser_swigregister = _robotsim.PointPoser_swigregister
PointPoser_swigregister(PointPoser)

class TransformPoser(Widget):
    """Proxy of C++ TransformPoser class"""
    __swig_setmethods__ = {}
    for _s in [Widget]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TransformPoser, name, value)
    __swig_getmethods__ = {}
    for _s in [Widget]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TransformPoser, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(TransformPoser self) -> TransformPoser"""
        this = _robotsim.new_TransformPoser()
        try: self.this.append(this)
        except: self.this = this
    def set(self, *args):
        """set(TransformPoser self, double const [9] R, double const [3] t)"""
        return _robotsim.TransformPoser_set(self, *args)

    def get(self):
        """get(TransformPoser self)"""
        return _robotsim.TransformPoser_get(self)

    def enableTranslation(self, *args):
        """enableTranslation(TransformPoser self, bool arg2)"""
        return _robotsim.TransformPoser_enableTranslation(self, *args)

    def enableRotation(self, *args):
        """enableRotation(TransformPoser self, bool arg2)"""
        return _robotsim.TransformPoser_enableRotation(self, *args)

    __swig_destroy__ = _robotsim.delete_TransformPoser
    __del__ = lambda self : None;
TransformPoser_swigregister = _robotsim.TransformPoser_swigregister
TransformPoser_swigregister(TransformPoser)

class ObjectPoser(Widget):
    """Proxy of C++ ObjectPoser class"""
    __swig_setmethods__ = {}
    for _s in [Widget]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ObjectPoser, name, value)
    __swig_getmethods__ = {}
    for _s in [Widget]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ObjectPoser, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(ObjectPoser self, RigidObjectModel object) -> ObjectPoser"""
        this = _robotsim.new_ObjectPoser(*args)
        try: self.this.append(this)
        except: self.this = this
    def set(self, *args):
        """set(ObjectPoser self, double const [9] R, double const [3] t)"""
        return _robotsim.ObjectPoser_set(self, *args)

    def get(self):
        """get(ObjectPoser self)"""
        return _robotsim.ObjectPoser_get(self)

    __swig_destroy__ = _robotsim.delete_ObjectPoser
    __del__ = lambda self : None;
ObjectPoser_swigregister = _robotsim.ObjectPoser_swigregister
ObjectPoser_swigregister(ObjectPoser)

class RobotPoser(Widget):
    """Proxy of C++ RobotPoser class"""
    __swig_setmethods__ = {}
    for _s in [Widget]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RobotPoser, name, value)
    __swig_getmethods__ = {}
    for _s in [Widget]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RobotPoser, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(RobotPoser self, RobotModel robot) -> RobotPoser"""
        this = _robotsim.new_RobotPoser(*args)
        try: self.this.append(this)
        except: self.this = this
    def setActiveDofs(self, *args):
        """setActiveDofs(RobotPoser self, intVector dofs)"""
        return _robotsim.RobotPoser_setActiveDofs(self, *args)

    def set(self, *args):
        """set(RobotPoser self, doubleVector q)"""
        return _robotsim.RobotPoser_set(self, *args)

    def get(self):
        """get(RobotPoser self)"""
        return _robotsim.RobotPoser_get(self)

    def getConditioned(self, *args):
        """getConditioned(RobotPoser self, doubleVector qref)"""
        return _robotsim.RobotPoser_getConditioned(self, *args)

    __swig_destroy__ = _robotsim.delete_RobotPoser
    __del__ = lambda self : None;
RobotPoser_swigregister = _robotsim.RobotPoser_swigregister
RobotPoser_swigregister(RobotPoser)

class Mass(_object):
    """
    Stores mass information for a rigid body or robot link. Note: you
    should use the set/get functions rather than changing the members
    directly due to strangeness in SWIG's handling of vectors.

    C++ includes: robotmodel.h 
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Mass, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Mass, name)
    __repr__ = _swig_repr
    def setMass(self, *args):
        """setMass(Mass self, double _mass)"""
        return _robotsim.Mass_setMass(self, *args)

    def getMass(self):
        """getMass(Mass self) -> double"""
        return _robotsim.Mass_getMass(self)

    def setCom(self, *args):
        """setCom(Mass self, doubleVector _com)"""
        return _robotsim.Mass_setCom(self, *args)

    def getCom(self):
        """getCom(Mass self)"""
        return _robotsim.Mass_getCom(self)

    def setInertia(self, *args):
        """setInertia(Mass self, doubleVector _inertia)"""
        return _robotsim.Mass_setInertia(self, *args)

    def getInertia(self):
        """getInertia(Mass self)"""
        return _robotsim.Mass_getInertia(self)

    __swig_setmethods__["mass"] = _robotsim.Mass_mass_set
    __swig_getmethods__["mass"] = _robotsim.Mass_mass_get
    if _newclass:mass = _swig_property(_robotsim.Mass_mass_get, _robotsim.Mass_mass_set)
    __swig_setmethods__["com"] = _robotsim.Mass_com_set
    __swig_getmethods__["com"] = _robotsim.Mass_com_get
    if _newclass:com = _swig_property(_robotsim.Mass_com_get, _robotsim.Mass_com_set)
    __swig_setmethods__["inertia"] = _robotsim.Mass_inertia_set
    __swig_getmethods__["inertia"] = _robotsim.Mass_inertia_get
    if _newclass:inertia = _swig_property(_robotsim.Mass_inertia_get, _robotsim.Mass_inertia_set)
    def __init__(self): 
        """
        __init__(Mass self) -> Mass

        Stores mass information for a rigid body or robot link. Note: you
        should use the set/get functions rather than changing the members
        directly due to strangeness in SWIG's handling of vectors.

        C++ includes: robotmodel.h 
        """
        this = _robotsim.new_Mass()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _robotsim.delete_Mass
    __del__ = lambda self : None;
Mass_swigregister = _robotsim.Mass_swigregister
Mass_swigregister(Mass)

class ContactParameters(_object):
    """
    Stores contact parameters for an entity. Currently only used for
    simulation, but could be used for contact mechanics in the future.

    C++ includes: robotmodel.h 
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ContactParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ContactParameters, name)
    __repr__ = _swig_repr
    __swig_setmethods__["kFriction"] = _robotsim.ContactParameters_kFriction_set
    __swig_getmethods__["kFriction"] = _robotsim.ContactParameters_kFriction_get
    if _newclass:kFriction = _swig_property(_robotsim.ContactParameters_kFriction_get, _robotsim.ContactParameters_kFriction_set)
    __swig_setmethods__["kRestitution"] = _robotsim.ContactParameters_kRestitution_set
    __swig_getmethods__["kRestitution"] = _robotsim.ContactParameters_kRestitution_get
    if _newclass:kRestitution = _swig_property(_robotsim.ContactParameters_kRestitution_get, _robotsim.ContactParameters_kRestitution_set)
    __swig_setmethods__["kStiffness"] = _robotsim.ContactParameters_kStiffness_set
    __swig_getmethods__["kStiffness"] = _robotsim.ContactParameters_kStiffness_get
    if _newclass:kStiffness = _swig_property(_robotsim.ContactParameters_kStiffness_get, _robotsim.ContactParameters_kStiffness_set)
    __swig_setmethods__["kDamping"] = _robotsim.ContactParameters_kDamping_set
    __swig_getmethods__["kDamping"] = _robotsim.ContactParameters_kDamping_get
    if _newclass:kDamping = _swig_property(_robotsim.ContactParameters_kDamping_get, _robotsim.ContactParameters_kDamping_set)
    def __init__(self): 
        """
        __init__(ContactParameters self) -> ContactParameters

        Stores contact parameters for an entity. Currently only used for
        simulation, but could be used for contact mechanics in the future.

        C++ includes: robotmodel.h 
        """
        this = _robotsim.new_ContactParameters()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _robotsim.delete_ContactParameters
    __del__ = lambda self : None;
ContactParameters_swigregister = _robotsim.ContactParameters_swigregister
ContactParameters_swigregister(ContactParameters)

class RobotModelLink(_object):
    """
    A reference to a link of a RobotModel.

    The link stores many mostly-constant items (id, name, parent,
    geometry, appearance, mass, joint axes). The exception is the link's
    current transform, which is affected by the RobotModel's current
    configuration, i.e., the last RobotModel.setConfig(q) call. The
    various Jacobians of points on the link, accessed by getJacobianX, are
    configuration dependent.

    These are not created by hand, but instead accessed using
    RobotModel.link([index or name])

    C++ includes: robotmodel.h 
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RobotModelLink, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RobotModelLink, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(RobotModelLink self) -> RobotModelLink"""
        this = _robotsim.new_RobotModelLink()
        try: self.this.append(this)
        except: self.this = this
    def getID(self):
        """
        getID(RobotModelLink self) -> int

        Returns the ID of the robot link in its world (Note: not the same as
        getIndex()) 
        """
        return _robotsim.RobotModelLink_getID(self)

    def getName(self):
        """
        getName(RobotModelLink self) -> char const *

        Returns the name of the robot link. 
        """
        return _robotsim.RobotModelLink_getName(self)

    def setName(self, *args):
        """
        setName(RobotModelLink self, char const * name)

        Sets the name of the robot link. 
        """
        return _robotsim.RobotModelLink_setName(self, *args)

    def robot(self):
        """
        robot(RobotModelLink self) -> RobotModel

        Returns a reference to the link's robot. 
        """
        return _robotsim.RobotModelLink_robot(self)

    def getIndex(self):
        """
        getIndex(RobotModelLink self) -> int

        Returns the index of the link (on its robot). 
        """
        return _robotsim.RobotModelLink_getIndex(self)

    def getParent(self):
        """
        getParent(RobotModelLink self) -> int

        Returns the index of the link's parent (on its robot). 
        """
        return _robotsim.RobotModelLink_getParent(self)

    def parent(self):
        """
        parent(RobotModelLink self) -> RobotModelLink

        Returns a reference to the link's parent, or a NULL link if it has no
        parent. 
        """
        return _robotsim.RobotModelLink_parent(self)

    def setParent(self, *args):
        """
        setParent(RobotModelLink self, int p)
        setParent(RobotModelLink self, RobotModelLink l)

        Sets the link's parent (must be on the same robot). 
        """
        return _robotsim.RobotModelLink_setParent(self, *args)

    def geometry(self):
        """
        geometry(RobotModelLink self) -> Geometry3D

        Returns a reference to the link's geometry. 
        """
        return _robotsim.RobotModelLink_geometry(self)

    def appearance(self):
        """
        appearance(RobotModelLink self) -> Appearance

        Returns a reference to the link's appearance. 
        """
        return _robotsim.RobotModelLink_appearance(self)

    def getMass(self):
        """
        getMass(RobotModelLink self) -> Mass

        Retrieves the inertial properties of the link. (Note that the Mass is
        given with origin at the link frame, not about the COM.) 
        """
        return _robotsim.RobotModelLink_getMass(self)

    def setMass(self, *args):
        """
        setMass(RobotModelLink self, Mass mass)

        Sets the inertial proerties of the link. (Note that the Mass is given
        with origin at the link frame, not about the COM.) 
        """
        return _robotsim.RobotModelLink_setMass(self, *args)

    def getParentTransform(self):
        """
        getParentTransform(RobotModelLink self)

        Gets transformation (R,t) to the parent link. 
        """
        return _robotsim.RobotModelLink_getParentTransform(self)

    def setParentTransform(self, *args):
        """
        setParentTransform(RobotModelLink self, double const [9] R, double const [3] t)

        Sets transformation (R,t) to the parent link. 
        """
        return _robotsim.RobotModelLink_setParentTransform(self, *args)

    def getAxis(self):
        """
        getAxis(RobotModelLink self)

        Gets the local rotational / translational axis. 
        """
        return _robotsim.RobotModelLink_getAxis(self)

    def setAxis(self, *args):
        """
        setAxis(RobotModelLink self, double const [3] axis)

        Sets the local rotational / translational axis. 
        """
        return _robotsim.RobotModelLink_setAxis(self, *args)

    def getWorldPosition(self, *args):
        """
        getWorldPosition(RobotModelLink self, double const [3] plocal)

        Converts point from local to world coordinates. 
        """
        return _robotsim.RobotModelLink_getWorldPosition(self, *args)

    def getWorldDirection(self, *args):
        """
        getWorldDirection(RobotModelLink self, double const [3] vlocal)

        Converts direction from local to world coordinates. 
        """
        return _robotsim.RobotModelLink_getWorldDirection(self, *args)

    def getLocalPosition(self, *args):
        """
        getLocalPosition(RobotModelLink self, double const [3] pworld)

        Converts point from world to local coordinates. 
        """
        return _robotsim.RobotModelLink_getLocalPosition(self, *args)

    def getLocalDirection(self, *args):
        """
        getLocalDirection(RobotModelLink self, double const [3] vworld)

        Converts direction from world to local coordinates. 
        """
        return _robotsim.RobotModelLink_getLocalDirection(self, *args)

    def getTransform(self):
        """
        getTransform(RobotModelLink self)

        Gets transformation (R,t) to the world frame. 
        """
        return _robotsim.RobotModelLink_getTransform(self)

    def setTransform(self, *args):
        """
        setTransform(RobotModelLink self, double const [9] R, double const [3] t)

        Sets transformation (R,t) to the world frame. Note: this does NOT
        perform inverse kinematics. The transform is overwritten when the
        robot's setConfig() method is called. 
        """
        return _robotsim.RobotModelLink_setTransform(self, *args)

    def getJacobian(self, *args):
        """
        getJacobian(RobotModelLink self, double const [3] p)

        Returns the total jacobian of the local point p (row-major matrix)
        (orientation jacobian is stacked on position jacobian) 
        """
        return _robotsim.RobotModelLink_getJacobian(self, *args)

    def getPositionJacobian(self, *args):
        """
        getPositionJacobian(RobotModelLink self, double const [3] p)

        Returns the jacobian of the local point p (row-major matrix) 
        """
        return _robotsim.RobotModelLink_getPositionJacobian(self, *args)

    def getOrientationJacobian(self):
        """
        getOrientationJacobian(RobotModelLink self)

        Returns the orientation jacobian of the link (row-major matrix) 
        """
        return _robotsim.RobotModelLink_getOrientationJacobian(self)

    def getVelocity(self):
        """
        getVelocity(RobotModelLink self)

        Returns the velocity of the origin given the robot's current velocity.

        """
        return _robotsim.RobotModelLink_getVelocity(self)

    def getAngularVelocity(self):
        """
        getAngularVelocity(RobotModelLink self)

        Returns the angular velocity given the robot's current velocity. 
        """
        return _robotsim.RobotModelLink_getAngularVelocity(self)

    def getPointVelocity(self, *args):
        """
        getPointVelocity(RobotModelLink self, double const [3] plocal)

        Returns the world velocity of the point given the robot's current
        velocity. 
        """
        return _robotsim.RobotModelLink_getPointVelocity(self, *args)

    def drawLocalGL(self, keepAppearance=True):
        """
        drawLocalGL(RobotModelLink self, bool keepAppearance=True)
        drawLocalGL(RobotModelLink self)

        Draws the link's geometry in its local frame. If keepAppearance=true,
        the current Appearance is honored. Otherwise, just the geometry is
        drawn. 
        """
        return _robotsim.RobotModelLink_drawLocalGL(self, keepAppearance)

    def drawWorldGL(self, keepAppearance=True):
        """
        drawWorldGL(RobotModelLink self, bool keepAppearance=True)
        drawWorldGL(RobotModelLink self)

        Draws the link's geometry in the world frame. If keepAppearance=true,
        the current Appearance is honored. Otherwise, just the geometry is
        drawn. 
        """
        return _robotsim.RobotModelLink_drawWorldGL(self, keepAppearance)

    __swig_setmethods__["world"] = _robotsim.RobotModelLink_world_set
    __swig_getmethods__["world"] = _robotsim.RobotModelLink_world_get
    if _newclass:world = _swig_property(_robotsim.RobotModelLink_world_get, _robotsim.RobotModelLink_world_set)
    __swig_setmethods__["robotIndex"] = _robotsim.RobotModelLink_robotIndex_set
    __swig_getmethods__["robotIndex"] = _robotsim.RobotModelLink_robotIndex_get
    if _newclass:robotIndex = _swig_property(_robotsim.RobotModelLink_robotIndex_get, _robotsim.RobotModelLink_robotIndex_set)
    __swig_setmethods__["robotPtr"] = _robotsim.RobotModelLink_robotPtr_set
    __swig_getmethods__["robotPtr"] = _robotsim.RobotModelLink_robotPtr_get
    if _newclass:robotPtr = _swig_property(_robotsim.RobotModelLink_robotPtr_get, _robotsim.RobotModelLink_robotPtr_set)
    __swig_setmethods__["index"] = _robotsim.RobotModelLink_index_set
    __swig_getmethods__["index"] = _robotsim.RobotModelLink_index_get
    if _newclass:index = _swig_property(_robotsim.RobotModelLink_index_get, _robotsim.RobotModelLink_index_set)
    __swig_destroy__ = _robotsim.delete_RobotModelLink
    __del__ = lambda self : None;
RobotModelLink_swigregister = _robotsim.RobotModelLink_swigregister
RobotModelLink_swigregister(RobotModelLink)

class RobotModelDriver(_object):
    """
    A reference to a driver of a RobotModel.

    A driver corresponds to one of the robot's actuators and encodes how
    its forces are transmitted to joints.

    C++ includes: robotmodel.h 
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RobotModelDriver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RobotModelDriver, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(RobotModelDriver self) -> RobotModelDriver"""
        this = _robotsim.new_RobotModelDriver()
        try: self.this.append(this)
        except: self.this = this
    def getName(self):
        """getName(RobotModelDriver self) -> char const *"""
        return _robotsim.RobotModelDriver_getName(self)

    def robot(self):
        """
        robot(RobotModelDriver self) -> RobotModel

        Returns a reference to the driver's robot. 
        """
        return _robotsim.RobotModelDriver_robot(self)

    def getType(self):
        """
        getType(RobotModelDriver self) -> char const *

        Currently can be "normal", "affine", "rotation",
        "translation", or "custom". 
        """
        return _robotsim.RobotModelDriver_getType(self)

    def getAffectedLink(self):
        """
        getAffectedLink(RobotModelDriver self) -> int

        Returns the single affected link for "normal" links. 
        """
        return _robotsim.RobotModelDriver_getAffectedLink(self)

    def getAffectedLinks(self, *args):
        """
        getAffectedLinks(RobotModelDriver self, intVector links)

        Returns the driver's affected links. 
        """
        return _robotsim.RobotModelDriver_getAffectedLinks(self, *args)

    def getAffineCoeffs(self, *args):
        """
        getAffineCoeffs(RobotModelDriver self, doubleVector scale, doubleVector offset)

        For "affine" links, returns the scale and offset of the driver value
        mapped to the world. 
        """
        return _robotsim.RobotModelDriver_getAffineCoeffs(self, *args)

    def setValue(self, *args):
        """
        setValue(RobotModelDriver self, double val)

        Sets the robot's config to correspond to the given driver value. 
        """
        return _robotsim.RobotModelDriver_setValue(self, *args)

    def getValue(self):
        """
        getValue(RobotModelDriver self) -> double

        Gets the current driver value from the robot's config. 
        """
        return _robotsim.RobotModelDriver_getValue(self)

    def setVelocity(self, *args):
        """
        setVelocity(RobotModelDriver self, double val)

        Sets the robot's velocity to correspond to the given driver velocity
        value. 
        """
        return _robotsim.RobotModelDriver_setVelocity(self, *args)

    def getVelocity(self):
        """
        getVelocity(RobotModelDriver self) -> double

        Gets the current driver velocity value from the robot's velocity. 
        """
        return _robotsim.RobotModelDriver_getVelocity(self)

    __swig_setmethods__["world"] = _robotsim.RobotModelDriver_world_set
    __swig_getmethods__["world"] = _robotsim.RobotModelDriver_world_get
    if _newclass:world = _swig_property(_robotsim.RobotModelDriver_world_get, _robotsim.RobotModelDriver_world_set)
    __swig_setmethods__["robotIndex"] = _robotsim.RobotModelDriver_robotIndex_set
    __swig_getmethods__["robotIndex"] = _robotsim.RobotModelDriver_robotIndex_get
    if _newclass:robotIndex = _swig_property(_robotsim.RobotModelDriver_robotIndex_get, _robotsim.RobotModelDriver_robotIndex_set)
    __swig_setmethods__["robotPtr"] = _robotsim.RobotModelDriver_robotPtr_set
    __swig_getmethods__["robotPtr"] = _robotsim.RobotModelDriver_robotPtr_get
    if _newclass:robotPtr = _swig_property(_robotsim.RobotModelDriver_robotPtr_get, _robotsim.RobotModelDriver_robotPtr_set)
    __swig_setmethods__["index"] = _robotsim.RobotModelDriver_index_set
    __swig_getmethods__["index"] = _robotsim.RobotModelDriver_index_get
    if _newclass:index = _swig_property(_robotsim.RobotModelDriver_index_get, _robotsim.RobotModelDriver_index_set)
    __swig_destroy__ = _robotsim.delete_RobotModelDriver
    __del__ = lambda self : None;
RobotModelDriver_swigregister = _robotsim.RobotModelDriver_swigregister
RobotModelDriver_swigregister(RobotModelDriver)

class RobotModel(_object):
    """
    A model of a dynamic and kinematic robot.

    Stores both constant information, like the reference placement of the
    links, joint limits, velocity limits, etc, as well as a current
    configuration and current velocity which are state-dependent. Several
    functions depend on the robot's current configuration and/or velocity.
    To update that, use the setConfig() and setVelocity() functions.
    setConfig() also update's the robot's link transforms via forward
    kinematics. You may also use setDOFPosition and setDOFVelocity for
    individual changes, but this is more expensive because each call
    updates all of the affected the link transforms.

    It is important to understand that changing the configuration of the
    model doesn't actually send a command to the physical / simulated
    robot. Moreover, the model does not automatically get updated when the
    physical / simulated robot moves. In essence, the model maintains
    temporary storage for performing kinematics, dynamics, and planning
    computations, as well as for visualization.

    The state of the robot is retrieved using getConfig/getVelocity calls,
    and is set using setConfig/setVelocity. Because many routines change
    the robot's configuration, like IK and motion planning, a common
    design pattern is to save/restore the configuration as follows: q =
    robot.getConfig()

    do some stuff that may touch the robot's configuration...

    robot.setConfig(q)

    The model maintains configuration/velocity/acceleration/torque bounds.
    However, these are not enforced by the model, so you can happily set
    configurations outside must rather be enforced by the planner /
    simulator.

    C++ includes: robotmodel.h 
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RobotModel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RobotModel, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(RobotModel self) -> RobotModel"""
        this = _robotsim.new_RobotModel()
        try: self.this.append(this)
        except: self.this = this
    def getID(self):
        """
        getID(RobotModel self) -> int

        Returns the ID of the robot in its world (Note: not the same as the
        robot index) 
        """
        return _robotsim.RobotModel_getID(self)

    def getName(self):
        """getName(RobotModel self) -> char const *"""
        return _robotsim.RobotModel_getName(self)

    def setName(self, *args):
        """setName(RobotModel self, char const * name)"""
        return _robotsim.RobotModel_setName(self, *args)

    def numLinks(self):
        """
        numLinks(RobotModel self) -> int

        Returns the number of links = number of DOF's. 
        """
        return _robotsim.RobotModel_numLinks(self)

    def link(self, *args):
        """
        link(RobotModel self, int index) -> RobotModelLink
        link(RobotModel self, char const * name) -> RobotModelLink

        Returns a reference to the named link. 
        """
        return _robotsim.RobotModel_link(self, *args)

    def numDrivers(self):
        """
        numDrivers(RobotModel self) -> int

        Returns the number of drivers. 
        """
        return _robotsim.RobotModel_numDrivers(self)

    def driver(self, *args):
        """
        driver(RobotModel self, int index) -> RobotModelDriver
        driver(RobotModel self, char const * name) -> RobotModelDriver

        Returns a reference to the named driver. 
        """
        return _robotsim.RobotModel_driver(self, *args)

    def getJointType(self, *args):
        """
        getJointType(RobotModel self, int index) -> char const
        getJointType(RobotModel self, char const * name) -> char const *

        Returns the joint type of the joint connecting the named link to its
        parent. 
        """
        return _robotsim.RobotModel_getJointType(self, *args)

    def getConfig(self):
        """
        getConfig(RobotModel self)

        Retrieves the current configuration of the robot model. 
        """
        return _robotsim.RobotModel_getConfig(self)

    def getVelocity(self):
        """
        getVelocity(RobotModel self)

        Retreives the current velocity of the robot model. 
        """
        return _robotsim.RobotModel_getVelocity(self)

    def setConfig(self, *args):
        """
        setConfig(RobotModel self, doubleVector q)

        Sets the current configuration of the robot. Input q is a vector of
        length numLinks(). This also updates forward kinematics of all links.
        Again, it is important to realize that the RobotModel is not the same
        as a simulated robot, and this will not change the simulation world.
        Many functions such as IK and motion planning use the RobotModel
        configuration as a temporary variable, so if you need to keep the
        configuration through a robot-modifying function call, you should call
        q = robot.getConfig() before the call, and then robot.setConfig(q)
        after it. 
        """
        return _robotsim.RobotModel_setConfig(self, *args)

    def setVelocity(self, *args):
        """
        setVelocity(RobotModel self, doubleVector dq)

        Sets the current velocity of the robot model. Like the configuration,
        this is also essentially a temporary variable. 
        """
        return _robotsim.RobotModel_setVelocity(self, *args)

    def getJointLimits(self):
        """
        getJointLimits(RobotModel self)

        Retrieves a pair (qmin,qmax) of min/max joint limit vectors. 
        """
        return _robotsim.RobotModel_getJointLimits(self)

    def setJointLimits(self, *args):
        """
        setJointLimits(RobotModel self, doubleVector qmin, doubleVector qmax)

        Sets the min/max joint limit vectors (must have length numLinks()) 
        """
        return _robotsim.RobotModel_setJointLimits(self, *args)

    def getVelocityLimits(self):
        """
        getVelocityLimits(RobotModel self)

        Retrieve the velocity limit vector vmax, the constraint is |dq[i]| <=
        vmax[i]. 
        """
        return _robotsim.RobotModel_getVelocityLimits(self)

    def setVelocityLimits(self, *args):
        """
        setVelocityLimits(RobotModel self, doubleVector vmax)

        Sets the velocity limit vector vmax, the constraint is |dq[i]| <=
        vmax[i]. 
        """
        return _robotsim.RobotModel_setVelocityLimits(self, *args)

    def getAccelerationLimits(self):
        """
        getAccelerationLimits(RobotModel self)

        Retrieve the acceleration limit vector amax, the constraint is
        |ddq[i]| <= amax[i]. 
        """
        return _robotsim.RobotModel_getAccelerationLimits(self)

    def setAccelerationLimits(self, *args):
        """
        setAccelerationLimits(RobotModel self, doubleVector amax)

        Sets the acceleration limit vector amax, the constraint is |ddq[i]| <=
        amax[i]. 
        """
        return _robotsim.RobotModel_setAccelerationLimits(self, *args)

    def getTorqueLimits(self):
        """
        getTorqueLimits(RobotModel self)

        Retrieve the torque limit vector tmax, the constraint is |torque[i]|
        <= tmax[i]. 
        """
        return _robotsim.RobotModel_getTorqueLimits(self)

    def setTorqueLimits(self, *args):
        """
        setTorqueLimits(RobotModel self, doubleVector tmax)

        Sets the torque limit vector tmax, the constraint is |torque[i]| <=
        tmax[i]. 
        """
        return _robotsim.RobotModel_setTorqueLimits(self, *args)

    def setDOFPosition(self, *args):
        """
        setDOFPosition(RobotModel self, int i, double qi)
        setDOFPosition(RobotModel self, char const * name, double qi)

        Sets a single DOF's position (by name). Note: if you are setting
        several joints at once, use setConfig because this function computes
        forward kinematics every time. 
        """
        return _robotsim.RobotModel_setDOFPosition(self, *args)

    def getDOFPosition(self, *args):
        """
        getDOFPosition(RobotModel self, int i) -> double
        getDOFPosition(RobotModel self, char const * name) -> double

        Returns a single DOF's position (by name) 
        """
        return _robotsim.RobotModel_getDOFPosition(self, *args)

    def getCom(self):
        """
        getCom(RobotModel self)

        Returns the 3D center of mass at the current config. 
        """
        return _robotsim.RobotModel_getCom(self)

    def getComJacobian(self):
        """
        getComJacobian(RobotModel self)

        Returns the 3xn Jacobian matrix of the current center of mass. 
        """
        return _robotsim.RobotModel_getComJacobian(self)

    def getMassMatrix(self):
        """
        getMassMatrix(RobotModel self)

        Returns the nxn mass matrix B(q) 
        """
        return _robotsim.RobotModel_getMassMatrix(self)

    def getMassMatrixInv(self):
        """
        getMassMatrixInv(RobotModel self)

        Returns the inverse of the nxn mass matrix B(q)^-1 (faster than
        inverting result of getMassMatrix) 
        """
        return _robotsim.RobotModel_getMassMatrixInv(self)

    def getCoriolisForceMatrix(self):
        """
        getCoriolisForceMatrix(RobotModel self)

        Returns the Coriolis force matrix C(q,dq) for current config and
        velocity. 
        """
        return _robotsim.RobotModel_getCoriolisForceMatrix(self)

    def getCoriolisForces(self):
        """
        getCoriolisForces(RobotModel self)

        Returns the Coriolis forces C(q,dq)*dq for current config and velocity
        (faster than computing matrix and doing product). ("Forces" is
        somewhat of a misnomer; the result is a joint torque vector) 
        """
        return _robotsim.RobotModel_getCoriolisForces(self)

    def getGravityForces(self, *args):
        """
        getGravityForces(RobotModel self, double const [3] g)

        Returns the generalized gravity vector G(q) for the given workspace
        gravity vector g (usually (0,0,-9.8)). ("Forces" is somewhat of a
        misnomer; the result is a joint torque vector) 
        """
        return _robotsim.RobotModel_getGravityForces(self, *args)

    def torquesFromAccel(self, *args):
        """
        torquesFromAccel(RobotModel self, doubleVector ddq)

        Computes the inverse dynamics (using Recursive Newton Euler solver).
        Note: does not include gravity term G(q) 
        """
        return _robotsim.RobotModel_torquesFromAccel(self, *args)

    def accelFromTorques(self, *args):
        """
        accelFromTorques(RobotModel self, doubleVector t)

        Computes the foward dynamics (using Recursive Newton Euler solver)
        Note: does not include gravity term G(q) 
        """
        return _robotsim.RobotModel_accelFromTorques(self, *args)

    def interpolate(self, *args):
        """
        interpolate(RobotModel self, doubleVector a, doubleVector b, double u)

        Interpolates smoothly between two configurations, properly taking into
        account nonstandard joints. 
        """
        return _robotsim.RobotModel_interpolate(self, *args)

    def distance(self, *args):
        """
        distance(RobotModel self, doubleVector a, doubleVector b) -> double

        Computes a distance between two configurations, properly taking into
        account nonstandard joints. 
        """
        return _robotsim.RobotModel_distance(self, *args)

    def interpolateDeriv(self, *args):
        """
        interpolateDeriv(RobotModel self, doubleVector a, doubleVector b)

        Returns the configuration derivative at a as you interpolate toward b
        at unit speed. 
        """
        return _robotsim.RobotModel_interpolateDeriv(self, *args)

    def randomizeConfig(self, unboundedScale=1.0):
        """
        randomizeConfig(RobotModel self, double unboundedScale=1.0)
        randomizeConfig(RobotModel self)

        Samples a random configuration and updates the robot's pose. Properly
        handles non-normal joints and handles DOFs with infinite bounds using
        a centered Laplacian distribution with the given scaling term. (Note
        that the python random seeding does not affect the result.) 
        """
        return _robotsim.RobotModel_randomizeConfig(self, unboundedScale)

    def selfCollisionEnabled(self, *args):
        """
        selfCollisionEnabled(RobotModel self, int link1, int link2) -> bool

        Queries whether self collisions between two links is enabled. 
        """
        return _robotsim.RobotModel_selfCollisionEnabled(self, *args)

    def enableSelfCollision(self, *args):
        """
        enableSelfCollision(RobotModel self, int link1, int link2, bool value)

        Enables/disables self collisions between two links (depending on
        value) 
        """
        return _robotsim.RobotModel_enableSelfCollision(self, *args)

    def selfCollides(self):
        """
        selfCollides(RobotModel self) -> bool

        Returns true if the robot is in self collision (faster than manual
        testing) 
        """
        return _robotsim.RobotModel_selfCollides(self)

    def drawGL(self, keepAppearance=True):
        """
        drawGL(RobotModel self, bool keepAppearance=True)
        drawGL(RobotModel self)

        Draws the robot geometry. If keepAppearance=true, the current
        appearance is honored. Otherwise, only the raw geometry is drawn.
        PERFORMANCE WARNING: if keepAppearance is false, then this does not
        properly reuse OpenGL display lists. A better approach to changing the
        robot's appearances is to set the link Appearance's directly. 
        """
        return _robotsim.RobotModel_drawGL(self, keepAppearance)

    __swig_setmethods__["world"] = _robotsim.RobotModel_world_set
    __swig_getmethods__["world"] = _robotsim.RobotModel_world_get
    if _newclass:world = _swig_property(_robotsim.RobotModel_world_get, _robotsim.RobotModel_world_set)
    __swig_setmethods__["index"] = _robotsim.RobotModel_index_set
    __swig_getmethods__["index"] = _robotsim.RobotModel_index_get
    if _newclass:index = _swig_property(_robotsim.RobotModel_index_get, _robotsim.RobotModel_index_set)
    __swig_setmethods__["robot"] = _robotsim.RobotModel_robot_set
    __swig_getmethods__["robot"] = _robotsim.RobotModel_robot_get
    if _newclass:robot = _swig_property(_robotsim.RobotModel_robot_get, _robotsim.RobotModel_robot_set)
    __swig_destroy__ = _robotsim.delete_RobotModel
    __del__ = lambda self : None;
RobotModel_swigregister = _robotsim.RobotModel_swigregister
RobotModel_swigregister(RobotModel)

class RigidObjectModel(_object):
    """
    A rigid movable object.

    A rigid object has a name, geometry, appearance, mass, surface
    properties, and current transform / velocity.

    State is retrieved/set using get/setTransform, and get/setVelocity

    C++ includes: robotmodel.h 
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RigidObjectModel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RigidObjectModel, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(RigidObjectModel self) -> RigidObjectModel"""
        this = _robotsim.new_RigidObjectModel()
        try: self.this.append(this)
        except: self.this = this
    def getID(self):
        """getID(RigidObjectModel self) -> int"""
        return _robotsim.RigidObjectModel_getID(self)

    def getName(self):
        """getName(RigidObjectModel self) -> char const *"""
        return _robotsim.RigidObjectModel_getName(self)

    def setName(self, *args):
        """setName(RigidObjectModel self, char const * name)"""
        return _robotsim.RigidObjectModel_setName(self, *args)

    def geometry(self):
        """geometry(RigidObjectModel self) -> Geometry3D"""
        return _robotsim.RigidObjectModel_geometry(self)

    def appearance(self):
        """appearance(RigidObjectModel self) -> Appearance"""
        return _robotsim.RigidObjectModel_appearance(self)

    def getMass(self):
        """getMass(RigidObjectModel self) -> Mass"""
        return _robotsim.RigidObjectModel_getMass(self)

    def setMass(self, *args):
        """setMass(RigidObjectModel self, Mass mass)"""
        return _robotsim.RigidObjectModel_setMass(self, *args)

    def getContactParameters(self):
        """getContactParameters(RigidObjectModel self) -> ContactParameters"""
        return _robotsim.RigidObjectModel_getContactParameters(self)

    def setContactParameters(self, *args):
        """setContactParameters(RigidObjectModel self, ContactParameters params)"""
        return _robotsim.RigidObjectModel_setContactParameters(self, *args)

    def getTransform(self):
        """
        getTransform(RigidObjectModel self)

        Retrieves the rotation / translation of the rigid object (R,t) 
        """
        return _robotsim.RigidObjectModel_getTransform(self)

    def setTransform(self, *args):
        """
        setTransform(RigidObjectModel self, double const [9] R, double const [3] t)

        Sets the rotation / translation (R,t) of the rigid object. 
        """
        return _robotsim.RigidObjectModel_setTransform(self, *args)

    def getVelocity(self):
        """
        getVelocity(RigidObjectModel self)

        Retrieves the (angular velocity, velocity) of the rigid object. 
        """
        return _robotsim.RigidObjectModel_getVelocity(self)

    def setVelocity(self, *args):
        """
        setVelocity(RigidObjectModel self, double const [3] angularVelocity, double const [3] velocity)

        Sets the (angular velocity, velocity) of the rigid object. 
        """
        return _robotsim.RigidObjectModel_setVelocity(self, *args)

    def drawGL(self, keepAppearance=True):
        """
        drawGL(RigidObjectModel self, bool keepAppearance=True)
        drawGL(RigidObjectModel self)

        Draws the object's geometry. If keepAppearance=true, the current
        appearance is honored. Otherwise, only the raw geometry is drawn.
        PERFORMANCE WARNING: if keepAppearance is false, then this does not
        properly reuse OpenGL display lists. A better approach to changing
        object's Appearance directly. 
        """
        return _robotsim.RigidObjectModel_drawGL(self, keepAppearance)

    __swig_setmethods__["world"] = _robotsim.RigidObjectModel_world_set
    __swig_getmethods__["world"] = _robotsim.RigidObjectModel_world_get
    if _newclass:world = _swig_property(_robotsim.RigidObjectModel_world_get, _robotsim.RigidObjectModel_world_set)
    __swig_setmethods__["index"] = _robotsim.RigidObjectModel_index_set
    __swig_getmethods__["index"] = _robotsim.RigidObjectModel_index_get
    if _newclass:index = _swig_property(_robotsim.RigidObjectModel_index_get, _robotsim.RigidObjectModel_index_set)
    __swig_setmethods__["object"] = _robotsim.RigidObjectModel_object_set
    __swig_getmethods__["object"] = _robotsim.RigidObjectModel_object_get
    if _newclass:object = _swig_property(_robotsim.RigidObjectModel_object_get, _robotsim.RigidObjectModel_object_set)
    __swig_destroy__ = _robotsim.delete_RigidObjectModel
    __del__ = lambda self : None;
RigidObjectModel_swigregister = _robotsim.RigidObjectModel_swigregister
RigidObjectModel_swigregister(RigidObjectModel)

class TerrainModel(_object):
    """
    Static environment geometry.

    C++ includes: robotmodel.h 
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TerrainModel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TerrainModel, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(TerrainModel self) -> TerrainModel"""
        this = _robotsim.new_TerrainModel()
        try: self.this.append(this)
        except: self.this = this
    def getID(self):
        """getID(TerrainModel self) -> int"""
        return _robotsim.TerrainModel_getID(self)

    def getName(self):
        """getName(TerrainModel self) -> char const *"""
        return _robotsim.TerrainModel_getName(self)

    def setName(self, *args):
        """setName(TerrainModel self, char const * name)"""
        return _robotsim.TerrainModel_setName(self, *args)

    def geometry(self):
        """geometry(TerrainModel self) -> Geometry3D"""
        return _robotsim.TerrainModel_geometry(self)

    def appearance(self):
        """appearance(TerrainModel self) -> Appearance"""
        return _robotsim.TerrainModel_appearance(self)

    def setFriction(self, *args):
        """setFriction(TerrainModel self, double friction)"""
        return _robotsim.TerrainModel_setFriction(self, *args)

    def drawGL(self, keepAppearance=True):
        """
        drawGL(TerrainModel self, bool keepAppearance=True)
        drawGL(TerrainModel self)

        Draws the object's geometry. If keepAppearance=true, the current
        appearance is honored. Otherwise, only the raw geometry is drawn.
        PERFORMANCE WARNING: if keepAppearance is false, then this does not
        properly reuse OpenGL display lists. A better approach to changing
        object's Appearance directly. 
        """
        return _robotsim.TerrainModel_drawGL(self, keepAppearance)

    __swig_setmethods__["world"] = _robotsim.TerrainModel_world_set
    __swig_getmethods__["world"] = _robotsim.TerrainModel_world_get
    if _newclass:world = _swig_property(_robotsim.TerrainModel_world_get, _robotsim.TerrainModel_world_set)
    __swig_setmethods__["index"] = _robotsim.TerrainModel_index_set
    __swig_getmethods__["index"] = _robotsim.TerrainModel_index_get
    if _newclass:index = _swig_property(_robotsim.TerrainModel_index_get, _robotsim.TerrainModel_index_set)
    __swig_setmethods__["terrain"] = _robotsim.TerrainModel_terrain_set
    __swig_getmethods__["terrain"] = _robotsim.TerrainModel_terrain_get
    if _newclass:terrain = _swig_property(_robotsim.TerrainModel_terrain_get, _robotsim.TerrainModel_terrain_set)
    __swig_destroy__ = _robotsim.delete_TerrainModel
    __del__ = lambda self : None;
TerrainModel_swigregister = _robotsim.TerrainModel_swigregister
TerrainModel_swigregister(TerrainModel)

class WorldModel(_object):
    """
    The main world class, containing robots, rigid objects, and static
    environment geometry.

    Note that this is just a model and can be changed at will in fact
    planners and simulators will make use of a model to "display"
    computed

    Every robot/robot link/terrain/rigid object is given a unique ID in
    the world. This is potentially a source of confusion because some
    functions take IDs and some take indices. Only the WorldModel and
    Simulator classes use IDs when the argument has 'id' as a suffix,
    e.g., geometry(), appearance(), Simulator.inContact(). All other
    functions use indices, e.g. robot(0), terrain(0), etc.

    To get an object's ID, you can see the value returned by loadElement
    and/or object.getID(). states.

    To save/restore the state of the model, you must manually maintain
    copies of the states of whichever objects you wish to save/restore.

    C++ includes: robotmodel.h 
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WorldModel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WorldModel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(WorldModel self) -> WorldModel
        __init__(WorldModel self, void * ptrRobotWorld) -> WorldModel
        __init__(WorldModel self, WorldModel w) -> WorldModel
        """
        this = _robotsim.new_WorldModel(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _robotsim.delete_WorldModel
    __del__ = lambda self : None;
    def copy(self):
        """
        copy(WorldModel self) -> WorldModel

        Creates a copy of the world model. Note that geometries and
        appearances are shared... 
        """
        return _robotsim.WorldModel_copy(self)

    def readFile(self, *args):
        """
        readFile(WorldModel self, char const * fn) -> bool

        Reads from a world XML file. 
        """
        return _robotsim.WorldModel_readFile(self, *args)

    def loadFile(self, *args):
        """
        loadFile(WorldModel self, char const * fn) -> bool

        Alias of readFile. 
        """
        return _robotsim.WorldModel_loadFile(self, *args)

    def saveFile(self, *args):
        """
        saveFile(WorldModel self, char const * fn, char const * elementDir=None) -> bool
        saveFile(WorldModel self, char const * fn) -> bool

        Saves to a world XML file. If elementDir is provided, then robots,
        terrains, etc. will be saved there. Otherwise they will be saved to a
        folder with the same base name as fn (without the trailing .xml) 
        """
        return _robotsim.WorldModel_saveFile(self, *args)

    def numRobots(self):
        """numRobots(WorldModel self) -> int"""
        return _robotsim.WorldModel_numRobots(self)

    def numRobotLinks(self, *args):
        """numRobotLinks(WorldModel self, int robot) -> int"""
        return _robotsim.WorldModel_numRobotLinks(self, *args)

    def numRigidObjects(self):
        """numRigidObjects(WorldModel self) -> int"""
        return _robotsim.WorldModel_numRigidObjects(self)

    def numTerrains(self):
        """numTerrains(WorldModel self) -> int"""
        return _robotsim.WorldModel_numTerrains(self)

    def numIDs(self):
        """numIDs(WorldModel self) -> int"""
        return _robotsim.WorldModel_numIDs(self)

    def robot(self, *args):
        """
        robot(WorldModel self, int index) -> RobotModel
        robot(WorldModel self, char const * name) -> RobotModel
        """
        return _robotsim.WorldModel_robot(self, *args)

    def robotLink(self, *args):
        """
        robotLink(WorldModel self, int robot, int index) -> RobotModelLink
        robotLink(WorldModel self, char const * robot, char const * name) -> RobotModelLink
        """
        return _robotsim.WorldModel_robotLink(self, *args)

    def rigidObject(self, *args):
        """
        rigidObject(WorldModel self, int index) -> RigidObjectModel
        rigidObject(WorldModel self, char const * name) -> RigidObjectModel
        """
        return _robotsim.WorldModel_rigidObject(self, *args)

    def terrain(self, *args):
        """
        terrain(WorldModel self, int index) -> TerrainModel
        terrain(WorldModel self, char const * name) -> TerrainModel
        """
        return _robotsim.WorldModel_terrain(self, *args)

    def makeRobot(self, *args):
        """
        makeRobot(WorldModel self, char const * name) -> RobotModel

        Creates a new empty robot. (Not terribly useful now since you can't
        resize the number of links yet) 
        """
        return _robotsim.WorldModel_makeRobot(self, *args)

    def makeRigidObject(self, *args):
        """
        makeRigidObject(WorldModel self, char const * name) -> RigidObjectModel

        Creates a new empty rigid object. 
        """
        return _robotsim.WorldModel_makeRigidObject(self, *args)

    def makeTerrain(self, *args):
        """
        makeTerrain(WorldModel self, char const * name) -> TerrainModel

        Creates a new empty terrain. 
        """
        return _robotsim.WorldModel_makeTerrain(self, *args)

    def loadRobot(self, *args):
        """
        loadRobot(WorldModel self, char const * fn) -> RobotModel

        Loads a robot from a .rob or .urdf file. An empty robot is returned if
        loading fails. 
        """
        return _robotsim.WorldModel_loadRobot(self, *args)

    def loadRigidObject(self, *args):
        """
        loadRigidObject(WorldModel self, char const * fn) -> RigidObjectModel

        Loads a rigid object from a .obj or a mesh file. An empty rigid object
        is returned if loading fails. 
        """
        return _robotsim.WorldModel_loadRigidObject(self, *args)

    def loadTerrain(self, *args):
        """
        loadTerrain(WorldModel self, char const * fn) -> TerrainModel

        Loads a rigid object from a mesh file. An empty terrain is returned if
        loading fails. 
        """
        return _robotsim.WorldModel_loadTerrain(self, *args)

    def loadElement(self, *args):
        """
        loadElement(WorldModel self, char const * fn) -> int

        Loads some element from a file, automatically detecting its type.
        Meshes are interpreted as terrains. The ID is returned, or -1 if
        loading failed. 
        """
        return _robotsim.WorldModel_loadElement(self, *args)

    def add(self, *args):
        """
        add(WorldModel self, char const * name, RobotModel robot) -> RobotModel
        add(WorldModel self, char const * name, RigidObjectModel obj) -> RigidObjectModel
        add(WorldModel self, char const * name, TerrainModel terrain) -> TerrainModel

        Adds a copy of the given terrain to this world, either from this
        WorldModel or another. 
        """
        return _robotsim.WorldModel_add(self, *args)

    def remove(self, *args):
        """
        remove(WorldModel self, RobotModel robot)
        remove(WorldModel self, RigidObjectModel object)
        remove(WorldModel self, TerrainModel terrain)

        Removes a terrain. It must be in this world or an exception is raised.
        IMPORTANT: all other references to terrains will be invalidated. 
        """
        return _robotsim.WorldModel_remove(self, *args)

    def getName(self, *args):
        """
        getName(WorldModel self, int id) -> std::string

        Retrieves a name for a given element ID. 
        """
        return _robotsim.WorldModel_getName(self, *args)

    def geometry(self, *args):
        """
        geometry(WorldModel self, int id) -> Geometry3D

        Retrieves a geometry for a given element ID. 
        """
        return _robotsim.WorldModel_geometry(self, *args)

    def appearance(self, *args):
        """
        appearance(WorldModel self, int id) -> Appearance

        Retrieves an appearance for a given element ID. 
        """
        return _robotsim.WorldModel_appearance(self, *args)

    def drawGL(self):
        """
        drawGL(WorldModel self)

        Draws the entire world using OpenGL. 
        """
        return _robotsim.WorldModel_drawGL(self)

    def enableGeometryLoading(self, *args):
        """
        enableGeometryLoading(WorldModel self, bool enabled)

        If geometry loading is set to false, then only the kinematics are
        loaded from disk, and no geometry / visualization / collision
        detection structures will be loaded. Useful for quick scripts that
        just use kinematics / dynamics of a robot. 
        """
        return _robotsim.WorldModel_enableGeometryLoading(self, *args)

    def enableInitCollisions(self, *args):
        """
        enableInitCollisions(WorldModel self, bool enabled)

        If collision detection is set to true, then collision acceleration
        data structures will be automatically initialized, with debugging
        information. Useful for scripts that do planning and for which
        collision initialization may take a long time. Note that even when
        this flag is off, the collision acceleration data structures will
        indeed be initialized whenever geometry collision, distance, or ray-
        casting routines are called. 
        """
        return _robotsim.WorldModel_enableInitCollisions(self, *args)

    __swig_setmethods__["index"] = _robotsim.WorldModel_index_set
    __swig_getmethods__["index"] = _robotsim.WorldModel_index_get
    if _newclass:index = _swig_property(_robotsim.WorldModel_index_get, _robotsim.WorldModel_index_set)
WorldModel_swigregister = _robotsim.WorldModel_swigregister
WorldModel_swigregister(WorldModel)

class IKObjective(_object):
    """
    A class defining an inverse kinematic target. Either a link on a robot
    can take on a fixed position/orientation in the world frame, or a
    relative position/orientation to another frame.

    Currently only fixed-point constraints and fixed-transform constraints
    are implemented in the Python API.

    C++ includes: robotik.h 
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IKObjective, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IKObjective, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(IKObjective self) -> IKObjective"""
        this = _robotsim.new_IKObjective()
        try: self.this.append(this)
        except: self.this = this
    def link(self):
        """
        link(IKObjective self) -> int

        The index of the robot link that is constrained. 
        """
        return _robotsim.IKObjective_link(self)

    def destLink(self):
        """
        destLink(IKObjective self) -> int

        The index of the destination link, or -1 if fixed to the world. 
        """
        return _robotsim.IKObjective_destLink(self)

    def numPosDims(self):
        """
        numPosDims(IKObjective self) -> int

        Returns the number of position dimensions constrained (0-3) 
        """
        return _robotsim.IKObjective_numPosDims(self)

    def numRotDims(self):
        """
        numRotDims(IKObjective self) -> int

        Returns the number of rotation dimensions constrained (0-3) 
        """
        return _robotsim.IKObjective_numRotDims(self)

    def setFixedPoint(self, *args):
        """
        setFixedPoint(IKObjective self, int link, double const [3] plocal, double const [3] pworld)

        Sets a fixed-point constraint. 
        """
        return _robotsim.IKObjective_setFixedPoint(self, *args)

    def setFixedPoints(self, *args):
        """
        setFixedPoints(IKObjective self, int link, PyObject * plocals, PyObject * pworlds)

        Sets a multiple fixed-point constraint. 
        """
        return _robotsim.IKObjective_setFixedPoints(self, *args)

    def setFixedTransform(self, *args):
        """
        setFixedTransform(IKObjective self, int link, double const [9] R, double const [3] t)

        Sets a fixed-transform constraint (R,t) 
        """
        return _robotsim.IKObjective_setFixedTransform(self, *args)

    def setRelativePoint(self, *args):
        """
        setRelativePoint(IKObjective self, int link1, int link2, double const [3] p1, double const [3] p2)

        Sets a fixed-point constraint relative to link2. 
        """
        return _robotsim.IKObjective_setRelativePoint(self, *args)

    def setRelativePoints(self, *args):
        """
        setRelativePoints(IKObjective self, int link1, int link2, PyObject * p1s, PyObject * p2s)

        Sets a multiple fixed-point constraint relative to link2. 
        """
        return _robotsim.IKObjective_setRelativePoints(self, *args)

    def setRelativeTransform(self, *args):
        """
        setRelativeTransform(IKObjective self, int link, int linkTgt, double const [9] R, double const [3] t)

        Sets a fixed-transform constraint (R,t) relative to linkTgt. 
        """
        return _robotsim.IKObjective_setRelativeTransform(self, *args)

    def setLinks(self, *args):
        """
        setLinks(IKObjective self, int link, int link2=-1)
        setLinks(IKObjective self, int link)

        Manual construction. 
        """
        return _robotsim.IKObjective_setLinks(self, *args)

    def setFreePosition(self):
        """
        setFreePosition(IKObjective self)

        Manual: Sets a free position constraint. 
        """
        return _robotsim.IKObjective_setFreePosition(self)

    def setFixedPosConstraint(self, *args):
        """
        setFixedPosConstraint(IKObjective self, double const [3] tlocal, double const [3] tworld)

        Manual: Sets a fixed position constraint. 
        """
        return _robotsim.IKObjective_setFixedPosConstraint(self, *args)

    def setPlanarPosConstraint(self, *args):
        """
        setPlanarPosConstraint(IKObjective self, double const [3] tlocal, double const [3] nworld, double oworld)

        Manual: Sets a planar position constraint nworld^T T(link)*tlocal +
        oworld = 0. 
        """
        return _robotsim.IKObjective_setPlanarPosConstraint(self, *args)

    def setLinearPosConstraint(self, *args):
        """
        setLinearPosConstraint(IKObjective self, double const [3] tlocal, double const [3] sworld, double const [3] dworld)

        Manual: Sets a linear position constraint T(link)*tlocal = sworld +
        u*dworld for some real value u. 
        """
        return _robotsim.IKObjective_setLinearPosConstraint(self, *args)

    def setFreeRotConstraint(self):
        """
        setFreeRotConstraint(IKObjective self)

        Manual: Sets a free rotation constraint. 
        """
        return _robotsim.IKObjective_setFreeRotConstraint(self)

    def setFixedRotConstraint(self, *args):
        """
        setFixedRotConstraint(IKObjective self, double const [9] R)

        Manual: Sets a fixed rotation constraint. 
        """
        return _robotsim.IKObjective_setFixedRotConstraint(self, *args)

    def setAxialRotConstraint(self, *args):
        """
        setAxialRotConstraint(IKObjective self, double const [3] alocal, double const [3] aworld)

        Manual: Sets an axial rotation constraint. 
        """
        return _robotsim.IKObjective_setAxialRotConstraint(self, *args)

    def getPosition(self):
        """
        getPosition(IKObjective self)

        Returns the local and global position of the position constraint. 
        """
        return _robotsim.IKObjective_getPosition(self)

    def getPositionDirection(self):
        """
        getPositionDirection(IKObjective self)

        For linear and planar constraints, returns the direction. 
        """
        return _robotsim.IKObjective_getPositionDirection(self)

    def getRotation(self):
        """
        getRotation(IKObjective self)

        For fixed rotation constraints, returns the orientation. 
        """
        return _robotsim.IKObjective_getRotation(self)

    def getRotationAxis(self):
        """
        getRotationAxis(IKObjective self)

        For axis rotation constraints, returns the local and global axes. 
        """
        return _robotsim.IKObjective_getRotationAxis(self)

    def getTransform(self):
        """
        getTransform(IKObjective self)

        For fixed-transform constraints, returns the transform (R,t) 
        """
        return _robotsim.IKObjective_getTransform(self)

    def transform(self, *args):
        """
        transform(IKObjective self, double const [9] R, double const [3] t)

        Tranforms the target position/rotation of this IK constraint by
        transform (R,t) 
        """
        return _robotsim.IKObjective_transform(self, *args)

    def transformLocal(self, *args):
        """
        transformLocal(IKObjective self, double const [9] R, double const [3] t)

        Tranforms the local position/rotation of this IK constraint by
        transform (R,t) 
        """
        return _robotsim.IKObjective_transformLocal(self, *args)

    def matchDestination(self, *args):
        """
        matchDestination(IKObjective self, double const [9] R, double const [3] t)

        Sets the destination coordinates of this constraint to fit the given
        target transform. In other words, if (R,t) is the current link
        transform, this sets the destination position / orientation so that
        this objective has zero error. The current position/rotation
        constraint types are kept. 
        """
        return _robotsim.IKObjective_matchDestination(self, *args)

    def loadString(self, *args):
        """
        loadString(IKObjective self, char const * str) -> bool

        Loads the objective from a Klamp't-native formatted string. For a more
        readable but verbose format, try the JSON IO routines
        loader.toJson/fromJson() 
        """
        return _robotsim.IKObjective_loadString(self, *args)

    def saveString(self):
        """
        saveString(IKObjective self) -> std::string

        Saves the objective to a Klamp't-native formatted string. For a more
        readable but verbose format, try the JSON IO routines
        loader.toJson/fromJson() 
        """
        return _robotsim.IKObjective_saveString(self)

    __swig_setmethods__["goal"] = _robotsim.IKObjective_goal_set
    __swig_getmethods__["goal"] = _robotsim.IKObjective_goal_get
    if _newclass:goal = _swig_property(_robotsim.IKObjective_goal_get, _robotsim.IKObjective_goal_set)
    __swig_destroy__ = _robotsim.delete_IKObjective
    __del__ = lambda self : None;
IKObjective_swigregister = _robotsim.IKObjective_swigregister
IKObjective_swigregister(IKObjective)

class IKSolver(_object):
    """
    An inverse kinematics solver based on the Newton-Raphson technique.

    Typical calling pattern is s = IKSolver(robot) s.add(objective1)
    s.add(objective2) s.setMaxIters(100) s.setTolerance(1e-4) res =
    s.solve() if res: print "IK solution:",robot.getConfig(),"found
    in",s.lastSolveIters(),"iterations, residual",s.getResidual() else:
    print "IK failed:",robot.getConfig(),"found
    in",s.lastSolveIters(),"iterations, residual",s.getResidual()

    sampleInitial() is a convenience routine. More initial configurations
    can be sampled in case the prior configs lead to local minima.

    C++ includes: robotik.h 
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IKSolver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IKSolver, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(IKSolver self, RobotModel robot) -> IKSolver
        __init__(IKSolver self, IKSolver solver) -> IKSolver
        """
        this = _robotsim.new_IKSolver(*args)
        try: self.this.append(this)
        except: self.this = this
    def add(self, *args):
        """
        add(IKSolver self, IKObjective objective)

        Adds a new simultaneous objective. 
        """
        return _robotsim.IKSolver_add(self, *args)

    def set(self, *args):
        """
        set(IKSolver self, int i, IKObjective objective)

        Assigns an existing objective added by add. 
        """
        return _robotsim.IKSolver_set(self, *args)

    def clear(self):
        """
        clear(IKSolver self)

        Clears objectives. 
        """
        return _robotsim.IKSolver_clear(self)

    def setMaxIters(self, *args):
        """
        setMaxIters(IKSolver self, int iters)

        Sets the max # of iterations (default 100) 
        """
        return _robotsim.IKSolver_setMaxIters(self, *args)

    def getMaxIters(self):
        """
        getMaxIters(IKSolver self) -> int

        Gets the max # of iterations. 
        """
        return _robotsim.IKSolver_getMaxIters(self)

    def setTolerance(self, *args):
        """
        setTolerance(IKSolver self, double res)

        Sets the constraint solve tolerance (default 1e-3) 
        """
        return _robotsim.IKSolver_setTolerance(self, *args)

    def getTolerance(self):
        """
        getTolerance(IKSolver self) -> double

        Gets the constraint solve tolerance. 
        """
        return _robotsim.IKSolver_getTolerance(self)

    def setActiveDofs(self, *args):
        """
        setActiveDofs(IKSolver self, intVector active)

        Sets the active degrees of freedom. 
        """
        return _robotsim.IKSolver_setActiveDofs(self, *args)

    def getActiveDofs(self):
        """
        getActiveDofs(IKSolver self)

        Gets the active degrees of freedom. 
        """
        return _robotsim.IKSolver_getActiveDofs(self)

    def setJointLimits(self, *args):
        """
        setJointLimits(IKSolver self, doubleVector qmin, doubleVector qmax)

        Sets limits on the robot's configuration. If empty, this turns off
        joint limits. 
        """
        return _robotsim.IKSolver_setJointLimits(self, *args)

    def getJointLimits(self):
        """
        getJointLimits(IKSolver self)

        Gets the limits on the robot's configuration (by default this is the
        robot's joint limits. 
        """
        return _robotsim.IKSolver_getJointLimits(self)

    def setBiasConfig(self, *args):
        """
        setBiasConfig(IKSolver self, doubleVector biasConfig)

        Biases the solver to approach a given configuration. Setting an empty
        vector clears the bias term. 
        """
        return _robotsim.IKSolver_setBiasConfig(self, *args)

    def getBiasConfig(self):
        """
        getBiasConfig(IKSolver self)

        Gets the solvers' bias configuration. 
        """
        return _robotsim.IKSolver_getBiasConfig(self)

    def isSolved(self):
        """
        isSolved(IKSolver self) -> bool

        Returns true if the current configuration residual is less than tol.

        """
        return _robotsim.IKSolver_isSolved(self)

    def getResidual(self):
        """
        getResidual(IKSolver self)

        Returns a vector describing the error of the objective at the current
        configuration. 
        """
        return _robotsim.IKSolver_getResidual(self)

    def getJacobian(self):
        """
        getJacobian(IKSolver self)

        Returns a matrix describing the instantaneous derivative of the
        objective with respect to the active Dofs. 
        """
        return _robotsim.IKSolver_getJacobian(self)

    def solve(self, *args):
        """
        solve(IKSolver self) -> bool
        solve(IKSolver self, int iters, double tol) -> PyObject *

        Old-style: will be deprecated. Specify # of iterations and tolerance.
        Tries to find a configuration that satifies all simultaneous
        objectives up to the desired tolerance. Returns (res,iterations) where
        res is true if x converged. 
        """
        return _robotsim.IKSolver_solve(self, *args)

    def lastSolveIters(self):
        """
        lastSolveIters(IKSolver self) -> int

        Returns the number of Newton-Raphson iterations used in the last
        solve() call. 
        """
        return _robotsim.IKSolver_lastSolveIters(self)

    def sampleInitial(self):
        """
        sampleInitial(IKSolver self)

        Samples an initial random configuration. 
        """
        return _robotsim.IKSolver_sampleInitial(self)

    __swig_setmethods__["robot"] = _robotsim.IKSolver_robot_set
    __swig_getmethods__["robot"] = _robotsim.IKSolver_robot_get
    if _newclass:robot = _swig_property(_robotsim.IKSolver_robot_get, _robotsim.IKSolver_robot_set)
    __swig_setmethods__["objectives"] = _robotsim.IKSolver_objectives_set
    __swig_getmethods__["objectives"] = _robotsim.IKSolver_objectives_get
    if _newclass:objectives = _swig_property(_robotsim.IKSolver_objectives_get, _robotsim.IKSolver_objectives_set)
    __swig_setmethods__["tol"] = _robotsim.IKSolver_tol_set
    __swig_getmethods__["tol"] = _robotsim.IKSolver_tol_get
    if _newclass:tol = _swig_property(_robotsim.IKSolver_tol_get, _robotsim.IKSolver_tol_set)
    __swig_setmethods__["maxIters"] = _robotsim.IKSolver_maxIters_set
    __swig_getmethods__["maxIters"] = _robotsim.IKSolver_maxIters_get
    if _newclass:maxIters = _swig_property(_robotsim.IKSolver_maxIters_get, _robotsim.IKSolver_maxIters_set)
    __swig_setmethods__["activeDofs"] = _robotsim.IKSolver_activeDofs_set
    __swig_getmethods__["activeDofs"] = _robotsim.IKSolver_activeDofs_get
    if _newclass:activeDofs = _swig_property(_robotsim.IKSolver_activeDofs_get, _robotsim.IKSolver_activeDofs_set)
    __swig_setmethods__["useJointLimits"] = _robotsim.IKSolver_useJointLimits_set
    __swig_getmethods__["useJointLimits"] = _robotsim.IKSolver_useJointLimits_get
    if _newclass:useJointLimits = _swig_property(_robotsim.IKSolver_useJointLimits_get, _robotsim.IKSolver_useJointLimits_set)
    __swig_setmethods__["qmin"] = _robotsim.IKSolver_qmin_set
    __swig_getmethods__["qmin"] = _robotsim.IKSolver_qmin_get
    if _newclass:qmin = _swig_property(_robotsim.IKSolver_qmin_get, _robotsim.IKSolver_qmin_set)
    __swig_setmethods__["qmax"] = _robotsim.IKSolver_qmax_set
    __swig_getmethods__["qmax"] = _robotsim.IKSolver_qmax_get
    if _newclass:qmax = _swig_property(_robotsim.IKSolver_qmax_get, _robotsim.IKSolver_qmax_set)
    __swig_setmethods__["biasConfig"] = _robotsim.IKSolver_biasConfig_set
    __swig_getmethods__["biasConfig"] = _robotsim.IKSolver_biasConfig_get
    if _newclass:biasConfig = _swig_property(_robotsim.IKSolver_biasConfig_get, _robotsim.IKSolver_biasConfig_set)
    __swig_setmethods__["lastIters"] = _robotsim.IKSolver_lastIters_set
    __swig_getmethods__["lastIters"] = _robotsim.IKSolver_lastIters_get
    if _newclass:lastIters = _swig_property(_robotsim.IKSolver_lastIters_get, _robotsim.IKSolver_lastIters_set)
    __swig_destroy__ = _robotsim.delete_IKSolver
    __del__ = lambda self : None;
IKSolver_swigregister = _robotsim.IKSolver_swigregister
IKSolver_swigregister(IKSolver)

class GeneralizedIKObjective(_object):
    """
    An inverse kinematics target for matching points between two robots
    and/or objects.

    The objects are chosen upon construction, so the following are valid:
    GeneralizedIKObjective(a) is an objective for object a to be
    constrained relative to the environment.

    GeneralizedIKObjective(a,b) is an objective for object a to be
    constrained relative to b. Here a and b can be links on any robot or
    rigid objects.

    Once constructed, call setPoint, setPoints, or setTransform to specify
    the nature of the constraint.

    C++ includes: robotik.h 
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeneralizedIKObjective, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GeneralizedIKObjective, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(GeneralizedIKObjective self, GeneralizedIKObjective obj) -> GeneralizedIKObjective
        __init__(GeneralizedIKObjective self, RobotModelLink link) -> GeneralizedIKObjective
        __init__(GeneralizedIKObjective self, RigidObjectModel obj) -> GeneralizedIKObjective
        __init__(GeneralizedIKObjective self, RobotModelLink link, RobotModelLink link2) -> GeneralizedIKObjective
        __init__(GeneralizedIKObjective self, RobotModelLink link, RigidObjectModel obj2) -> GeneralizedIKObjective
        __init__(GeneralizedIKObjective self, RigidObjectModel obj, RobotModelLink link2) -> GeneralizedIKObjective
        __init__(GeneralizedIKObjective self, RigidObjectModel obj, RigidObjectModel obj2) -> GeneralizedIKObjective
        """
        this = _robotsim.new_GeneralizedIKObjective(*args)
        try: self.this.append(this)
        except: self.this = this
    def setPoint(self, *args):
        """setPoint(GeneralizedIKObjective self, double const [3] p1, double const [3] p2)"""
        return _robotsim.GeneralizedIKObjective_setPoint(self, *args)

    def setPoints(self, *args):
        """setPoints(GeneralizedIKObjective self, PyObject * p1s, PyObject * p2s)"""
        return _robotsim.GeneralizedIKObjective_setPoints(self, *args)

    def setTransform(self, *args):
        """setTransform(GeneralizedIKObjective self, double const [9] R, double const [3] t)"""
        return _robotsim.GeneralizedIKObjective_setTransform(self, *args)

    __swig_setmethods__["link1"] = _robotsim.GeneralizedIKObjective_link1_set
    __swig_getmethods__["link1"] = _robotsim.GeneralizedIKObjective_link1_get
    if _newclass:link1 = _swig_property(_robotsim.GeneralizedIKObjective_link1_get, _robotsim.GeneralizedIKObjective_link1_set)
    __swig_setmethods__["link2"] = _robotsim.GeneralizedIKObjective_link2_set
    __swig_getmethods__["link2"] = _robotsim.GeneralizedIKObjective_link2_get
    if _newclass:link2 = _swig_property(_robotsim.GeneralizedIKObjective_link2_get, _robotsim.GeneralizedIKObjective_link2_set)
    __swig_setmethods__["obj1"] = _robotsim.GeneralizedIKObjective_obj1_set
    __swig_getmethods__["obj1"] = _robotsim.GeneralizedIKObjective_obj1_get
    if _newclass:obj1 = _swig_property(_robotsim.GeneralizedIKObjective_obj1_get, _robotsim.GeneralizedIKObjective_obj1_set)
    __swig_setmethods__["obj2"] = _robotsim.GeneralizedIKObjective_obj2_set
    __swig_getmethods__["obj2"] = _robotsim.GeneralizedIKObjective_obj2_get
    if _newclass:obj2 = _swig_property(_robotsim.GeneralizedIKObjective_obj2_get, _robotsim.GeneralizedIKObjective_obj2_set)
    __swig_setmethods__["isObj1"] = _robotsim.GeneralizedIKObjective_isObj1_set
    __swig_getmethods__["isObj1"] = _robotsim.GeneralizedIKObjective_isObj1_get
    if _newclass:isObj1 = _swig_property(_robotsim.GeneralizedIKObjective_isObj1_get, _robotsim.GeneralizedIKObjective_isObj1_set)
    __swig_setmethods__["isObj2"] = _robotsim.GeneralizedIKObjective_isObj2_set
    __swig_getmethods__["isObj2"] = _robotsim.GeneralizedIKObjective_isObj2_get
    if _newclass:isObj2 = _swig_property(_robotsim.GeneralizedIKObjective_isObj2_get, _robotsim.GeneralizedIKObjective_isObj2_set)
    __swig_setmethods__["goal"] = _robotsim.GeneralizedIKObjective_goal_set
    __swig_getmethods__["goal"] = _robotsim.GeneralizedIKObjective_goal_get
    if _newclass:goal = _swig_property(_robotsim.GeneralizedIKObjective_goal_get, _robotsim.GeneralizedIKObjective_goal_set)
    __swig_destroy__ = _robotsim.delete_GeneralizedIKObjective
    __del__ = lambda self : None;
GeneralizedIKObjective_swigregister = _robotsim.GeneralizedIKObjective_swigregister
GeneralizedIKObjective_swigregister(GeneralizedIKObjective)

class GeneralizedIKSolver(_object):
    """
    An inverse kinematics solver between multiple robots and/or objects.
    NOT IMPLEMENTED YET.

    C++ includes: robotik.h 
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeneralizedIKSolver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GeneralizedIKSolver, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(GeneralizedIKSolver self, WorldModel world) -> GeneralizedIKSolver"""
        this = _robotsim.new_GeneralizedIKSolver(*args)
        try: self.this.append(this)
        except: self.this = this
    def add(self, *args):
        """
        add(GeneralizedIKSolver self, GeneralizedIKObjective objective)

        Adds a new simultaneous objective. 
        """
        return _robotsim.GeneralizedIKSolver_add(self, *args)

    def setMaxIters(self, *args):
        """
        setMaxIters(GeneralizedIKSolver self, int iters)

        Sets the max # of iterations (default 100) 
        """
        return _robotsim.GeneralizedIKSolver_setMaxIters(self, *args)

    def setTolerance(self, *args):
        """
        setTolerance(GeneralizedIKSolver self, double res)

        Sets the constraint solve tolerance (default 1e-3) 
        """
        return _robotsim.GeneralizedIKSolver_setTolerance(self, *args)

    def getResidual(self):
        """
        getResidual(GeneralizedIKSolver self)

        Returns a vector describing the error of the objective. 
        """
        return _robotsim.GeneralizedIKSolver_getResidual(self)

    def getJacobian(self):
        """
        getJacobian(GeneralizedIKSolver self)

        Returns a matrix describing the instantaneous derivative of the
        objective with respect to the active parameters. 
        """
        return _robotsim.GeneralizedIKSolver_getJacobian(self)

    def solve(self):
        """
        solve(GeneralizedIKSolver self) -> PyObject *

        Tries to find a configuration that satifies all simultaneous
        objectives up to the desired tolerance. Returns (res,iters) where res
        indicates whether x converged. 
        """
        return _robotsim.GeneralizedIKSolver_solve(self)

    def sampleInitial(self):
        """
        sampleInitial(GeneralizedIKSolver self)

        Samples an initial random configuration. 
        """
        return _robotsim.GeneralizedIKSolver_sampleInitial(self)

    __swig_setmethods__["world"] = _robotsim.GeneralizedIKSolver_world_set
    __swig_getmethods__["world"] = _robotsim.GeneralizedIKSolver_world_get
    if _newclass:world = _swig_property(_robotsim.GeneralizedIKSolver_world_get, _robotsim.GeneralizedIKSolver_world_set)
    __swig_setmethods__["objectives"] = _robotsim.GeneralizedIKSolver_objectives_set
    __swig_getmethods__["objectives"] = _robotsim.GeneralizedIKSolver_objectives_get
    if _newclass:objectives = _swig_property(_robotsim.GeneralizedIKSolver_objectives_get, _robotsim.GeneralizedIKSolver_objectives_set)
    __swig_setmethods__["tol"] = _robotsim.GeneralizedIKSolver_tol_set
    __swig_getmethods__["tol"] = _robotsim.GeneralizedIKSolver_tol_get
    if _newclass:tol = _swig_property(_robotsim.GeneralizedIKSolver_tol_get, _robotsim.GeneralizedIKSolver_tol_set)
    __swig_setmethods__["maxIters"] = _robotsim.GeneralizedIKSolver_maxIters_set
    __swig_getmethods__["maxIters"] = _robotsim.GeneralizedIKSolver_maxIters_get
    if _newclass:maxIters = _swig_property(_robotsim.GeneralizedIKSolver_maxIters_get, _robotsim.GeneralizedIKSolver_maxIters_set)
    __swig_setmethods__["useJointLimits"] = _robotsim.GeneralizedIKSolver_useJointLimits_set
    __swig_getmethods__["useJointLimits"] = _robotsim.GeneralizedIKSolver_useJointLimits_get
    if _newclass:useJointLimits = _swig_property(_robotsim.GeneralizedIKSolver_useJointLimits_get, _robotsim.GeneralizedIKSolver_useJointLimits_set)
    __swig_destroy__ = _robotsim.delete_GeneralizedIKSolver
    __del__ = lambda self : None;
GeneralizedIKSolver_swigregister = _robotsim.GeneralizedIKSolver_swigregister
GeneralizedIKSolver_swigregister(GeneralizedIKSolver)


def SampleTransform(*args):
  """
    SampleTransform(IKObjective obj)
    SampleTransform(GeneralizedIKObjective obj)
    """
  return _robotsim.SampleTransform(*args)
class SimRobotSensor(_object):
    """
    A sensor on a simulated robot. Retreive this from the controller, and
    use getMeasurements to get the currently simulated measurement vector.

    Sensors are automatically updated through the sim.simulate call, and
    getMeasurements() retrieves the previously updated values. As a
    result, you may get garbage measurements before the first sim.simulate
    call is made.

    There is also a new mode for doing kinematic simulation, which is
    supported (i.e., makes sensible measurements) for some types of
    sensors when just a robot / world model is given. This is similar to
    Simulation.fakeSimulate but the entire controller structure is
    bypassed. You can randomly set the robot's position, call
    kinematicReset(), and then call kinematicSimulate(). Subsequent calls
    assume the robot is being driven along a trajectory until the next
    kinematicReset() is called. LaserSensor, CameraSensor, TiltSensor,
    AccelerometerSensor, GyroSensor, JointPositionSensor,
    JointVelocitySensor support kinematic simulation mode. FilteredSensor
    and TimeDelayedSensor also work. The force-related sensors
    (ContactSensor and ForceTorqueSensor) return 0's in kinematic
    simulation.

    To use get/setSetting, you will need to know the sensor attribute
    names and types as described in Klampt/Control/*Sensor.h (same as in
    the world or sensor XML file).

    C++ includes: robotsim.h 
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimRobotSensor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SimRobotSensor, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(SimRobotSensor self, Robot * robot, SensorBase * sensor) -> SimRobotSensor"""
        this = _robotsim.new_SimRobotSensor(*args)
        try: self.this.append(this)
        except: self.this = this
    def name(self):
        """
        name(SimRobotSensor self) -> std::string

        Returns the name of the sensor. 
        """
        return _robotsim.SimRobotSensor_name(self)

    def type(self):
        """
        type(SimRobotSensor self) -> std::string

        Returns the type of the sensor. 
        """
        return _robotsim.SimRobotSensor_type(self)

    def measurementNames(self):
        """
        measurementNames(SimRobotSensor self) -> stringVector

        Returns a list of names for the measurements (one per measurement). 
        """
        return _robotsim.SimRobotSensor_measurementNames(self)

    def getMeasurements(self):
        """
        getMeasurements(SimRobotSensor self)

        Returns a list of measurements from the previous simulation (or
        kinematicSimulate) timestep. 
        """
        return _robotsim.SimRobotSensor_getMeasurements(self)

    def getSetting(self, *args):
        """
        getSetting(SimRobotSensor self, std::string const & name) -> std::string

        Returns the value of the named setting (you will need to manually
        parse this) 
        """
        return _robotsim.SimRobotSensor_getSetting(self, *args)

    def setSetting(self, *args):
        """
        setSetting(SimRobotSensor self, std::string const & name, std::string const & val)

        Sets the value of the named setting (you will need to manually cast an
        int/float/etc to a str) 
        """
        return _robotsim.SimRobotSensor_setSetting(self, *args)

    def drawGL(self, *args):
        """
        drawGL(SimRobotSensor self)
        drawGL(SimRobotSensor self, doubleVector measurements)

        Draws a sensor indicator and its measurements using OpenGL. 
        """
        return _robotsim.SimRobotSensor_drawGL(self, *args)

    def kinematicSimulate(self, *args):
        """
        kinematicSimulate(SimRobotSensor self, WorldModel world, double dt)

        simulates / advances the kinematic simulation 
        """
        return _robotsim.SimRobotSensor_kinematicSimulate(self, *args)

    def kinematicReset(self):
        """
        kinematicReset(SimRobotSensor self)

        resets a kinematic simulation so that a new initial condition can be
        set 
        """
        return _robotsim.SimRobotSensor_kinematicReset(self)

    __swig_setmethods__["robot"] = _robotsim.SimRobotSensor_robot_set
    __swig_getmethods__["robot"] = _robotsim.SimRobotSensor_robot_get
    if _newclass:robot = _swig_property(_robotsim.SimRobotSensor_robot_get, _robotsim.SimRobotSensor_robot_set)
    __swig_setmethods__["sensor"] = _robotsim.SimRobotSensor_sensor_set
    __swig_getmethods__["sensor"] = _robotsim.SimRobotSensor_sensor_get
    if _newclass:sensor = _swig_property(_robotsim.SimRobotSensor_sensor_get, _robotsim.SimRobotSensor_sensor_set)
    __swig_destroy__ = _robotsim.delete_SimRobotSensor
    __del__ = lambda self : None;
SimRobotSensor_swigregister = _robotsim.SimRobotSensor_swigregister
SimRobotSensor_swigregister(SimRobotSensor)

class SimRobotController(_object):
    """
    A controller for a simulated robot.

    By default a SimRobotController has three possible modes: Motion queue
    + PID mode: the controller has an internal trajectory queue that may
    be added to and modified. This queue supports piecewise linear
    interpolation, cubic interpolation, and time-optimal move-to commands.

    PID mode: the user controls the motor's PID setpoints directly

    Torque control: the user controlls the motor torques directly.

    The "standard" way of using this is in move-to mode which accepts a
    milestone (setMilestone) or list of milestones (repeated calls to
    addMilestone) and interpolates dynamically from the current
    configuration/velocity. To handle disturbances, a PID loop is run
    automatically at the controller's specified rate.

    To get finer-grained control over the motion queue's timing, you may
    use the setLinear/setCubic/addLinear/addCubic functions. In these
    functions it is up to the user to respect velocity, acceleration, and
    torque limits.

    Whether in motion queue or PID mode, the constants of the PID loop are
    initially set in the robot file. You can programmatically tune these
    via the setPIDGains function.

    Arbitrary trajectories can be tracked by using setVelocity over short
    time steps. Force controllers can be implemented using setTorque,
    again using short time steps.

    If setVelocity, setTorque, or setPID command are called, the motion
    queue behavior will be completely overridden. To reset back to motion
    queue control, the function setManualMode(False) must be called.

    C++ includes: robotsim.h 
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimRobotController, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SimRobotController, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(SimRobotController self) -> SimRobotController"""
        this = _robotsim.new_SimRobotController()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _robotsim.delete_SimRobotController
    __del__ = lambda self : None;
    def model(self):
        """
        model(SimRobotController self) -> RobotModel

        Retrieves the robot model associated with this controller. 
        """
        return _robotsim.SimRobotController_model(self)

    def setRate(self, *args):
        """
        setRate(SimRobotController self, double dt)

        Sets the current feedback control rate. 
        """
        return _robotsim.SimRobotController_setRate(self, *args)

    def getRate(self):
        """
        getRate(SimRobotController self) -> double

        Gets the current feedback control rate. 
        """
        return _robotsim.SimRobotController_getRate(self)

    def getCommandedConfig(self):
        """
        getCommandedConfig(SimRobotController self)

        Returns the current commanded configuration. 
        """
        return _robotsim.SimRobotController_getCommandedConfig(self)

    def getCommandedVelocity(self):
        """
        getCommandedVelocity(SimRobotController self)

        Returns the current commanded velocity. 
        """
        return _robotsim.SimRobotController_getCommandedVelocity(self)

    def getSensedConfig(self):
        """
        getSensedConfig(SimRobotController self)

        Returns the current "sensed" configuration from the simulator. 
        """
        return _robotsim.SimRobotController_getSensedConfig(self)

    def getSensedVelocity(self):
        """
        getSensedVelocity(SimRobotController self)

        Returns the current "sensed" velocity from the simulator. 
        """
        return _robotsim.SimRobotController_getSensedVelocity(self)

    def sensor(self, *args):
        """
        sensor(SimRobotController self, int index) -> SimRobotSensor
        sensor(SimRobotController self, char const * name) -> SimRobotSensor

        Returns a sensor by name. If unavailable, a null sensor is returned.

        """
        return _robotsim.SimRobotController_sensor(self, *args)

    def commands(self):
        """
        commands(SimRobotController self) -> stringVector

        gets a command list 
        """
        return _robotsim.SimRobotController_commands(self)

    def sendCommand(self, *args):
        """
        sendCommand(SimRobotController self, std::string const & name, std::string const & args) -> bool

        sends a command to the controller 
        """
        return _robotsim.SimRobotController_sendCommand(self, *args)

    def getSetting(self, *args):
        """
        getSetting(SimRobotController self, std::string const & name) -> std::string

        gets a setting of the controller 
        """
        return _robotsim.SimRobotController_getSetting(self, *args)

    def setSetting(self, *args):
        """
        setSetting(SimRobotController self, std::string const & name, std::string const & val) -> bool

        sets a setting of the controller 
        """
        return _robotsim.SimRobotController_setSetting(self, *args)

    def setMilestone(self, *args):
        """
        setMilestone(SimRobotController self, doubleVector q)
        setMilestone(SimRobotController self, doubleVector q, doubleVector dq)

        Uses a dynamic interpolant to get from the current state to the
        desired milestone (with optional ending velocity). This interpolant is
        time-optimal with respect to the velocity and acceleration bounds. 
        """
        return _robotsim.SimRobotController_setMilestone(self, *args)

    def addMilestone(self, *args):
        """
        addMilestone(SimRobotController self, doubleVector q)
        addMilestone(SimRobotController self, doubleVector q, doubleVector dq)

        Same as setMilestone, but appends an interpolant onto an internal
        motion queue starting at the current queued end state. 
        """
        return _robotsim.SimRobotController_addMilestone(self, *args)

    def addMilestoneLinear(self, *args):
        """
        addMilestoneLinear(SimRobotController self, doubleVector q)

        Same as addMilestone, but enforces that the motion should move along a
        straight-line joint-space path. 
        """
        return _robotsim.SimRobotController_addMilestoneLinear(self, *args)

    def setLinear(self, *args):
        """
        setLinear(SimRobotController self, doubleVector q, double dt)

        Uses linear interpolation to get from the current configuration to the
        desired configuration after time dt. 
        """
        return _robotsim.SimRobotController_setLinear(self, *args)

    def setCubic(self, *args):
        """
        setCubic(SimRobotController self, doubleVector q, doubleVector v, double dt)

        Uses cubic (Hermite) interpolation to get from the current
        configuration/velocity to the desired configuration/velocity after
        time dt. 
        """
        return _robotsim.SimRobotController_setCubic(self, *args)

    def addLinear(self, *args):
        """
        addLinear(SimRobotController self, doubleVector q, double dt)

        Same as setLinear but appends an interpolant onto the motion queue. 
        """
        return _robotsim.SimRobotController_addLinear(self, *args)

    def addCubic(self, *args):
        """
        addCubic(SimRobotController self, doubleVector q, doubleVector v, double dt)

        Same as setCubic but appends an interpolant onto the motion queue. 
        """
        return _robotsim.SimRobotController_addCubic(self, *args)

    def remainingTime(self):
        """
        remainingTime(SimRobotController self) -> double

        Returns the remaining duration of the motion queue. 
        """
        return _robotsim.SimRobotController_remainingTime(self)

    def setVelocity(self, *args):
        """
        setVelocity(SimRobotController self, doubleVector dq, double dt)

        Sets a rate controller from the current commanded config to move at
        rate dq for time dt. 
        """
        return _robotsim.SimRobotController_setVelocity(self, *args)

    def setTorque(self, *args):
        """
        setTorque(SimRobotController self, doubleVector t)

        Sets a torque command controller. 
        """
        return _robotsim.SimRobotController_setTorque(self, *args)

    def setPIDCommand(self, *args):
        """
        setPIDCommand(SimRobotController self, doubleVector qdes, doubleVector dqdes)
        setPIDCommand(SimRobotController self, doubleVector qdes, doubleVector dqdes, doubleVector tfeedforward)

        Sets a PID command controller. If tfeedforward is used, it is the
        feedforward torque vector. 
        """
        return _robotsim.SimRobotController_setPIDCommand(self, *args)

    def setManualMode(self, *args):
        """
        setManualMode(SimRobotController self, bool enabled)

        Turns on/off manual mode, if either the setTorque or setPID command
        were previously set. 
        """
        return _robotsim.SimRobotController_setManualMode(self, *args)

    def getControlType(self):
        """
        getControlType(SimRobotController self) -> std::string

        Returns the control type for the active controller.

        Valid values are: unknown

        off

        torque

        PID

        locked_velocity 
        """
        return _robotsim.SimRobotController_getControlType(self)

    def setPIDGains(self, *args):
        """
        setPIDGains(SimRobotController self, doubleVector kP, doubleVector kI, doubleVector kD)

        Sets the PID gains. 
        """
        return _robotsim.SimRobotController_setPIDGains(self, *args)

    def getPIDGains(self):
        """
        getPIDGains(SimRobotController self)

        Gets the PID gains for the PID controller. 
        """
        return _robotsim.SimRobotController_getPIDGains(self)

    __swig_setmethods__["index"] = _robotsim.SimRobotController_index_set
    __swig_getmethods__["index"] = _robotsim.SimRobotController_index_get
    if _newclass:index = _swig_property(_robotsim.SimRobotController_index_get, _robotsim.SimRobotController_index_set)
    __swig_setmethods__["sim"] = _robotsim.SimRobotController_sim_set
    __swig_getmethods__["sim"] = _robotsim.SimRobotController_sim_get
    if _newclass:sim = _swig_property(_robotsim.SimRobotController_sim_get, _robotsim.SimRobotController_sim_set)
    __swig_setmethods__["controller"] = _robotsim.SimRobotController_controller_set
    __swig_getmethods__["controller"] = _robotsim.SimRobotController_controller_get
    if _newclass:controller = _swig_property(_robotsim.SimRobotController_controller_get, _robotsim.SimRobotController_controller_set)
SimRobotController_swigregister = _robotsim.SimRobotController_swigregister
SimRobotController_swigregister(SimRobotController)

class SimBody(_object):
    """
    A reference to a rigid body inside a Simulator (either a
    RigidObjectModel, TerrainModel, or a link of a RobotModel).

    Can use this class to directly apply forces to or control positions /
    velocities of objects in the simulation. However, note that the
    changes are only applied in the current simulation substep, not the
    duration provided to Simulation.simulate(). If you need fine-grained
    control, make sure to call simulate() with time steps equal to the
    value provided to Simulation.setSimStep() (this is 0.001s by default).

    Important: the transform of the object is centered at the object's
    center of mass rather than the reference frame given in the
    RobotModelLink or RigidObjectModel.

    C++ includes: robotsim.h 
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimBody, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SimBody, name)
    __repr__ = _swig_repr
    def getID(self):
        """
        getID(SimBody self) -> int

        Returns the object ID that this body associated with. 
        """
        return _robotsim.SimBody_getID(self)

    def enable(self, enabled=True):
        """
        enable(SimBody self, bool enabled=True)
        enable(SimBody self)

        Sets the simulation of this body on/off. 
        """
        return _robotsim.SimBody_enable(self, enabled)

    def isEnabled(self):
        """
        isEnabled(SimBody self) -> bool

        Returns true if this body is being simulated. 
        """
        return _robotsim.SimBody_isEnabled(self)

    def enableDynamics(self, enabled=True):
        """
        enableDynamics(SimBody self, bool enabled=True)
        enableDynamics(SimBody self)

        Sets the dynamic simulation of the body on/off. If false, velocities
        will simply be integrated forward, and forces will not affect velocity
        i.e., it will be pure kinematic simulation. 
        """
        return _robotsim.SimBody_enableDynamics(self, enabled)

    def isDynamicsEnabled(self):
        """isDynamicsEnabled(SimBody self) -> bool"""
        return _robotsim.SimBody_isDynamicsEnabled(self)

    def applyWrench(self, *args):
        """
        applyWrench(SimBody self, double const [3] f, double const [3] t)

        Applies a force and torque about the COM over the duration of the next
        Simulator.simulate(t) call. 
        """
        return _robotsim.SimBody_applyWrench(self, *args)

    def applyForceAtPoint(self, *args):
        """
        applyForceAtPoint(SimBody self, double const [3] f, double const [3] pworld)

        Applies a force at a given point (in world coordinates) over the
        duration of the next Simulator.simulate(t) call. 
        """
        return _robotsim.SimBody_applyForceAtPoint(self, *args)

    def applyForceAtLocalPoint(self, *args):
        """
        applyForceAtLocalPoint(SimBody self, double const [3] f, double const [3] plocal)

        Applies a force at a given point (in local center-of-mass-centered
        coordinates) over the duration of the next Simulator.simulate(t) call.

        """
        return _robotsim.SimBody_applyForceAtLocalPoint(self, *args)

    def setTransform(self, *args):
        """
        setTransform(SimBody self, double const [9] R, double const [3] t)

        Sets the body's transformation at the current simulation time step (in
        center-of-mass centered coordinates). 
        """
        return _robotsim.SimBody_setTransform(self, *args)

    def getTransform(self):
        """
        getTransform(SimBody self)

        Gets the body's transformation at the current simulation time step (in
        center-of-mass centered coordinates). 
        """
        return _robotsim.SimBody_getTransform(self)

    def setObjectTransform(self, *args):
        """
        setObjectTransform(SimBody self, double const [9] R, double const [3] t)

        Sets the body's transformation at the current simulation time step (in
        object-native coordinates) 
        """
        return _robotsim.SimBody_setObjectTransform(self, *args)

    def getObjectTransform(self):
        """
        getObjectTransform(SimBody self)

        Gets the body's transformation at the current simulation time step (in
        object-native coordinates). 
        """
        return _robotsim.SimBody_getObjectTransform(self)

    def setVelocity(self, *args):
        """
        setVelocity(SimBody self, double const [3] w, double const [3] v)

        Sets the angular velocity and translational velocity at the current
        simulation time step. 
        """
        return _robotsim.SimBody_setVelocity(self, *args)

    def getVelocity(self):
        """
        getVelocity(SimBody self)

        Returns the angular velocity and translational velocity. 
        """
        return _robotsim.SimBody_getVelocity(self)

    def setCollisionPadding(self, *args):
        """
        setCollisionPadding(SimBody self, double padding)

        Sets the collision padding (useful for thin objects). Default is
        0.0025. 
        """
        return _robotsim.SimBody_setCollisionPadding(self, *args)

    def getCollisionPadding(self):
        """getCollisionPadding(SimBody self) -> double"""
        return _robotsim.SimBody_getCollisionPadding(self)

    def setCollisionPreshrink(self, shrinkVisualization=False):
        """
        setCollisionPreshrink(SimBody self, bool shrinkVisualization=False)
        setCollisionPreshrink(SimBody self)

        If set, preshrinks the geometry so that the padded geometry better
        matches the original mesh. If shrinkVisualization=true, the underlying
        mesh is also shrunk (helps debug) 
        """
        return _robotsim.SimBody_setCollisionPreshrink(self, shrinkVisualization)

    def getSurface(self):
        """
        getSurface(SimBody self) -> ContactParameters

        Gets (a copy of) the surface properties. 
        """
        return _robotsim.SimBody_getSurface(self)

    def setSurface(self, *args):
        """
        setSurface(SimBody self, ContactParameters params)

        Sets the surface properties. 
        """
        return _robotsim.SimBody_setSurface(self, *args)

    __swig_setmethods__["sim"] = _robotsim.SimBody_sim_set
    __swig_getmethods__["sim"] = _robotsim.SimBody_sim_get
    if _newclass:sim = _swig_property(_robotsim.SimBody_sim_get, _robotsim.SimBody_sim_set)
    __swig_setmethods__["objectID"] = _robotsim.SimBody_objectID_set
    __swig_getmethods__["objectID"] = _robotsim.SimBody_objectID_get
    if _newclass:objectID = _swig_property(_robotsim.SimBody_objectID_get, _robotsim.SimBody_objectID_set)
    __swig_setmethods__["geometry"] = _robotsim.SimBody_geometry_set
    __swig_getmethods__["geometry"] = _robotsim.SimBody_geometry_get
    if _newclass:geometry = _swig_property(_robotsim.SimBody_geometry_get, _robotsim.SimBody_geometry_set)
    __swig_setmethods__["body"] = _robotsim.SimBody_body_set
    __swig_getmethods__["body"] = _robotsim.SimBody_body_get
    if _newclass:body = _swig_property(_robotsim.SimBody_body_get, _robotsim.SimBody_body_set)
    def __init__(self): 
        """
        __init__(SimBody self) -> SimBody

        A reference to a rigid body inside a Simulator (either a
        RigidObjectModel, TerrainModel, or a link of a RobotModel).

        Can use this class to directly apply forces to or control positions /
        velocities of objects in the simulation. However, note that the
        changes are only applied in the current simulation substep, not the
        duration provided to Simulation.simulate(). If you need fine-grained
        control, make sure to call simulate() with time steps equal to the
        value provided to Simulation.setSimStep() (this is 0.001s by default).

        Important: the transform of the object is centered at the object's
        center of mass rather than the reference frame given in the
        RobotModelLink or RigidObjectModel.

        C++ includes: robotsim.h 
        """
        this = _robotsim.new_SimBody()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _robotsim.delete_SimBody
    __del__ = lambda self : None;
SimBody_swigregister = _robotsim.SimBody_swigregister
SimBody_swigregister(SimBody)

class Simulator(_object):
    """
    A dynamics simulator for a WorldModel.

    C++ includes: robotsim.h 
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Simulator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Simulator, name)
    __repr__ = _swig_repr
    STATUS_NORMAL = _robotsim.Simulator_STATUS_NORMAL
    STATUS_ADAPTIVE_TIME_STEPPING = _robotsim.Simulator_STATUS_ADAPTIVE_TIME_STEPPING
    STATUS_CONTACT_UNRELIABLE = _robotsim.Simulator_STATUS_CONTACT_UNRELIABLE
    STATUS_UNSTABLE = _robotsim.Simulator_STATUS_UNSTABLE
    STATUS_ERROR = _robotsim.Simulator_STATUS_ERROR
    def __init__(self, *args): 
        """
        __init__(Simulator self, WorldModel model) -> Simulator

        Constructs the simulator from a WorldModel. If the WorldModel was
        loaded from an XML file, then the simulation setup is loaded from it.

        """
        this = _robotsim.new_Simulator(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _robotsim.delete_Simulator
    __del__ = lambda self : None;
    def reset(self):
        """
        reset(Simulator self)

        Resets to the initial state (same as setState(initialState)) 
        """
        return _robotsim.Simulator_reset(self)

    def getStatus(self):
        """
        getStatus(Simulator self) -> int

        Returns an indicator code for the simulator status. The return result
        is one of the STATUS_X flags. (Technically, this returns the worst
        status over the last simulate() call) 
        """
        return _robotsim.Simulator_getStatus(self)

    def getStatusString(self, *args):
        """
        getStatusString(Simulator self, int s=-1) -> std::string
        getStatusString(Simulator self) -> std::string

        Returns a string indicating the simulator's status. If s is provided
        and >= 0, this function maps the indicator code s to a string. 
        """
        return _robotsim.Simulator_getStatusString(self, *args)

    def getState(self):
        """
        getState(Simulator self) -> std::string

        Returns a Base64 string representing the binary data for the current
        simulation state, including controller parameters, etc. 
        """
        return _robotsim.Simulator_getState(self)

    def setState(self, *args):
        """
        setState(Simulator self, std::string const & str)

        Sets the current simulation state from a Base64 string returned by a
        prior getState call. 
        """
        return _robotsim.Simulator_setState(self, *args)

    def simulate(self, *args):
        """
        simulate(Simulator self, double t)

        Advances the simulation by time t, and updates the world model from
        the simulation state. 
        """
        return _robotsim.Simulator_simulate(self, *args)

    def fakeSimulate(self, *args):
        """
        fakeSimulate(Simulator self, double t)

        Advances a faked simulation by time t, and updates the world model
        from the faked simulation state. 
        """
        return _robotsim.Simulator_fakeSimulate(self, *args)

    def getTime(self):
        """
        getTime(Simulator self) -> double

        Returns the simulation time. 
        """
        return _robotsim.Simulator_getTime(self)

    def updateWorld(self):
        """
        updateWorld(Simulator self)

        Updates the world model from the current simulation state. This only
        needs to be called if you change the world model and want to revert
        back to the simulation state. 
        """
        return _robotsim.Simulator_updateWorld(self)

    def getActualConfig(self, *args):
        """
        getActualConfig(Simulator self, int robot)

        Returns the current actual configuration of the robot from the
        simulator. 
        """
        return _robotsim.Simulator_getActualConfig(self, *args)

    def getActualVelocity(self, *args):
        """
        getActualVelocity(Simulator self, int robot)

        Returns the current actual velocity of the robot from the simulator.

        """
        return _robotsim.Simulator_getActualVelocity(self, *args)

    def getActualTorques(self, *args):
        """
        getActualTorques(Simulator self, int robot)

        Returns the current actual torques on the robot's drivers from the
        simulator. 
        """
        return _robotsim.Simulator_getActualTorques(self, *args)

    def enableContactFeedback(self, *args):
        """
        enableContactFeedback(Simulator self, int obj1, int obj2)

        Call this to enable contact feedback between the two objects
        (arguments are indexes returned by object.getID()). Contact feedback
        has a small overhead so you may want to do this selectively. This must
        be called before using inContact, getContacts, getContactForces,
        contactForce, contactTorque, hadContact, hadSeparation,
        hadPenetration, and meanContactForce. 
        """
        return _robotsim.Simulator_enableContactFeedback(self, *args)

    def enableContactFeedbackAll(self):
        """
        enableContactFeedbackAll(Simulator self)

        Call this to enable contact feedback between all pairs of objects.
        Contact feedback has a small overhead so you may want to do this
        selectively. 
        """
        return _robotsim.Simulator_enableContactFeedbackAll(self)

    def inContact(self, *args):
        """
        inContact(Simulator self, int aid, int bid) -> bool

        Returns true if the objects (indexes returned by object.getID()) are
        in contact on the current time step. You can set bid=-1 to tell if
        object a is in contact with any object. 
        """
        return _robotsim.Simulator_inContact(self, *args)

    def getContacts(self, *args):
        """
        getContacts(Simulator self, int aid, int bid)

        Returns the list of contacts (x,n,kFriction) at the last time step.
        Normals point into object a. The contact point (x,n,kFriction) is
        represented as a 7-element vector. 
        """
        return _robotsim.Simulator_getContacts(self, *args)

    def getContactForces(self, *args):
        """
        getContactForces(Simulator self, int aid, int bid)

        Returns the list of contact forces on object a at the last time step.

        """
        return _robotsim.Simulator_getContactForces(self, *args)

    def contactForce(self, *args):
        """
        contactForce(Simulator self, int aid, int bid)

        Returns the contact force on object a at the last time step. You can
        set bid to -1 to get the overall contact force on object a. 
        """
        return _robotsim.Simulator_contactForce(self, *args)

    def contactTorque(self, *args):
        """
        contactTorque(Simulator self, int aid, int bid)

        Returns the contact force on object a (about a's origin) at the last
        time step. You can set bid to -1 to get the overall contact force on
        object a. 
        """
        return _robotsim.Simulator_contactTorque(self, *args)

    def hadContact(self, *args):
        """
        hadContact(Simulator self, int aid, int bid) -> bool

        Returns true if the objects had contact over the last simulate() call.
        You can set bid to -1 to determine if object a had contact with any
        other object. 
        """
        return _robotsim.Simulator_hadContact(self, *args)

    def hadSeparation(self, *args):
        """
        hadSeparation(Simulator self, int aid, int bid) -> bool

        Returns true if the objects had ever separated during the last
        simulate() call. You can set bid to -1 to determine if object a had no
        contact with any other object. 
        """
        return _robotsim.Simulator_hadSeparation(self, *args)

    def hadPenetration(self, *args):
        """
        hadPenetration(Simulator self, int aid, int bid) -> bool

        Returns true if the objects interpenetrated during the last simulate()
        call. If so, the simulation may lead to very inaccurate results or
        artifacts. You can set bid to -1 to determine if object a penetrated
        any object, or you can set aid=bid=-1 to determine whether any object
        is penetrating any other (indicating that the simulation will not be
        functioning properly in general). 
        """
        return _robotsim.Simulator_hadPenetration(self, *args)

    def meanContactForce(self, *args):
        """
        meanContactForce(Simulator self, int aid, int bid)

        Returns the average contact force on object a over the last simulate()
        call. 
        """
        return _robotsim.Simulator_meanContactForce(self, *args)

    def controller(self, *args):
        """
        controller(Simulator self, int robot) -> SimRobotController
        controller(Simulator self, RobotModel robot) -> SimRobotController
        """
        return _robotsim.Simulator_controller(self, *args)

    def body(self, *args):
        """
        body(Simulator self, RobotModelLink link) -> SimBody
        body(Simulator self, RigidObjectModel object) -> SimBody
        body(Simulator self, TerrainModel terrain) -> SimBody

        Returns the SimBody corresponding to the given terrain. 
        """
        return _robotsim.Simulator_body(self, *args)

    def getJointForces(self, *args):
        """
        getJointForces(Simulator self, RobotModelLink link)

        Returns the joint force and torque local to the link, as would be read
        by a force-torque sensor mounted at the given link's origin. The 6
        entries are (fx,fy,fz,mx,my,mz) 
        """
        return _robotsim.Simulator_getJointForces(self, *args)

    def setGravity(self, *args):
        """
        setGravity(Simulator self, double const [3] g)

        Sets the overall gravity vector. 
        """
        return _robotsim.Simulator_setGravity(self, *args)

    def setSimStep(self, *args):
        """
        setSimStep(Simulator self, double dt)

        Sets the internal simulation substep. Values < 0.01 are recommended.

        """
        return _robotsim.Simulator_setSimStep(self, *args)

    def getSetting(self, *args):
        """
        getSetting(Simulator self, std::string const & name) -> std::string

        Retrieves some simulation setting. Valid names are gravity, simStep,
        boundaryLayerCollisions, rigidObjectCollisions, robotSelfCollisions,
        robotRobotCollisions, adaptiveTimeStepping, minimumAdaptiveTimeStep,
        maxContacts, clusterNormalScale, errorReductionParameter,
        dampedLeastSquaresParameter, instabilityConstantEnergyThreshold,
        instabilityLinearEnergyThreshold, instabilityMaxEnergyThreshold, and
        instabilityPostCorrectionEnergy. See Klampt/Simulation/ODESimulator.h
        for detailed descriptions of these parameters.

        Retreives some simulation setting. Valid names are gravity, simStep,
        boundaryLayerCollisions, rigidObjectCollisions, robotSelfCollisions,
        robotRobotCollisions, adaptiveTimeStepping, maxContacts,
        clusterNormalScale, errorReductionParameter, and
        dampedLeastSquaresParameter. 
        """
        return _robotsim.Simulator_getSetting(self, *args)

    def setSetting(self, *args):
        """
        setSetting(Simulator self, std::string const & name, std::string const & value)

        Sets some simulation setting. Raises an exception if the name is
        unknown or the value is of improper format. 
        """
        return _robotsim.Simulator_setSetting(self, *args)

    __swig_setmethods__["index"] = _robotsim.Simulator_index_set
    __swig_getmethods__["index"] = _robotsim.Simulator_index_get
    if _newclass:index = _swig_property(_robotsim.Simulator_index_get, _robotsim.Simulator_index_set)
    __swig_setmethods__["world"] = _robotsim.Simulator_world_set
    __swig_getmethods__["world"] = _robotsim.Simulator_world_get
    if _newclass:world = _swig_property(_robotsim.Simulator_world_get, _robotsim.Simulator_world_set)
    __swig_setmethods__["sim"] = _robotsim.Simulator_sim_set
    __swig_getmethods__["sim"] = _robotsim.Simulator_sim_get
    if _newclass:sim = _swig_property(_robotsim.Simulator_sim_get, _robotsim.Simulator_sim_set)
    __swig_setmethods__["initialState"] = _robotsim.Simulator_initialState_set
    __swig_getmethods__["initialState"] = _robotsim.Simulator_initialState_get
    if _newclass:initialState = _swig_property(_robotsim.Simulator_initialState_get, _robotsim.Simulator_initialState_set)
Simulator_swigregister = _robotsim.Simulator_swigregister
Simulator_swigregister(Simulator)


def setRandomSeed(*args):
  """
    setRandomSeed(int seed)

    Sets the random seed used by the configuration sampler. 
    """
  return _robotsim.setRandomSeed(*args)

def destroy():
  """
    destroy()

    destroys internal data structures

    destroys internal data structures 
    """
  return _robotsim.destroy()

def SubscribeToStream(*args):
  """
    SubscribeToStream(Geometry3D g, char const * protocol, char const * name, char const * type="") -> bool
    SubscribeToStream(Geometry3D g, char const * protocol, char const * name) -> bool
    """
  return _robotsim.SubscribeToStream(*args)

def DetachFromStream(*args):
  """DetachFromStream(char const * protocol, char const * name) -> bool"""
  return _robotsim.DetachFromStream(*args)

def ProcessStreams(protocol="all"):
  """
    ProcessStreams(char const * protocol="all") -> bool
    ProcessStreams() -> bool
    """
  return _robotsim.ProcessStreams(protocol)

def WaitForStream(*args):
  """WaitForStream(char const * protocol, char const * name, double timeout) -> bool"""
  return _robotsim.WaitForStream(*args)

def ThreeJSGetScene(*args):
  """
    ThreeJSGetScene(WorldModel arg1) -> std::string

    Exports the WorldModel to a JSON string ready for use in Three.js. 
    """
  return _robotsim.ThreeJSGetScene(*args)

def ThreeJSGetTransforms(*args):
  """
    ThreeJSGetTransforms(WorldModel arg1) -> std::string

    Exports the WorldModel to a JSON string ready for use in Three.js. 
    """
  return _robotsim.ThreeJSGetTransforms(*args)

def setFrictionConeApproximationEdges(*args):
  """setFrictionConeApproximationEdges(int numEdges)"""
  return _robotsim.setFrictionConeApproximationEdges(*args)

def forceClosure(*args):
  """
    forceClosure(doubleMatrix contacts) -> bool
    forceClosure(doubleMatrix contactPositions, doubleMatrix frictionCones) -> bool
    """
  return _robotsim.forceClosure(*args)

def forceClosure2D(*args):
  """
    forceClosure2D(doubleMatrix contacts) -> bool
    forceClosure2D(doubleMatrix contactPositions, doubleMatrix frictionCones) -> bool
    """
  return _robotsim.forceClosure2D(*args)

def comEquilibrium(*args):
  """
    comEquilibrium(doubleMatrix contacts, doubleVector fext, PyObject * com) -> PyObject
    comEquilibrium(doubleMatrix contactPositions, doubleMatrix frictionCones, doubleVector fext, PyObject * com) -> PyObject *
    """
  return _robotsim.comEquilibrium(*args)

def comEquilibrium2D(*args):
  """
    comEquilibrium2D(doubleMatrix contacts, doubleVector fext, PyObject * com) -> PyObject
    comEquilibrium2D(doubleMatrix contactPositions, doubleMatrix frictionCones, doubleVector fext, PyObject * com) -> PyObject *
    """
  return _robotsim.comEquilibrium2D(*args)

def supportPolygon(*args):
  """
    supportPolygon(doubleMatrix contacts) -> PyObject
    supportPolygon(doubleMatrix contactPositions, doubleMatrix frictionCones) -> PyObject *

    A fancy version of the normal supportPolygon test. contactPositions is
    a list of 3-lists giving the contact point positions. The i'th element
    in the list frictionCones has length (k*4), and gives the contact
    force constraints (ax,ay,az,b) where ax*fx+ay*fy+az*fz <= b limits the
    contact force (fx,fy,fz) at the i'th contact. Each of the k 4-tuples
    is laid out sequentially per-contact.

    The return value is a list of 3-tuples giving the sorted plane
    boundaries of the polygon. The format of a plane is (nx,ny,ofs) where
    (nx,ny) are the outward facing normals, and ofs is the offset from 0.
    In other words to test stability of a com [x,y], you can test whether
    dot([nx,ny],[x,y]) <= ofs for all planes. 
    """
  return _robotsim.supportPolygon(*args)

def supportPolygon2D(*args):
  """
    supportPolygon2D(doubleMatrix contacts) -> PyObject
    supportPolygon2D(doubleMatrix contacts, doubleMatrix frictionCones) -> PyObject *
    """
  return _robotsim.supportPolygon2D(*args)

def equilibriumTorques(*args):
  """
    equilibriumTorques(RobotModel robot, doubleMatrix contacts, intVector links, doubleVector fext, double norm=0) -> PyObject
    equilibriumTorques(RobotModel robot, doubleMatrix contacts, intVector links, doubleVector fext) -> PyObject
    equilibriumTorques(RobotModel robot, doubleMatrix contacts, intVector links, doubleVector fext, doubleVector internalTorques, 
        double norm=0) -> PyObject
    equilibriumTorques(RobotModel robot, doubleMatrix contacts, intVector links, doubleVector fext, doubleVector internalTorques) -> PyObject *
    """
  return _robotsim.equilibriumTorques(*args)
# This file is compatible with both classic and new-style classes.


