# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.9
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


"""
Loading, modeling, and simulating RobotSim files
"""


from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_robotsim', [dirname(__file__)])
        except ImportError:
            import _robotsim
            return _robotsim
        if fp is not None:
            try:
                _mod = imp.load_module('_robotsim', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _robotsim = swig_import_helper()
    del swig_import_helper
else:
    import _robotsim
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _robotsim.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _robotsim.SwigPyIterator_value(self)
    def incr(self, n=1): return _robotsim.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _robotsim.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _robotsim.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _robotsim.SwigPyIterator_equal(self, *args)
    def copy(self): return _robotsim.SwigPyIterator_copy(self)
    def next(self): return _robotsim.SwigPyIterator_next(self)
    def __next__(self): return _robotsim.SwigPyIterator___next__(self)
    def previous(self): return _robotsim.SwigPyIterator_previous(self)
    def advance(self, *args): return _robotsim.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _robotsim.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _robotsim.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _robotsim.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _robotsim.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _robotsim.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _robotsim.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _robotsim.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class doubleArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, doubleArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, doubleArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _robotsim.new_doubleArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _robotsim.delete_doubleArray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _robotsim.doubleArray___getitem__(self, *args)
    def __setitem__(self, *args): return _robotsim.doubleArray___setitem__(self, *args)
    def cast(self): return _robotsim.doubleArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _robotsim.doubleArray_frompointer
    if _newclass:frompointer = staticmethod(_robotsim.doubleArray_frompointer)
doubleArray_swigregister = _robotsim.doubleArray_swigregister
doubleArray_swigregister(doubleArray)

def doubleArray_frompointer(*args):
  return _robotsim.doubleArray_frompointer(*args)
doubleArray_frompointer = _robotsim.doubleArray_frompointer

class intArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _robotsim.new_intArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _robotsim.delete_intArray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _robotsim.intArray___getitem__(self, *args)
    def __setitem__(self, *args): return _robotsim.intArray___setitem__(self, *args)
    def cast(self): return _robotsim.intArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _robotsim.intArray_frompointer
    if _newclass:frompointer = staticmethod(_robotsim.intArray_frompointer)
intArray_swigregister = _robotsim.intArray_swigregister
intArray_swigregister(intArray)

def intArray_frompointer(*args):
  return _robotsim.intArray_frompointer(*args)
intArray_frompointer = _robotsim.intArray_frompointer

class intVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _robotsim.intVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _robotsim.intVector___nonzero__(self)
    def __bool__(self): return _robotsim.intVector___bool__(self)
    def __len__(self): return _robotsim.intVector___len__(self)
    def pop(self): return _robotsim.intVector_pop(self)
    def __getslice__(self, *args): return _robotsim.intVector___getslice__(self, *args)
    def __setslice__(self, *args): return _robotsim.intVector___setslice__(self, *args)
    def __delslice__(self, *args): return _robotsim.intVector___delslice__(self, *args)
    def __delitem__(self, *args): return _robotsim.intVector___delitem__(self, *args)
    def __getitem__(self, *args): return _robotsim.intVector___getitem__(self, *args)
    def __setitem__(self, *args): return _robotsim.intVector___setitem__(self, *args)
    def append(self, *args): return _robotsim.intVector_append(self, *args)
    def empty(self): return _robotsim.intVector_empty(self)
    def size(self): return _robotsim.intVector_size(self)
    def clear(self): return _robotsim.intVector_clear(self)
    def swap(self, *args): return _robotsim.intVector_swap(self, *args)
    def get_allocator(self): return _robotsim.intVector_get_allocator(self)
    def begin(self): return _robotsim.intVector_begin(self)
    def end(self): return _robotsim.intVector_end(self)
    def rbegin(self): return _robotsim.intVector_rbegin(self)
    def rend(self): return _robotsim.intVector_rend(self)
    def pop_back(self): return _robotsim.intVector_pop_back(self)
    def erase(self, *args): return _robotsim.intVector_erase(self, *args)
    def __init__(self, *args): 
        this = _robotsim.new_intVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _robotsim.intVector_push_back(self, *args)
    def front(self): return _robotsim.intVector_front(self)
    def back(self): return _robotsim.intVector_back(self)
    def assign(self, *args): return _robotsim.intVector_assign(self, *args)
    def resize(self, *args): return _robotsim.intVector_resize(self, *args)
    def insert(self, *args): return _robotsim.intVector_insert(self, *args)
    def reserve(self, *args): return _robotsim.intVector_reserve(self, *args)
    def capacity(self): return _robotsim.intVector_capacity(self)
    __swig_destroy__ = _robotsim.delete_intVector
    __del__ = lambda self : None;
intVector_swigregister = _robotsim.intVector_swigregister
intVector_swigregister(intVector)

class doubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, doubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, doubleVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _robotsim.doubleVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _robotsim.doubleVector___nonzero__(self)
    def __bool__(self): return _robotsim.doubleVector___bool__(self)
    def __len__(self): return _robotsim.doubleVector___len__(self)
    def pop(self): return _robotsim.doubleVector_pop(self)
    def __getslice__(self, *args): return _robotsim.doubleVector___getslice__(self, *args)
    def __setslice__(self, *args): return _robotsim.doubleVector___setslice__(self, *args)
    def __delslice__(self, *args): return _robotsim.doubleVector___delslice__(self, *args)
    def __delitem__(self, *args): return _robotsim.doubleVector___delitem__(self, *args)
    def __getitem__(self, *args): return _robotsim.doubleVector___getitem__(self, *args)
    def __setitem__(self, *args): return _robotsim.doubleVector___setitem__(self, *args)
    def append(self, *args): return _robotsim.doubleVector_append(self, *args)
    def empty(self): return _robotsim.doubleVector_empty(self)
    def size(self): return _robotsim.doubleVector_size(self)
    def clear(self): return _robotsim.doubleVector_clear(self)
    def swap(self, *args): return _robotsim.doubleVector_swap(self, *args)
    def get_allocator(self): return _robotsim.doubleVector_get_allocator(self)
    def begin(self): return _robotsim.doubleVector_begin(self)
    def end(self): return _robotsim.doubleVector_end(self)
    def rbegin(self): return _robotsim.doubleVector_rbegin(self)
    def rend(self): return _robotsim.doubleVector_rend(self)
    def pop_back(self): return _robotsim.doubleVector_pop_back(self)
    def erase(self, *args): return _robotsim.doubleVector_erase(self, *args)
    def __init__(self, *args): 
        this = _robotsim.new_doubleVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _robotsim.doubleVector_push_back(self, *args)
    def front(self): return _robotsim.doubleVector_front(self)
    def back(self): return _robotsim.doubleVector_back(self)
    def assign(self, *args): return _robotsim.doubleVector_assign(self, *args)
    def resize(self, *args): return _robotsim.doubleVector_resize(self, *args)
    def insert(self, *args): return _robotsim.doubleVector_insert(self, *args)
    def reserve(self, *args): return _robotsim.doubleVector_reserve(self, *args)
    def capacity(self): return _robotsim.doubleVector_capacity(self)
    __swig_destroy__ = _robotsim.delete_doubleVector
    __del__ = lambda self : None;
doubleVector_swigregister = _robotsim.doubleVector_swigregister
doubleVector_swigregister(doubleVector)

class doubleMatrix(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, doubleMatrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, doubleMatrix, name)
    __repr__ = _swig_repr
    def iterator(self): return _robotsim.doubleMatrix_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _robotsim.doubleMatrix___nonzero__(self)
    def __bool__(self): return _robotsim.doubleMatrix___bool__(self)
    def __len__(self): return _robotsim.doubleMatrix___len__(self)
    def pop(self): return _robotsim.doubleMatrix_pop(self)
    def __getslice__(self, *args): return _robotsim.doubleMatrix___getslice__(self, *args)
    def __setslice__(self, *args): return _robotsim.doubleMatrix___setslice__(self, *args)
    def __delslice__(self, *args): return _robotsim.doubleMatrix___delslice__(self, *args)
    def __delitem__(self, *args): return _robotsim.doubleMatrix___delitem__(self, *args)
    def __getitem__(self, *args): return _robotsim.doubleMatrix___getitem__(self, *args)
    def __setitem__(self, *args): return _robotsim.doubleMatrix___setitem__(self, *args)
    def append(self, *args): return _robotsim.doubleMatrix_append(self, *args)
    def empty(self): return _robotsim.doubleMatrix_empty(self)
    def size(self): return _robotsim.doubleMatrix_size(self)
    def clear(self): return _robotsim.doubleMatrix_clear(self)
    def swap(self, *args): return _robotsim.doubleMatrix_swap(self, *args)
    def get_allocator(self): return _robotsim.doubleMatrix_get_allocator(self)
    def begin(self): return _robotsim.doubleMatrix_begin(self)
    def end(self): return _robotsim.doubleMatrix_end(self)
    def rbegin(self): return _robotsim.doubleMatrix_rbegin(self)
    def rend(self): return _robotsim.doubleMatrix_rend(self)
    def pop_back(self): return _robotsim.doubleMatrix_pop_back(self)
    def erase(self, *args): return _robotsim.doubleMatrix_erase(self, *args)
    def __init__(self, *args): 
        this = _robotsim.new_doubleMatrix(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _robotsim.doubleMatrix_push_back(self, *args)
    def front(self): return _robotsim.doubleMatrix_front(self)
    def back(self): return _robotsim.doubleMatrix_back(self)
    def assign(self, *args): return _robotsim.doubleMatrix_assign(self, *args)
    def resize(self, *args): return _robotsim.doubleMatrix_resize(self, *args)
    def insert(self, *args): return _robotsim.doubleMatrix_insert(self, *args)
    def reserve(self, *args): return _robotsim.doubleMatrix_reserve(self, *args)
    def capacity(self): return _robotsim.doubleMatrix_capacity(self)
    __swig_destroy__ = _robotsim.delete_doubleMatrix
    __del__ = lambda self : None;
doubleMatrix_swigregister = _robotsim.doubleMatrix_swigregister
doubleMatrix_swigregister(doubleMatrix)

class Mass(_object):
    """
    Stores mass information for a rigid body.

    C++ includes: robotmodel.h 
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Mass, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Mass, name)
    __repr__ = _swig_repr
    def setMass(self, *args):
        """
        setMass(Mass self, double _mass)

        void Mass::setMass(double
        _mass) 
        """
        return _robotsim.Mass_setMass(self, *args)

    def getMass(self):
        """
        getMass(Mass self) -> double

        double Mass::getMass() const 
        """
        return _robotsim.Mass_getMass(self)

    def setCom(self, *args):
        """
        setCom(Mass self, doubleVector _com)

        void Mass::setCom(const
        std::vector< double > &_com) 
        """
        return _robotsim.Mass_setCom(self, *args)

    def getCom(self):
        """
        getCom(Mass self)

        void Mass::getCom(std::vector<
        double > &out) const 
        """
        return _robotsim.Mass_getCom(self)

    def setInertia(self, *args):
        """
        setInertia(Mass self, doubleVector _inertia)

        void Mass::setInertia(const
        std::vector< double > &_inertia) 
        """
        return _robotsim.Mass_setInertia(self, *args)

    def getInertia(self):
        """
        getInertia(Mass self)

        void
        Mass::getInertia(std::vector< double > &out) const 
        """
        return _robotsim.Mass_getInertia(self)

    __swig_setmethods__["mass"] = _robotsim.Mass_mass_set
    __swig_getmethods__["mass"] = _robotsim.Mass_mass_get
    if _newclass:mass = _swig_property(_robotsim.Mass_mass_get, _robotsim.Mass_mass_set)
    __swig_setmethods__["com"] = _robotsim.Mass_com_set
    __swig_getmethods__["com"] = _robotsim.Mass_com_get
    if _newclass:com = _swig_property(_robotsim.Mass_com_get, _robotsim.Mass_com_set)
    __swig_setmethods__["inertia"] = _robotsim.Mass_inertia_set
    __swig_getmethods__["inertia"] = _robotsim.Mass_inertia_get
    if _newclass:inertia = _swig_property(_robotsim.Mass_inertia_get, _robotsim.Mass_inertia_set)
    def __init__(self): 
        """
        __init__(Mass self) -> Mass

        Stores mass information for a rigid body.

        C++ includes: robotmodel.h 
        """
        this = _robotsim.new_Mass()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _robotsim.delete_Mass
    __del__ = lambda self : None;
Mass_swigregister = _robotsim.Mass_swigregister
Mass_swigregister(Mass)

class TriangleMesh(_object):
    """
    A 3D indexed triangle mesh class.

    vertices is a list of vertices, given as a list [x1, y1, z1, x2, y2,
    ...] indices is a list of triangle vertices given as indices into the
    vertices list, i.e., [a1,b1,c2, a2,b2,c2, ...]

    C++ includes: robotmodel.h 
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TriangleMesh, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TriangleMesh, name)
    __repr__ = _swig_repr
    def translate(self, *args):
        """
        translate(TriangleMesh self, double const [3] t)

        void
        TriangleMesh::translate(const double t[3]) 
        """
        return _robotsim.TriangleMesh_translate(self, *args)

    def transform(self, *args):
        """
        transform(TriangleMesh self, double const [9] R, double const [3] t)

        void
        TriangleMesh::transform(const double R[9], const double t[3]) 
        """
        return _robotsim.TriangleMesh_transform(self, *args)

    __swig_setmethods__["indices"] = _robotsim.TriangleMesh_indices_set
    __swig_getmethods__["indices"] = _robotsim.TriangleMesh_indices_get
    if _newclass:indices = _swig_property(_robotsim.TriangleMesh_indices_get, _robotsim.TriangleMesh_indices_set)
    __swig_setmethods__["vertices"] = _robotsim.TriangleMesh_vertices_set
    __swig_getmethods__["vertices"] = _robotsim.TriangleMesh_vertices_get
    if _newclass:vertices = _swig_property(_robotsim.TriangleMesh_vertices_get, _robotsim.TriangleMesh_vertices_set)
    def __init__(self): 
        """
        __init__(TriangleMesh self) -> TriangleMesh

        A 3D indexed triangle mesh class.

        vertices is a list of vertices, given as a list [x1, y1, z1, x2, y2,
        ...] indices is a list of triangle vertices given as indices into the
        vertices list, i.e., [a1,b1,c2, a2,b2,c2, ...]

        C++ includes: robotmodel.h 
        """
        this = _robotsim.new_TriangleMesh()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _robotsim.delete_TriangleMesh
    __del__ = lambda self : None;
TriangleMesh_swigregister = _robotsim.TriangleMesh_swigregister
TriangleMesh_swigregister(TriangleMesh)

class PointCloud(_object):
    """
    A 3D point cloud class. vertices is a list of vertices, given as a
    list [x1, y1, z1, x2, y2, ... zn] properties is a list of vertex
    properties, given as a list [p11, p21, ..., pk1, p12, p22, ..., pk2,
    ... , pn1, pn2, ..., pn2] where each vertex has k properties. The name
    of each property is given by the propertyNames member.

    C++ includes: robotmodel.h 
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PointCloud, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PointCloud, name)
    __repr__ = _swig_repr
    def translate(self, *args):
        """
        translate(PointCloud self, double const [3] t)

        void
        PointCloud::translate(const double t[3]) 
        """
        return _robotsim.PointCloud_translate(self, *args)

    def transform(self, *args):
        """
        transform(PointCloud self, double const [9] R, double const [3] t)

        void
        PointCloud::transform(const double R[9], const double t[3]) 
        """
        return _robotsim.PointCloud_transform(self, *args)

    __swig_setmethods__["vertices"] = _robotsim.PointCloud_vertices_set
    __swig_getmethods__["vertices"] = _robotsim.PointCloud_vertices_get
    if _newclass:vertices = _swig_property(_robotsim.PointCloud_vertices_get, _robotsim.PointCloud_vertices_set)
    __swig_setmethods__["propertyNames"] = _robotsim.PointCloud_propertyNames_set
    __swig_getmethods__["propertyNames"] = _robotsim.PointCloud_propertyNames_get
    if _newclass:propertyNames = _swig_property(_robotsim.PointCloud_propertyNames_get, _robotsim.PointCloud_propertyNames_set)
    __swig_setmethods__["properties"] = _robotsim.PointCloud_properties_set
    __swig_getmethods__["properties"] = _robotsim.PointCloud_properties_get
    if _newclass:properties = _swig_property(_robotsim.PointCloud_properties_get, _robotsim.PointCloud_properties_set)
    def __init__(self): 
        """
        __init__(PointCloud self) -> PointCloud

        A 3D point cloud class. vertices is a list of vertices, given as a
        list [x1, y1, z1, x2, y2, ... zn] properties is a list of vertex
        properties, given as a list [p11, p21, ..., pk1, p12, p22, ..., pk2,
        ... , pn1, pn2, ..., pn2] where each vertex has k properties. The name
        of each property is given by the propertyNames member.

        C++ includes: robotmodel.h 
        """
        this = _robotsim.new_PointCloud()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _robotsim.delete_PointCloud
    __del__ = lambda self : None;
PointCloud_swigregister = _robotsim.PointCloud_swigregister
PointCloud_swigregister(PointCloud)

class Geometry3D(_object):
    """
    A reference to a world item's three-D geometry.

    C++ includes: robotmodel.h 
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Geometry3D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Geometry3D, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """
        __init__(Geometry3D self) -> Geometry3D

        Geometry3D::Geometry3D() 
        """
        this = _robotsim.new_Geometry3D()
        try: self.this.append(this)
        except: self.this = this
    def type(self):
        """
        type(Geometry3D self) -> std::string

        string Geometry3D::type() 
        """
        return _robotsim.Geometry3D_type(self)

    def getTriangleMesh(self):
        """
        getTriangleMesh(Geometry3D self) -> TriangleMesh

        TriangleMesh
        Geometry3D::getTriangleMesh() 
        """
        return _robotsim.Geometry3D_getTriangleMesh(self)

    def getPointCloud(self):
        """
        getPointCloud(Geometry3D self) -> PointCloud

        PointCloud
        Geometry3D::getPointCloud() 
        """
        return _robotsim.Geometry3D_getPointCloud(self)

    def setTriangleMesh(self, *args):
        """
        setTriangleMesh(Geometry3D self, TriangleMesh arg2)

        void
        Geometry3D::setTriangleMesh(const TriangleMesh &) 
        """
        return _robotsim.Geometry3D_setTriangleMesh(self, *args)

    def setPointCloud(self, *args):
        """
        setPointCloud(Geometry3D self, PointCloud arg2)

        void
        Geometry3D::setPointCloud(const PointCloud &) 
        """
        return _robotsim.Geometry3D_setPointCloud(self, *args)

    def translate(self, *args):
        """
        translate(Geometry3D self, double const [3] t)

        void
        Geometry3D::translate(const double t[3]) 
        """
        return _robotsim.Geometry3D_translate(self, *args)

    def transform(self, *args):
        """
        transform(Geometry3D self, double const [9] R, double const [3] t)

        void
        Geometry3D::transform(const double R[9], const double t[3]) 
        """
        return _robotsim.Geometry3D_transform(self, *args)

    def setCollisionMargin(self, *args):
        """
        setCollisionMargin(Geometry3D self, double margin)

        void
        Geometry3D::setCollisionMargin(double margin) 
        """
        return _robotsim.Geometry3D_setCollisionMargin(self, *args)

    def getCollisionMargin(self):
        """
        getCollisionMargin(Geometry3D self) -> double

        double
        Geometry3D::getCollisionMargin() 
        """
        return _robotsim.Geometry3D_getCollisionMargin(self)

    __swig_setmethods__["world"] = _robotsim.Geometry3D_world_set
    __swig_getmethods__["world"] = _robotsim.Geometry3D_world_get
    if _newclass:world = _swig_property(_robotsim.Geometry3D_world_get, _robotsim.Geometry3D_world_set)
    __swig_setmethods__["id"] = _robotsim.Geometry3D_id_set
    __swig_getmethods__["id"] = _robotsim.Geometry3D_id_get
    if _newclass:id = _swig_property(_robotsim.Geometry3D_id_get, _robotsim.Geometry3D_id_set)
    __swig_destroy__ = _robotsim.delete_Geometry3D
    __del__ = lambda self : None;
Geometry3D_swigregister = _robotsim.Geometry3D_swigregister
Geometry3D_swigregister(Geometry3D)

class ContactParameters(_object):
    """Proxy of C++ ContactParameters class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ContactParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ContactParameters, name)
    __repr__ = _swig_repr
    __swig_setmethods__["kFriction"] = _robotsim.ContactParameters_kFriction_set
    __swig_getmethods__["kFriction"] = _robotsim.ContactParameters_kFriction_get
    if _newclass:kFriction = _swig_property(_robotsim.ContactParameters_kFriction_get, _robotsim.ContactParameters_kFriction_set)
    __swig_setmethods__["kRestitution"] = _robotsim.ContactParameters_kRestitution_set
    __swig_getmethods__["kRestitution"] = _robotsim.ContactParameters_kRestitution_get
    if _newclass:kRestitution = _swig_property(_robotsim.ContactParameters_kRestitution_get, _robotsim.ContactParameters_kRestitution_set)
    __swig_setmethods__["kStiffness"] = _robotsim.ContactParameters_kStiffness_set
    __swig_getmethods__["kStiffness"] = _robotsim.ContactParameters_kStiffness_get
    if _newclass:kStiffness = _swig_property(_robotsim.ContactParameters_kStiffness_get, _robotsim.ContactParameters_kStiffness_set)
    __swig_setmethods__["kDamping"] = _robotsim.ContactParameters_kDamping_set
    __swig_getmethods__["kDamping"] = _robotsim.ContactParameters_kDamping_get
    if _newclass:kDamping = _swig_property(_robotsim.ContactParameters_kDamping_get, _robotsim.ContactParameters_kDamping_set)
    def __init__(self): 
        """__init__(ContactParameters self) -> ContactParameters"""
        this = _robotsim.new_ContactParameters()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _robotsim.delete_ContactParameters
    __del__ = lambda self : None;
ContactParameters_swigregister = _robotsim.ContactParameters_swigregister
ContactParameters_swigregister(ContactParameters)

class RobotModelLink(_object):
    """
    A reference to a link of a RobotModel.

    Note that the mass is given local to the link frame, not about the
    COM.

    C++ includes: robotmodel.h 
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RobotModelLink, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RobotModelLink, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """
        __init__(RobotModelLink self) -> RobotModelLink

        RobotModelLink::RobotModelLink() 
        """
        this = _robotsim.new_RobotModelLink()
        try: self.this.append(this)
        except: self.this = this
    def getID(self):
        """
        getID(RobotModelLink self) -> int

        int
        RobotModelLink::getID() 
        """
        return _robotsim.RobotModelLink_getID(self)

    def getName(self):
        """
        getName(RobotModelLink self) -> char const *

        const char *
        RobotModelLink::getName() 
        """
        return _robotsim.RobotModelLink_getName(self)

    def getRobot(self):
        """
        getRobot(RobotModelLink self) -> RobotModel

        RobotModel
        RobotModelLink::getRobot() 
        """
        return _robotsim.RobotModelLink_getRobot(self)

    def getParent(self):
        """
        getParent(RobotModelLink self) -> int

        int
        RobotModelLink::getParent() 
        """
        return _robotsim.RobotModelLink_getParent(self)

    def setParent(self, *args):
        """
        setParent(RobotModelLink self, int p)

        void
        RobotModelLink::setParent(int p) 
        """
        return _robotsim.RobotModelLink_setParent(self, *args)

    def getGeometry(self):
        """
        getGeometry(RobotModelLink self) -> Geometry3D

        Geometry3D
        RobotModelLink::getGeometry() 
        """
        return _robotsim.RobotModelLink_getGeometry(self)

    def getMass(self):
        """
        getMass(RobotModelLink self) -> Mass

        Mass
        RobotModelLink::getMass() 
        """
        return _robotsim.RobotModelLink_getMass(self)

    def setMass(self, *args):
        """
        setMass(RobotModelLink self, Mass mass)

        void
        RobotModelLink::setMass(const Mass &mass) 
        """
        return _robotsim.RobotModelLink_setMass(self, *args)

    def getParentTransform(self):
        """
        getParentTransform(RobotModelLink self)

        void
        RobotModelLink::getParentTransform(double out[9], double out2[3])

        Gets transformation (R,t) to the parent link. 
        """
        return _robotsim.RobotModelLink_getParentTransform(self)

    def setParentTransform(self, *args):
        """
        setParentTransform(RobotModelLink self, double const [9] R, double const [3] t)

        void
        RobotModelLink::setParentTransform(const double R[9], const double
        t[3]) 
        """
        return _robotsim.RobotModelLink_setParentTransform(self, *args)

    def getAxis(self):
        """
        getAxis(RobotModelLink self)

        void
        RobotModelLink::getAxis(double out[3])

        Gets the local rotational axis. 
        """
        return _robotsim.RobotModelLink_getAxis(self)

    def setAxis(self, *args):
        """
        setAxis(RobotModelLink self, double const [3] axis)

        void
        RobotModelLink::setAxis(const double axis[3]) 
        """
        return _robotsim.RobotModelLink_setAxis(self, *args)

    def getWorldPosition(self, *args):
        """
        getWorldPosition(RobotModelLink self, double const [3] plocal)

        void
        RobotModelLink::getWorldPosition(const double plocal[3], double
        out[3])

        Converts point from local to world coordinates. 
        """
        return _robotsim.RobotModelLink_getWorldPosition(self, *args)

    def getWorldDirection(self, *args):
        """
        getWorldDirection(RobotModelLink self, double const [3] vlocal)

        void
        RobotModelLink::getWorldDirection(const double vlocal[3], double
        out[3])

        Converts direction from local to world coordinates. 
        """
        return _robotsim.RobotModelLink_getWorldDirection(self, *args)

    def getLocalPosition(self, *args):
        """
        getLocalPosition(RobotModelLink self, double const [3] pworld)

        void
        RobotModelLink::getLocalPosition(const double pworld[3], double
        out[3])

        Converts point from world to local coordinates. 
        """
        return _robotsim.RobotModelLink_getLocalPosition(self, *args)

    def getLocalDirection(self, *args):
        """
        getLocalDirection(RobotModelLink self, double const [3] vworld)

        void
        RobotModelLink::getLocalDirection(const double vworld[3], double
        out[3])

        Converts direction from world to local coordinates. 
        """
        return _robotsim.RobotModelLink_getLocalDirection(self, *args)

    def getTransform(self):
        """
        getTransform(RobotModelLink self)

        void
        RobotModelLink::getTransform(double out[9], double out2[3])

        Gets transformation (R,t) to the world frame. 
        """
        return _robotsim.RobotModelLink_getTransform(self)

    def setTransform(self, *args):
        """
        setTransform(RobotModelLink self, double const [9] R, double const [3] t)

        void
        RobotModelLink::setTransform(const double R[9], const double t[3])

        Sets transformation (R,t) to the world frame. Note: this does NOT
        perform inverse kinematics. The transform is overwritten when the
        robot's setConfig() method is called. 
        """
        return _robotsim.RobotModelLink_setTransform(self, *args)

    def getJacobian(self, *args):
        """
        getJacobian(RobotModelLink self, double const [3] p)

        void
        RobotModelLink::getJacobian(const double p[3], std::vector<
        std::vector< double > > &out)

        Returns the total jacobian of the local point p (row-major matrix)
        (orientation jacobian is stacked on position jacobian) 
        """
        return _robotsim.RobotModelLink_getJacobian(self, *args)

    def getPositionJacobian(self, *args):
        """
        getPositionJacobian(RobotModelLink self, double const [3] p)

        void
        RobotModelLink::getPositionJacobian(const double p[3], std::vector<
        std::vector< double > > &out)

        Returns the jacobian of the local point p (row-major matrix) 
        """
        return _robotsim.RobotModelLink_getPositionJacobian(self, *args)

    def getOrientationJacobian(self):
        """
        getOrientationJacobian(RobotModelLink self)

        void
        RobotModelLink::getOrientationJacobian(std::vector< std::vector<
        double > > &out)

        Returns the orientation jacobian of the link (row-major matrix) 
        """
        return _robotsim.RobotModelLink_getOrientationJacobian(self)

    def getVelocity(self):
        """
        getVelocity(RobotModelLink self)

        void
        RobotModelLink::getVelocity(double out[3])

        Returns the velocity of the origin given the robot's current velocity.

        """
        return _robotsim.RobotModelLink_getVelocity(self)

    def getAngularVelocity(self):
        """
        getAngularVelocity(RobotModelLink self)

        void
        RobotModelLink::getAngularVelocity(double out[3])

        Returns the angular velocity given the robot's current velocity. 
        """
        return _robotsim.RobotModelLink_getAngularVelocity(self)

    def getPointVelocity(self, *args):
        """
        getPointVelocity(RobotModelLink self, double const [3] plocal)

        void
        RobotModelLink::getPointVelocity(const double plocal[3], double
        out[3])

        Returns the world velocity of the point given the robot's current
        velocity. 
        """
        return _robotsim.RobotModelLink_getPointVelocity(self, *args)

    def drawLocalGL(self, keepAppearance=True):
        """
        drawLocalGL(RobotModelLink self, bool keepAppearance=True)
        drawLocalGL(RobotModelLink self)

        void
        RobotModelLink::drawLocalGL(bool keepAppearance=true) 
        """
        return _robotsim.RobotModelLink_drawLocalGL(self, keepAppearance)

    def drawWorldGL(self, keepAppearance=True):
        """
        drawWorldGL(RobotModelLink self, bool keepAppearance=True)
        drawWorldGL(RobotModelLink self)

        void
        RobotModelLink::drawWorldGL(bool keepAppearance=true) 
        """
        return _robotsim.RobotModelLink_drawWorldGL(self, keepAppearance)

    __swig_setmethods__["world"] = _robotsim.RobotModelLink_world_set
    __swig_getmethods__["world"] = _robotsim.RobotModelLink_world_get
    if _newclass:world = _swig_property(_robotsim.RobotModelLink_world_get, _robotsim.RobotModelLink_world_set)
    __swig_setmethods__["robotIndex"] = _robotsim.RobotModelLink_robotIndex_set
    __swig_getmethods__["robotIndex"] = _robotsim.RobotModelLink_robotIndex_get
    if _newclass:robotIndex = _swig_property(_robotsim.RobotModelLink_robotIndex_get, _robotsim.RobotModelLink_robotIndex_set)
    __swig_setmethods__["robot"] = _robotsim.RobotModelLink_robot_set
    __swig_getmethods__["robot"] = _robotsim.RobotModelLink_robot_get
    if _newclass:robot = _swig_property(_robotsim.RobotModelLink_robot_get, _robotsim.RobotModelLink_robot_set)
    __swig_setmethods__["index"] = _robotsim.RobotModelLink_index_set
    __swig_getmethods__["index"] = _robotsim.RobotModelLink_index_get
    if _newclass:index = _swig_property(_robotsim.RobotModelLink_index_get, _robotsim.RobotModelLink_index_set)
    __swig_destroy__ = _robotsim.delete_RobotModelLink
    __del__ = lambda self : None;
RobotModelLink_swigregister = _robotsim.RobotModelLink_swigregister
RobotModelLink_swigregister(RobotModelLink)

class RobotModelDriver(_object):
    """Proxy of C++ RobotModelDriver class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RobotModelDriver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RobotModelDriver, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(RobotModelDriver self) -> RobotModelDriver"""
        this = _robotsim.new_RobotModelDriver()
        try: self.this.append(this)
        except: self.this = this
    def getName(self):
        """getName(RobotModelDriver self) -> char const *"""
        return _robotsim.RobotModelDriver_getName(self)

    def getRobot(self):
        """getRobot(RobotModelDriver self) -> RobotModel"""
        return _robotsim.RobotModelDriver_getRobot(self)

    def getType(self):
        """getType(RobotModelDriver self) -> char const *"""
        return _robotsim.RobotModelDriver_getType(self)

    def getAffectedLink(self):
        """getAffectedLink(RobotModelDriver self) -> int"""
        return _robotsim.RobotModelDriver_getAffectedLink(self)

    def getAffectedLinks(self, *args):
        """getAffectedLinks(RobotModelDriver self, intVector links)"""
        return _robotsim.RobotModelDriver_getAffectedLinks(self, *args)

    def getAffineCoeffs(self, *args):
        """getAffineCoeffs(RobotModelDriver self, doubleVector scale, doubleVector offset)"""
        return _robotsim.RobotModelDriver_getAffineCoeffs(self, *args)

    def setValue(self, *args):
        """setValue(RobotModelDriver self, double val)"""
        return _robotsim.RobotModelDriver_setValue(self, *args)

    def getValue(self):
        """getValue(RobotModelDriver self) -> double"""
        return _robotsim.RobotModelDriver_getValue(self)

    def setVelocity(self, *args):
        """setVelocity(RobotModelDriver self, double val)"""
        return _robotsim.RobotModelDriver_setVelocity(self, *args)

    def getVelocity(self, *args):
        """getVelocity(RobotModelDriver self, double val) -> double"""
        return _robotsim.RobotModelDriver_getVelocity(self, *args)

    __swig_setmethods__["world"] = _robotsim.RobotModelDriver_world_set
    __swig_getmethods__["world"] = _robotsim.RobotModelDriver_world_get
    if _newclass:world = _swig_property(_robotsim.RobotModelDriver_world_get, _robotsim.RobotModelDriver_world_set)
    __swig_setmethods__["robotIndex"] = _robotsim.RobotModelDriver_robotIndex_set
    __swig_getmethods__["robotIndex"] = _robotsim.RobotModelDriver_robotIndex_get
    if _newclass:robotIndex = _swig_property(_robotsim.RobotModelDriver_robotIndex_get, _robotsim.RobotModelDriver_robotIndex_set)
    __swig_setmethods__["robot"] = _robotsim.RobotModelDriver_robot_set
    __swig_getmethods__["robot"] = _robotsim.RobotModelDriver_robot_get
    if _newclass:robot = _swig_property(_robotsim.RobotModelDriver_robot_get, _robotsim.RobotModelDriver_robot_set)
    __swig_setmethods__["index"] = _robotsim.RobotModelDriver_index_set
    __swig_getmethods__["index"] = _robotsim.RobotModelDriver_index_get
    if _newclass:index = _swig_property(_robotsim.RobotModelDriver_index_get, _robotsim.RobotModelDriver_index_set)
    __swig_destroy__ = _robotsim.delete_RobotModelDriver
    __del__ = lambda self : None;
RobotModelDriver_swigregister = _robotsim.RobotModelDriver_swigregister
RobotModelDriver_swigregister(RobotModelDriver)

class RobotModel(_object):
    """
    A model of a dynamic and kinematic robot.

    It is important to understand that changing the configuration of the
    model doesn't actually send a command to the robot. In essence, this
    model maintains temporary storage for performing kinematics and
    dynamics computations.

    The robot maintains configuration/velocity/acceleration/torque bounds
    which are not enforced by the model, but must rather be enforced by
    the planner / simulator.

    The state of the robot is retrieved using getConfig/getVelocity calls,
    and is set using setConfig/setVelocity.

    C++ includes: robotmodel.h 
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RobotModel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RobotModel, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """
        __init__(RobotModel self) -> RobotModel

        RobotModel::RobotModel() 
        """
        this = _robotsim.new_RobotModel()
        try: self.this.append(this)
        except: self.this = this
    def getID(self):
        """
        getID(RobotModel self) -> int

        int RobotModel::getID() 
        """
        return _robotsim.RobotModel_getID(self)

    def getName(self):
        """
        getName(RobotModel self) -> char const *

        const char *
        RobotModel::getName() 
        """
        return _robotsim.RobotModel_getName(self)

    def numLinks(self):
        """
        numLinks(RobotModel self) -> int

        int
        RobotModel::numLinks() 
        """
        return _robotsim.RobotModel_numLinks(self)

    def getLink(self, *args):
        """
        getLink(RobotModel self, int index) -> RobotModelLink
        getLink(RobotModel self, char const * name) -> RobotModelLink

        RobotModelLink
        RobotModel::getLink(const char *name) 
        """
        return _robotsim.RobotModel_getLink(self, *args)

    def numDrivers(self):
        """numDrivers(RobotModel self) -> int"""
        return _robotsim.RobotModel_numDrivers(self)

    def getDriver(self, *args):
        """
        getDriver(RobotModel self, int index) -> RobotModelDriver
        getDriver(RobotModel self, char const * name) -> RobotModelDriver
        """
        return _robotsim.RobotModel_getDriver(self, *args)

    def getConfig(self):
        """
        getConfig(RobotModel self)

        void
        RobotModel::getConfig(std::vector< double > &out) 
        """
        return _robotsim.RobotModel_getConfig(self)

    def getVelocity(self):
        """
        getVelocity(RobotModel self)

        void
        RobotModel::getVelocity(std::vector< double > &out) 
        """
        return _robotsim.RobotModel_getVelocity(self)

    def setConfig(self, *args):
        """
        setConfig(RobotModel self, doubleVector q)

        void
        RobotModel::setConfig(const std::vector< double > &q) 
        """
        return _robotsim.RobotModel_setConfig(self, *args)

    def setVelocity(self, *args):
        """
        setVelocity(RobotModel self, doubleVector dq)

        void
        RobotModel::setVelocity(const std::vector< double > &dq) 
        """
        return _robotsim.RobotModel_setVelocity(self, *args)

    def getJointLimits(self):
        """
        getJointLimits(RobotModel self)

        void
        RobotModel::getJointLimits(std::vector< double > &out, std::vector<
        double > &out2) 
        """
        return _robotsim.RobotModel_getJointLimits(self)

    def setJointLimits(self, *args):
        """
        setJointLimits(RobotModel self, doubleVector qmin, doubleVector qmax)

        void
        RobotModel::setJointLimits(const std::vector< double > &qmin, const
        std::vector< double > &qmax) 
        """
        return _robotsim.RobotModel_setJointLimits(self, *args)

    def getVelocityLimits(self):
        """
        getVelocityLimits(RobotModel self)

        void
        RobotModel::getVelocityLimits(std::vector< double > &out) 
        """
        return _robotsim.RobotModel_getVelocityLimits(self)

    def setVelocityLimits(self, *args):
        """
        setVelocityLimits(RobotModel self, doubleVector vmax)

        void
        RobotModel::setVelocityLimits(const std::vector< double > &vmax) 
        """
        return _robotsim.RobotModel_setVelocityLimits(self, *args)

    def getAccelerationLimits(self):
        """
        getAccelerationLimits(RobotModel self)

        void
        RobotModel::getAccelerationLimits(std::vector< double > &out) 
        """
        return _robotsim.RobotModel_getAccelerationLimits(self)

    def setAccelerationLimits(self, *args):
        """
        setAccelerationLimits(RobotModel self, doubleVector amax)

        void
        RobotModel::setAccelerationLimits(const std::vector< double > &amax)

        """
        return _robotsim.RobotModel_setAccelerationLimits(self, *args)

    def getTorqueLimits(self):
        """
        getTorqueLimits(RobotModel self)

        void
        RobotModel::getTorqueLimits(std::vector< double > &out) 
        """
        return _robotsim.RobotModel_getTorqueLimits(self)

    def setTorqueLimits(self, *args):
        """
        setTorqueLimits(RobotModel self, doubleVector tmax)

        void
        RobotModel::setTorqueLimits(const std::vector< double > &tmax) 
        """
        return _robotsim.RobotModel_setTorqueLimits(self, *args)

    def getCom(self):
        """
        getCom(RobotModel self)

        void
        RobotModel::getCom(double out[3]) 
        """
        return _robotsim.RobotModel_getCom(self)

    def getComJacobian(self):
        """
        getComJacobian(RobotModel self)

        void
        RobotModel::getComJacobian(std::vector< std::vector< double > > &out)

        """
        return _robotsim.RobotModel_getComJacobian(self)

    def getMassMatrix(self):
        """
        getMassMatrix(RobotModel self)

        void
        RobotModel::getMassMatrix(std::vector< std::vector< double > > &out)

        """
        return _robotsim.RobotModel_getMassMatrix(self)

    def getMassMatrixInv(self):
        """
        getMassMatrixInv(RobotModel self)

        void
        RobotModel::getMassMatrixInv(std::vector< std::vector< double > >
        &out) 
        """
        return _robotsim.RobotModel_getMassMatrixInv(self)

    def getCoriolisForceMatrix(self):
        """
        getCoriolisForceMatrix(RobotModel self)

        void
        RobotModel::getCoriolisForceMatrix(std::vector< std::vector< double >
        > &out) 
        """
        return _robotsim.RobotModel_getCoriolisForceMatrix(self)

    def getCoriolisForces(self):
        """
        getCoriolisForces(RobotModel self)

        void
        RobotModel::getCoriolisForces(std::vector< double > &out) 
        """
        return _robotsim.RobotModel_getCoriolisForces(self)

    def getGravityForces(self, *args):
        """
        getGravityForces(RobotModel self, double const [3] g)

        void
        RobotModel::getGravityForces(const double g[3], std::vector< double >
        &out) 
        """
        return _robotsim.RobotModel_getGravityForces(self, *args)

    def torquesFromAccel(self, *args):
        """
        torquesFromAccel(RobotModel self, doubleVector ddq)

        void
        RobotModel::torquesFromAccel(const std::vector< double > &ddq,
        std::vector< double > &out) 
        """
        return _robotsim.RobotModel_torquesFromAccel(self, *args)

    def accelFromTorques(self, *args):
        """
        accelFromTorques(RobotModel self, doubleVector t)

        void
        RobotModel::accelFromTorques(const std::vector< double > &t,
        std::vector< double > &out) 
        """
        return _robotsim.RobotModel_accelFromTorques(self, *args)

    def interpolate(self, *args):
        """
        interpolate(RobotModel self, doubleVector a, doubleVector b, double u)

        void
        RobotModel::interpolate(const std::vector< double > &a, const
        std::vector< double > &b, double u, std::vector< double > &out) 
        """
        return _robotsim.RobotModel_interpolate(self, *args)

    def distance(self, *args):
        """
        distance(RobotModel self, doubleVector a, doubleVector b) -> double

        double
        RobotModel::distance(const std::vector< double > &a, const
        std::vector< double > &b) 
        """
        return _robotsim.RobotModel_distance(self, *args)

    def interpolate_deriv(self, *args):
        """
        interpolate_deriv(RobotModel self, doubleVector a, doubleVector b)

        void
        RobotModel::interpolate_deriv(const std::vector< double > &a, const
        std::vector< double > &b, std::vector< double > &out) 
        """
        return _robotsim.RobotModel_interpolate_deriv(self, *args)

    def selfCollisionEnabled(self, *args):
        """
        selfCollisionEnabled(RobotModel self, int link1, int link2) -> bool

        bool
        RobotModel::selfCollisionEnabled(int link1, int link2) 
        """
        return _robotsim.RobotModel_selfCollisionEnabled(self, *args)

    def enableSelfCollision(self, *args):
        """
        enableSelfCollision(RobotModel self, int link1, int link2, bool value)

        void
        RobotModel::enableSelfCollision(int link1, int link2, bool value) 
        """
        return _robotsim.RobotModel_enableSelfCollision(self, *args)

    def drawGL(self, keepAppearance=True):
        """
        drawGL(RobotModel self, bool keepAppearance=True)
        drawGL(RobotModel self)

        void
        RobotModel::drawGL(bool keepAppearance=true) 
        """
        return _robotsim.RobotModel_drawGL(self, keepAppearance)

    __swig_setmethods__["world"] = _robotsim.RobotModel_world_set
    __swig_getmethods__["world"] = _robotsim.RobotModel_world_get
    if _newclass:world = _swig_property(_robotsim.RobotModel_world_get, _robotsim.RobotModel_world_set)
    __swig_setmethods__["index"] = _robotsim.RobotModel_index_set
    __swig_getmethods__["index"] = _robotsim.RobotModel_index_get
    if _newclass:index = _swig_property(_robotsim.RobotModel_index_get, _robotsim.RobotModel_index_set)
    __swig_setmethods__["robot"] = _robotsim.RobotModel_robot_set
    __swig_getmethods__["robot"] = _robotsim.RobotModel_robot_get
    if _newclass:robot = _swig_property(_robotsim.RobotModel_robot_get, _robotsim.RobotModel_robot_set)
    __swig_destroy__ = _robotsim.delete_RobotModel
    __del__ = lambda self : None;
RobotModel_swigregister = _robotsim.RobotModel_swigregister
RobotModel_swigregister(RobotModel)

class RigidObjectModel(_object):
    """
    A rigid movable object.

    State is retrieved/set using get/setTransform. No velocities are
    stored.

    C++ includes: robotmodel.h 
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RigidObjectModel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RigidObjectModel, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """
        __init__(RigidObjectModel self) -> RigidObjectModel

        RigidObjectModel::RigidObjectModel() 
        """
        this = _robotsim.new_RigidObjectModel()
        try: self.this.append(this)
        except: self.this = this
    def getID(self):
        """
        getID(RigidObjectModel self) -> int

        int
        RigidObjectModel::getID() 
        """
        return _robotsim.RigidObjectModel_getID(self)

    def getName(self):
        """
        getName(RigidObjectModel self) -> char const *

        const char *
        RigidObjectModel::getName() 
        """
        return _robotsim.RigidObjectModel_getName(self)

    def getGeometry(self):
        """
        getGeometry(RigidObjectModel self) -> Geometry3D

        Geometry3D
        RigidObjectModel::getGeometry() 
        """
        return _robotsim.RigidObjectModel_getGeometry(self)

    def getMass(self):
        """
        getMass(RigidObjectModel self) -> Mass

        Mass
        RigidObjectModel::getMass() 
        """
        return _robotsim.RigidObjectModel_getMass(self)

    def setMass(self, *args):
        """
        setMass(RigidObjectModel self, Mass mass)

        void
        RigidObjectModel::setMass(const Mass &mass) 
        """
        return _robotsim.RigidObjectModel_setMass(self, *args)

    def getContactParameters(self):
        """
        getContactParameters(RigidObjectModel self) -> ContactParameters

        ContactParameters RigidObjectModel::getContactParameters() 
        """
        return _robotsim.RigidObjectModel_getContactParameters(self)

    def setContactParameters(self, *args):
        """
        setContactParameters(RigidObjectModel self, ContactParameters params)

        void
        RigidObjectModel::setContactParameters(const ContactParameters
        &params) 
        """
        return _robotsim.RigidObjectModel_setContactParameters(self, *args)

    def getTransform(self):
        """
        getTransform(RigidObjectModel self)

        void
        RigidObjectModel::getTransform(double out[9], double out2[3]) 
        """
        return _robotsim.RigidObjectModel_getTransform(self)

    def setTransform(self, *args):
        """
        setTransform(RigidObjectModel self, double const [9] R, double const [3] t)

        void
        RigidObjectModel::setTransform(const double R[9], const double t[3])

        """
        return _robotsim.RigidObjectModel_setTransform(self, *args)

    def drawGL(self, keepAppearance=True):
        """
        drawGL(RigidObjectModel self, bool keepAppearance=True)
        drawGL(RigidObjectModel self)

        void
        RigidObjectModel::drawGL(bool keepAppearance=true) 
        """
        return _robotsim.RigidObjectModel_drawGL(self, keepAppearance)

    __swig_setmethods__["world"] = _robotsim.RigidObjectModel_world_set
    __swig_getmethods__["world"] = _robotsim.RigidObjectModel_world_get
    if _newclass:world = _swig_property(_robotsim.RigidObjectModel_world_get, _robotsim.RigidObjectModel_world_set)
    __swig_setmethods__["index"] = _robotsim.RigidObjectModel_index_set
    __swig_getmethods__["index"] = _robotsim.RigidObjectModel_index_get
    if _newclass:index = _swig_property(_robotsim.RigidObjectModel_index_get, _robotsim.RigidObjectModel_index_set)
    __swig_setmethods__["object"] = _robotsim.RigidObjectModel_object_set
    __swig_getmethods__["object"] = _robotsim.RigidObjectModel_object_get
    if _newclass:object = _swig_property(_robotsim.RigidObjectModel_object_get, _robotsim.RigidObjectModel_object_set)
    __swig_destroy__ = _robotsim.delete_RigidObjectModel
    __del__ = lambda self : None;
RigidObjectModel_swigregister = _robotsim.RigidObjectModel_swigregister
RigidObjectModel_swigregister(RigidObjectModel)

class TerrainModel(_object):
    """
    Static environment geometry.

    C++ includes: robotmodel.h 
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TerrainModel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TerrainModel, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """
        __init__(TerrainModel self) -> TerrainModel

        TerrainModel::TerrainModel() 
        """
        this = _robotsim.new_TerrainModel()
        try: self.this.append(this)
        except: self.this = this
    def getID(self):
        """
        getID(TerrainModel self) -> int

        int TerrainModel::getID()

        """
        return _robotsim.TerrainModel_getID(self)

    def getName(self):
        """
        getName(TerrainModel self) -> char const *

        const char *
        TerrainModel::getName() 
        """
        return _robotsim.TerrainModel_getName(self)

    def getGeometry(self):
        """
        getGeometry(TerrainModel self) -> Geometry3D

        Geometry3D
        TerrainModel::getGeometry() 
        """
        return _robotsim.TerrainModel_getGeometry(self)

    def setFriction(self, *args):
        """
        setFriction(TerrainModel self, double friction)

        void
        TerrainModel::setFriction(double friction) 
        """
        return _robotsim.TerrainModel_setFriction(self, *args)

    def drawGL(self, keepAppearance=True):
        """
        drawGL(TerrainModel self, bool keepAppearance=True)
        drawGL(TerrainModel self)

        void
        TerrainModel::drawGL(bool keepAppearance=true) 
        """
        return _robotsim.TerrainModel_drawGL(self, keepAppearance)

    __swig_setmethods__["world"] = _robotsim.TerrainModel_world_set
    __swig_getmethods__["world"] = _robotsim.TerrainModel_world_get
    if _newclass:world = _swig_property(_robotsim.TerrainModel_world_get, _robotsim.TerrainModel_world_set)
    __swig_setmethods__["index"] = _robotsim.TerrainModel_index_set
    __swig_getmethods__["index"] = _robotsim.TerrainModel_index_get
    if _newclass:index = _swig_property(_robotsim.TerrainModel_index_get, _robotsim.TerrainModel_index_set)
    __swig_setmethods__["terrain"] = _robotsim.TerrainModel_terrain_set
    __swig_getmethods__["terrain"] = _robotsim.TerrainModel_terrain_get
    if _newclass:terrain = _swig_property(_robotsim.TerrainModel_terrain_get, _robotsim.TerrainModel_terrain_set)
    __swig_destroy__ = _robotsim.delete_TerrainModel
    __del__ = lambda self : None;
TerrainModel_swigregister = _robotsim.TerrainModel_swigregister
TerrainModel_swigregister(TerrainModel)

class WorldModel(_object):
    """
    The main world class, containing robots, rigid objects, and static
    environment geometry.

    Note that this is just a model and can be changed at will in fact
    planners and simulators will make use of a model to "display"
    computed states.

    To save/restore the state of the model, you must manually maintain
    copies of the states of whichever objects you wish to save/restore.

    C++ includes: robotmodel.h 
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WorldModel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WorldModel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(WorldModel self) -> WorldModel
        __init__(WorldModel self, int index) -> WorldModel
        __init__(WorldModel self, WorldModel w) -> WorldModel

        WorldModel::WorldModel(const WorldModel &w) 
        """
        this = _robotsim.new_WorldModel(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _robotsim.delete_WorldModel
    __del__ = lambda self : None;
    def readFile(self, *args):
        """
        readFile(WorldModel self, char const * fn) -> bool

        bool
        WorldModel::readFile(const char *fn) 
        """
        return _robotsim.WorldModel_readFile(self, *args)

    def numRobots(self):
        """
        numRobots(WorldModel self) -> int

        int
        WorldModel::numRobots() 
        """
        return _robotsim.WorldModel_numRobots(self)

    def numRobotLinks(self, *args):
        """
        numRobotLinks(WorldModel self, int robot) -> int

        int
        WorldModel::numRobotLinks(int robot) 
        """
        return _robotsim.WorldModel_numRobotLinks(self, *args)

    def numRigidObjects(self):
        """
        numRigidObjects(WorldModel self) -> int

        int
        WorldModel::numRigidObjects() 
        """
        return _robotsim.WorldModel_numRigidObjects(self)

    def numTerrains(self):
        """
        numTerrains(WorldModel self) -> int

        int
        WorldModel::numTerrains() 
        """
        return _robotsim.WorldModel_numTerrains(self)

    def numIDs(self):
        """
        numIDs(WorldModel self) -> int

        int WorldModel::numIDs()

        """
        return _robotsim.WorldModel_numIDs(self)

    def robot(self, *args):
        """
        robot(WorldModel self, int index) -> RobotModel
        robot(WorldModel self, char const * name) -> RobotModel

        RobotModel
        WorldModel::robot(const char *name) 
        """
        return _robotsim.WorldModel_robot(self, *args)

    def robotLink(self, *args):
        """
        robotLink(WorldModel self, int robot, int index) -> RobotModelLink
        robotLink(WorldModel self, char const * robot, char const * name) -> RobotModelLink

        RobotModelLink
        WorldModel::robotLink(const char *robot, const char *name) 
        """
        return _robotsim.WorldModel_robotLink(self, *args)

    def rigidObject(self, *args):
        """
        rigidObject(WorldModel self, int index) -> RigidObjectModel
        rigidObject(WorldModel self, char const * name) -> RigidObjectModel

        RigidObjectModel
        WorldModel::rigidObject(const char *name) 
        """
        return _robotsim.WorldModel_rigidObject(self, *args)

    def terrain(self, *args):
        """
        terrain(WorldModel self, int index) -> TerrainModel
        terrain(WorldModel self, char const * name) -> TerrainModel

        TerrainModel
        WorldModel::terrain(const char *name) 
        """
        return _robotsim.WorldModel_terrain(self, *args)

    def makeRobot(self, *args):
        """
        makeRobot(WorldModel self, char const * name) -> RobotModel

        RobotModel
        WorldModel::makeRobot(const char *name) 
        """
        return _robotsim.WorldModel_makeRobot(self, *args)

    def makeRigidObject(self, *args):
        """
        makeRigidObject(WorldModel self, char const * name) -> RigidObjectModel

        RigidObjectModel
        WorldModel::makeRigidObject(const char *name) 
        """
        return _robotsim.WorldModel_makeRigidObject(self, *args)

    def makeTerrain(self, *args):
        """
        makeTerrain(WorldModel self, char const * name) -> TerrainModel

        TerrainModel
        WorldModel::makeTerrain(const char *name) 
        """
        return _robotsim.WorldModel_makeTerrain(self, *args)

    def loadRobot(self, *args):
        """
        loadRobot(WorldModel self, char const * fn) -> RobotModel

        RobotModel
        WorldModel::loadRobot(const char *fn) 
        """
        return _robotsim.WorldModel_loadRobot(self, *args)

    def loadRigidObject(self, *args):
        """
        loadRigidObject(WorldModel self, char const * fn) -> RigidObjectModel

        RigidObjectModel
        WorldModel::loadRigidObject(const char *fn) 
        """
        return _robotsim.WorldModel_loadRigidObject(self, *args)

    def loadTerrain(self, *args):
        """
        loadTerrain(WorldModel self, char const * fn) -> TerrainModel

        TerrainModel
        WorldModel::loadTerrain(const char *fn) 
        """
        return _robotsim.WorldModel_loadTerrain(self, *args)

    def loadElement(self, *args):
        """
        loadElement(WorldModel self, char const * fn) -> int

        int
        WorldModel::loadElement(const char *fn) 
        """
        return _robotsim.WorldModel_loadElement(self, *args)

    def drawGL(self):
        """
        drawGL(WorldModel self)

        void WorldModel::drawGL()

        """
        return _robotsim.WorldModel_drawGL(self)

    __swig_setmethods__["index"] = _robotsim.WorldModel_index_set
    __swig_getmethods__["index"] = _robotsim.WorldModel_index_get
    if _newclass:index = _swig_property(_robotsim.WorldModel_index_get, _robotsim.WorldModel_index_set)
WorldModel_swigregister = _robotsim.WorldModel_swigregister
WorldModel_swigregister(WorldModel)

class IKObjective(_object):
    """
    A class defining an inverse kinematic target. Either a link on a robot
    can take on a fixed position/orientation in the world frame, or a
    relative position/orientation to another frame.

    Currently only fixed-point constraints and fixed-transform constraints
    are implemented in the Python API.

    C++ includes: robotik.h 
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IKObjective, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IKObjective, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """
        __init__(IKObjective self) -> IKObjective

        IKObjective::IKObjective() 
        """
        this = _robotsim.new_IKObjective()
        try: self.this.append(this)
        except: self.this = this
    def link(self):
        """
        link(IKObjective self) -> int

        int IKObjective::link()
        const

        The link that is constrained. 
        """
        return _robotsim.IKObjective_link(self)

    def destLink(self):
        """
        destLink(IKObjective self) -> int

        int
        IKObjective::destLink() const

        The destination link, or -1 if fixed to the world. 
        """
        return _robotsim.IKObjective_destLink(self)

    def numPosDims(self):
        """
        numPosDims(IKObjective self) -> int

        int
        IKObjective::numPosDims() const

        Returns the number of position dimensions constrained (0-3) 
        """
        return _robotsim.IKObjective_numPosDims(self)

    def numRotDims(self):
        """
        numRotDims(IKObjective self) -> int

        int
        IKObjective::numRotDims() const

        Returns the number of rotation dimensions constrained (0-3) 
        """
        return _robotsim.IKObjective_numRotDims(self)

    def setFixedPoint(self, *args):
        """
        setFixedPoint(IKObjective self, int link, double const [3] plocal, double const [3] pworld)

        void
        IKObjective::setFixedPoint(int link, const double plocal[3], const
        double pworld[3])

        Sets a fixed-point constraint. 
        """
        return _robotsim.IKObjective_setFixedPoint(self, *args)

    def setFixedPoints(self, *args):
        """
        setFixedPoints(IKObjective self, int link, PyObject * plocals, PyObject * pworlds)

        void
        IKObjective::setFixedPoints(int link, PyObject *plocals, PyObject
        *pworlds)

        Sets a multiple fixed-point constraint. 
        """
        return _robotsim.IKObjective_setFixedPoints(self, *args)

    def setFixedTransform(self, *args):
        """
        setFixedTransform(IKObjective self, int link, double const [9] R, double const [3] t)

        void
        IKObjective::setFixedTransform(int link, const double R[9], const
        double t[3])

        Sets a fixed-transform constraint (R,t) 
        """
        return _robotsim.IKObjective_setFixedTransform(self, *args)

    def setRelativePoint(self, *args):
        """
        setRelativePoint(IKObjective self, int link1, int link2, double const [3] p1, double const [3] p2)

        void
        IKObjective::setRelativePoint(int link1, int link2, const double
        p1[3], const double p2[3])

        Sets a fixed-point constraint relative to link2. 
        """
        return _robotsim.IKObjective_setRelativePoint(self, *args)

    def setRelativePoints(self, *args):
        """
        setRelativePoints(IKObjective self, int link1, int link2, PyObject * p1s, PyObject * p2s)

        void
        IKObjective::setRelativePoints(int link1, int link2, PyObject *p1s,
        PyObject *p2s)

        Sets a multiple fixed-point constraint relative to link2. 
        """
        return _robotsim.IKObjective_setRelativePoints(self, *args)

    def setRelativeTransform(self, *args):
        """
        setRelativeTransform(IKObjective self, int link, int linkTgt, double const [9] R, double const [3] t)

        void
        IKObjective::setRelativeTransform(int link, int linkTgt, const double
        R[9], const double t[3])

        Sets a fixed-transform constraint (R,t) relative to linkTgt. 
        """
        return _robotsim.IKObjective_setRelativeTransform(self, *args)

    def getPosition(self):
        """
        getPosition(IKObjective self)

        void
        IKObjective::getPosition(double out[3], double out2[3]) const

        Returns the local and global position of the position constraint. 
        """
        return _robotsim.IKObjective_getPosition(self)

    def getPositionDirection(self):
        """
        getPositionDirection(IKObjective self)

        void
        IKObjective::getPositionDirection(double out[3]) const

        For linear and planar constraints, returns the direction. 
        """
        return _robotsim.IKObjective_getPositionDirection(self)

    def getRotation(self):
        """
        getRotation(IKObjective self)

        void
        IKObjective::getRotation(double out[9]) const

        For fixed rotation constraints, returns the orientation. 
        """
        return _robotsim.IKObjective_getRotation(self)

    def getRotationAxis(self):
        """
        getRotationAxis(IKObjective self)

        void
        IKObjective::getRotationAxis(double out[3], double out2[3]) const

        For axis rotation constraints, returns the local and global axes. 
        """
        return _robotsim.IKObjective_getRotationAxis(self)

    def getTransform(self):
        """
        getTransform(IKObjective self)

        void
        IKObjective::getTransform(double out[9], double out2[3]) const

        For fixed-transform constraints, returns the transform (R,T) 
        """
        return _robotsim.IKObjective_getTransform(self)

    __swig_setmethods__["goal"] = _robotsim.IKObjective_goal_set
    __swig_getmethods__["goal"] = _robotsim.IKObjective_goal_get
    if _newclass:goal = _swig_property(_robotsim.IKObjective_goal_get, _robotsim.IKObjective_goal_set)
    __swig_destroy__ = _robotsim.delete_IKObjective
    __del__ = lambda self : None;
IKObjective_swigregister = _robotsim.IKObjective_swigregister
IKObjective_swigregister(IKObjective)

class IKSolver(_object):
    """
    An inverse kinematics solver based on the Newton-Raphson technique.

    Typical calling pattern is s = IKSolver(robot) s.add(objective1)
    s.add(objective2) (res,iters) = s.solve(100,1e-4) if res: print "IK
    solution:",robot.getConfig(),"found in",iters,"iterations,
    residual",s.getResidual() else: print "IK
    failed:",robot.getConfig(),"found in",iters,"iterations,
    residual",s.getResidual()

    sampleInitial() is a convenience routine. More initial configurations
    can be sampled in case the prior configs lead to local minima.

    C++ includes: robotik.h 
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IKSolver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IKSolver, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(IKSolver self, RobotModel robot) -> IKSolver
        __init__(IKSolver self, IKSolver solver) -> IKSolver

        IKSolver::IKSolver(const
        IKSolver &solver) 
        """
        this = _robotsim.new_IKSolver(*args)
        try: self.this.append(this)
        except: self.this = this
    def add(self, *args):
        """
        add(IKSolver self, IKObjective objective)

        void IKSolver::add(const
        IKObjective &objective)

        Adds a new simultaneous objective. 
        """
        return _robotsim.IKSolver_add(self, *args)

    def setActiveDofs(self, *args):
        """
        setActiveDofs(IKSolver self, intVector active)

        void
        IKSolver::setActiveDofs(const std::vector< int > &active)

        Sets the active degrees of freedom. 
        """
        return _robotsim.IKSolver_setActiveDofs(self, *args)

    def getActiveDofs(self):
        """
        getActiveDofs(IKSolver self)

        void
        IKSolver::getActiveDofs(std::vector< int > &out)

        Gets the active degrees of freedom. 
        """
        return _robotsim.IKSolver_getActiveDofs(self)

    def getResidual(self):
        """
        getResidual(IKSolver self)

        void
        IKSolver::getResidual(std::vector< double > &out)

        Returns a vector describing the error of the objective. 
        """
        return _robotsim.IKSolver_getResidual(self)

    def getJacobian(self):
        """
        getJacobian(IKSolver self)

        void
        IKSolver::getJacobian(std::vector< std::vector< double > > &out)

        Returns a matrix describing the instantaneous derivative of the
        objective with respect to the active Dofs 
        """
        return _robotsim.IKSolver_getJacobian(self)

    def solve(self, *args):
        """
        solve(IKSolver self, int iters, double tol=1e-3) -> PyObject
        solve(IKSolver self, int iters) -> PyObject *

        PyObject *
        IKSolver::solve(int iters, double tol=1e-3)

        Tries to find a configuration that satifies all simultaneous
        objectives up to the desired tolerance. Returns (res,iters) where res
        indicates whether x converged. 
        """
        return _robotsim.IKSolver_solve(self, *args)

    def sampleInitial(self):
        """
        sampleInitial(IKSolver self)

        void
        IKSolver::sampleInitial()

        Samples an initial random configuration. 
        """
        return _robotsim.IKSolver_sampleInitial(self)

    __swig_setmethods__["robot"] = _robotsim.IKSolver_robot_set
    __swig_getmethods__["robot"] = _robotsim.IKSolver_robot_get
    if _newclass:robot = _swig_property(_robotsim.IKSolver_robot_get, _robotsim.IKSolver_robot_set)
    __swig_setmethods__["objectives"] = _robotsim.IKSolver_objectives_set
    __swig_getmethods__["objectives"] = _robotsim.IKSolver_objectives_get
    if _newclass:objectives = _swig_property(_robotsim.IKSolver_objectives_get, _robotsim.IKSolver_objectives_set)
    __swig_setmethods__["useJointLimits"] = _robotsim.IKSolver_useJointLimits_set
    __swig_getmethods__["useJointLimits"] = _robotsim.IKSolver_useJointLimits_get
    if _newclass:useJointLimits = _swig_property(_robotsim.IKSolver_useJointLimits_get, _robotsim.IKSolver_useJointLimits_set)
    __swig_setmethods__["activeDofs"] = _robotsim.IKSolver_activeDofs_set
    __swig_getmethods__["activeDofs"] = _robotsim.IKSolver_activeDofs_get
    if _newclass:activeDofs = _swig_property(_robotsim.IKSolver_activeDofs_get, _robotsim.IKSolver_activeDofs_set)
    __swig_destroy__ = _robotsim.delete_IKSolver
    __del__ = lambda self : None;
IKSolver_swigregister = _robotsim.IKSolver_swigregister
IKSolver_swigregister(IKSolver)

class GeneralizedIKObjective(_object):
    """
    An inverse kinematics target for matching points between two robots
    and/or objects.

    The objects are chosen upon construction, so the following are valid:
    GeneralizedIKObjective(a) is an objective for object a to be
    constrained relative to the environment.

    GeneralizedIKObjective(a,b) is an objective for object a to be
    constrained relative to b. Here a and b can be links on any robot or
    rigid objects.

    Once constructed, call setPoint, setPoints, or setTransform to specify
    the nature of the constraint.

    C++ includes: robotik.h 
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeneralizedIKObjective, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GeneralizedIKObjective, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(GeneralizedIKObjective self, GeneralizedIKObjective obj) -> GeneralizedIKObjective
        __init__(GeneralizedIKObjective self, RobotModelLink link) -> GeneralizedIKObjective
        __init__(GeneralizedIKObjective self, RigidObjectModel obj) -> GeneralizedIKObjective
        __init__(GeneralizedIKObjective self, RobotModelLink link, RobotModelLink link2) -> GeneralizedIKObjective
        __init__(GeneralizedIKObjective self, RobotModelLink link, RigidObjectModel obj2) -> GeneralizedIKObjective
        __init__(GeneralizedIKObjective self, RigidObjectModel obj, RobotModelLink link2) -> GeneralizedIKObjective
        __init__(GeneralizedIKObjective self, RigidObjectModel obj, RigidObjectModel obj2) -> GeneralizedIKObjective

        GeneralizedIKObjective::GeneralizedIKObjective(const
        RigidObjectModel &obj, const RigidObjectModel &obj2) 
        """
        this = _robotsim.new_GeneralizedIKObjective(*args)
        try: self.this.append(this)
        except: self.this = this
    def setPoint(self, *args):
        """
        setPoint(GeneralizedIKObjective self, double const [3] p1, double const [3] p2)

        void
        GeneralizedIKObjective::setPoint(const double p1[3], const double
        p2[3]) 
        """
        return _robotsim.GeneralizedIKObjective_setPoint(self, *args)

    def setPoints(self, *args):
        """
        setPoints(GeneralizedIKObjective self, PyObject * p1s, PyObject * p2s)

        void
        GeneralizedIKObjective::setPoints(PyObject *p1s, PyObject *p2s) 
        """
        return _robotsim.GeneralizedIKObjective_setPoints(self, *args)

    def setTransform(self, *args):
        """
        setTransform(GeneralizedIKObjective self, double const [9] R, double const [3] t)

        void
        GeneralizedIKObjective::setTransform(const double R[9], const double
        t[3]) 
        """
        return _robotsim.GeneralizedIKObjective_setTransform(self, *args)

    __swig_setmethods__["link1"] = _robotsim.GeneralizedIKObjective_link1_set
    __swig_getmethods__["link1"] = _robotsim.GeneralizedIKObjective_link1_get
    if _newclass:link1 = _swig_property(_robotsim.GeneralizedIKObjective_link1_get, _robotsim.GeneralizedIKObjective_link1_set)
    __swig_setmethods__["link2"] = _robotsim.GeneralizedIKObjective_link2_set
    __swig_getmethods__["link2"] = _robotsim.GeneralizedIKObjective_link2_get
    if _newclass:link2 = _swig_property(_robotsim.GeneralizedIKObjective_link2_get, _robotsim.GeneralizedIKObjective_link2_set)
    __swig_setmethods__["obj1"] = _robotsim.GeneralizedIKObjective_obj1_set
    __swig_getmethods__["obj1"] = _robotsim.GeneralizedIKObjective_obj1_get
    if _newclass:obj1 = _swig_property(_robotsim.GeneralizedIKObjective_obj1_get, _robotsim.GeneralizedIKObjective_obj1_set)
    __swig_setmethods__["obj2"] = _robotsim.GeneralizedIKObjective_obj2_set
    __swig_getmethods__["obj2"] = _robotsim.GeneralizedIKObjective_obj2_get
    if _newclass:obj2 = _swig_property(_robotsim.GeneralizedIKObjective_obj2_get, _robotsim.GeneralizedIKObjective_obj2_set)
    __swig_setmethods__["isObj1"] = _robotsim.GeneralizedIKObjective_isObj1_set
    __swig_getmethods__["isObj1"] = _robotsim.GeneralizedIKObjective_isObj1_get
    if _newclass:isObj1 = _swig_property(_robotsim.GeneralizedIKObjective_isObj1_get, _robotsim.GeneralizedIKObjective_isObj1_set)
    __swig_setmethods__["isObj2"] = _robotsim.GeneralizedIKObjective_isObj2_set
    __swig_getmethods__["isObj2"] = _robotsim.GeneralizedIKObjective_isObj2_get
    if _newclass:isObj2 = _swig_property(_robotsim.GeneralizedIKObjective_isObj2_get, _robotsim.GeneralizedIKObjective_isObj2_set)
    __swig_setmethods__["goal"] = _robotsim.GeneralizedIKObjective_goal_set
    __swig_getmethods__["goal"] = _robotsim.GeneralizedIKObjective_goal_get
    if _newclass:goal = _swig_property(_robotsim.GeneralizedIKObjective_goal_get, _robotsim.GeneralizedIKObjective_goal_set)
    __swig_destroy__ = _robotsim.delete_GeneralizedIKObjective
    __del__ = lambda self : None;
GeneralizedIKObjective_swigregister = _robotsim.GeneralizedIKObjective_swigregister
GeneralizedIKObjective_swigregister(GeneralizedIKObjective)

class GeneralizedIKSolver(_object):
    """
    An inverse kinematics solver between multiple robots and/or objects.

    C++ includes: robotik.h 
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeneralizedIKSolver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GeneralizedIKSolver, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(GeneralizedIKSolver self, WorldModel world) -> GeneralizedIKSolver

        GeneralizedIKSolver::GeneralizedIKSolver(const WorldModel &world) 
        """
        this = _robotsim.new_GeneralizedIKSolver(*args)
        try: self.this.append(this)
        except: self.this = this
    def add(self, *args):
        """
        add(GeneralizedIKSolver self, GeneralizedIKObjective objective)

        void
        GeneralizedIKSolver::add(const GeneralizedIKObjective &objective)

        Adds a new simultaneous objective. 
        """
        return _robotsim.GeneralizedIKSolver_add(self, *args)

    def getResidual(self):
        """
        getResidual(GeneralizedIKSolver self)

        void
        GeneralizedIKSolver::getResidual(std::vector< double > &out)

        Returns a vector describing the error of the objective. 
        """
        return _robotsim.GeneralizedIKSolver_getResidual(self)

    def getJacobian(self):
        """
        getJacobian(GeneralizedIKSolver self)

        void
        GeneralizedIKSolver::getJacobian(std::vector< std::vector< double > >
        &out)

        Returns a matrix describing the instantaneous derivative of the
        objective with respect to the active parameters 
        """
        return _robotsim.GeneralizedIKSolver_getJacobian(self)

    def solve(self, *args):
        """
        solve(GeneralizedIKSolver self, int iters, double tol=1e-3) -> PyObject
        solve(GeneralizedIKSolver self, int iters) -> PyObject *

        PyObject *
        GeneralizedIKSolver::solve(int iters, double tol=1e-3)

        Tries to find a configuration that satifies all simultaneous
        objectives up to the desired tolerance. Returns (res,iters) where res
        indicates whether x converged. 
        """
        return _robotsim.GeneralizedIKSolver_solve(self, *args)

    def sampleInitial(self):
        """
        sampleInitial(GeneralizedIKSolver self)

        void
        GeneralizedIKSolver::sampleInitial()

        Samples an initial random configuration. 
        """
        return _robotsim.GeneralizedIKSolver_sampleInitial(self)

    __swig_setmethods__["world"] = _robotsim.GeneralizedIKSolver_world_set
    __swig_getmethods__["world"] = _robotsim.GeneralizedIKSolver_world_get
    if _newclass:world = _swig_property(_robotsim.GeneralizedIKSolver_world_get, _robotsim.GeneralizedIKSolver_world_set)
    __swig_setmethods__["objectives"] = _robotsim.GeneralizedIKSolver_objectives_set
    __swig_getmethods__["objectives"] = _robotsim.GeneralizedIKSolver_objectives_get
    if _newclass:objectives = _swig_property(_robotsim.GeneralizedIKSolver_objectives_get, _robotsim.GeneralizedIKSolver_objectives_set)
    __swig_setmethods__["useJointLimits"] = _robotsim.GeneralizedIKSolver_useJointLimits_set
    __swig_getmethods__["useJointLimits"] = _robotsim.GeneralizedIKSolver_useJointLimits_get
    if _newclass:useJointLimits = _swig_property(_robotsim.GeneralizedIKSolver_useJointLimits_get, _robotsim.GeneralizedIKSolver_useJointLimits_set)
    __swig_destroy__ = _robotsim.delete_GeneralizedIKSolver
    __del__ = lambda self : None;
GeneralizedIKSolver_swigregister = _robotsim.GeneralizedIKSolver_swigregister
GeneralizedIKSolver_swigregister(GeneralizedIKSolver)


def SampleTransform(*args):
  """
    SampleTransform(IKObjective obj)
    SampleTransform(GeneralizedIKObjective obj)

    void SampleTransform(const
    GeneralizedIKObjective &obj, double out[9], double out2[3]) 
    """
  return _robotsim.SampleTransform(*args)
class SimRobotSensor(_object):
    """
    A sensor on a simulated robot. Retreive this from the controller, and
    use getMeasurements to get the currently simulated measurement vector.

    type() gives you a string defining the sensor type. measurementNames()
    gives you a list of names for the measurements.

    C++ includes: robotsim.h 
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimRobotSensor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SimRobotSensor, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(SimRobotSensor self, SensorBase * sensor) -> SimRobotSensor

        SimRobotSensor::SimRobotSensor(SensorBase *sensor) 
        """
        this = _robotsim.new_SimRobotSensor(*args)
        try: self.this.append(this)
        except: self.this = this
    def name(self):
        """
        name(SimRobotSensor self) -> std::string

        std::string
        SimRobotSensor::name() 
        """
        return _robotsim.SimRobotSensor_name(self)

    def type(self):
        """
        type(SimRobotSensor self) -> std::string

        std::string
        SimRobotSensor::type() 
        """
        return _robotsim.SimRobotSensor_type(self)

    def measurementNames(self):
        """
        measurementNames(SimRobotSensor self) -> std::vector< std::string,std::allocator< std::string > >

        std::vector<
        std::string > SimRobotSensor::measurementNames() 
        """
        return _robotsim.SimRobotSensor_measurementNames(self)

    def getMeasurements(self):
        """
        getMeasurements(SimRobotSensor self)

        void
        SimRobotSensor::getMeasurements(std::vector< double > &out) 
        """
        return _robotsim.SimRobotSensor_getMeasurements(self)

    __swig_setmethods__["sensor"] = _robotsim.SimRobotSensor_sensor_set
    __swig_getmethods__["sensor"] = _robotsim.SimRobotSensor_sensor_get
    if _newclass:sensor = _swig_property(_robotsim.SimRobotSensor_sensor_get, _robotsim.SimRobotSensor_sensor_set)
    __swig_destroy__ = _robotsim.delete_SimRobotSensor
    __del__ = lambda self : None;
SimRobotSensor_swigregister = _robotsim.SimRobotSensor_swigregister
SimRobotSensor_swigregister(SimRobotSensor)

class SimRobotController(_object):
    """
    A controller for a simulated robot.

    The basic way of using this is in "standard" move-to mode which
    accepts a milestone (setMilestone) or list of milestones (repeated
    calls to addMilestone) and interpolates dynamically from the current
    configuration/velocity. To handle disturbances, a PID loop is run. The
    constants of this loop are initially set in the robot file, or you can
    perform tuning via setPIDGains.

    Arbitrary trajectories can be tracked by using setVelocity over short
    time steps. Force controllers can be implemented using setTorque,
    again using short time steps. These set the controller into manual
    override mode. To reset back to regular motion queue control,

    C++ includes: robotsim.h 
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimRobotController, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SimRobotController, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """
        __init__(SimRobotController self) -> SimRobotController

        SimRobotController::SimRobotController() 
        """
        this = _robotsim.new_SimRobotController()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _robotsim.delete_SimRobotController
    __del__ = lambda self : None;
    def setRate(self, *args):
        """
        setRate(SimRobotController self, double dt)

        void
        SimRobotController::setRate(double dt)

        Sets the current feedback control rate. 
        """
        return _robotsim.SimRobotController_setRate(self, *args)

    def getCommandedConfig(self):
        """
        getCommandedConfig(SimRobotController self)

        void
        SimRobotController::getCommandedConfig(std::vector< double > &out)

        Returns the current commanded configuration. 
        """
        return _robotsim.SimRobotController_getCommandedConfig(self)

    def getCommandedVelocity(self):
        """
        getCommandedVelocity(SimRobotController self)

        void
        SimRobotController::getCommandedVelocity(std::vector< double > &out)

        Returns the current commanded velocity. 
        """
        return _robotsim.SimRobotController_getCommandedVelocity(self)

    def getSensedConfig(self):
        """
        getSensedConfig(SimRobotController self)

        void
        SimRobotController::getSensedConfig(std::vector< double > &out)

        Returns the current "sensed" configuration from the simulator. 
        """
        return _robotsim.SimRobotController_getSensedConfig(self)

    def getSensedVelocity(self):
        """
        getSensedVelocity(SimRobotController self)

        void
        SimRobotController::getSensedVelocity(std::vector< double > &out)

        Returns the current "sensed" velocity from the simulator. 
        """
        return _robotsim.SimRobotController_getSensedVelocity(self)

    def getSensor(self, *args):
        """
        getSensor(SimRobotController self, int index) -> SimRobotSensor

        SimRobotSensor
        SimRobotController::getSensor(int index)

        Returns a sensor by index. If out of bounds, a null sensor is
        returned. 
        """
        return _robotsim.SimRobotController_getSensor(self, *args)

    def getNamedSensor(self, *args):
        """
        getNamedSensor(SimRobotController self, std::string const & name) -> SimRobotSensor

        SimRobotSensor SimRobotController::getNamedSensor(const std::string
        &name)

        Returns a sensor by name. If unavailable, a null sensor is returned.

        """
        return _robotsim.SimRobotController_getNamedSensor(self, *args)

    def commands(self):
        """
        commands(SimRobotController self) -> std::vector< std::string,std::allocator< std::string > >

        std::vector<
        std::string > SimRobotController::commands()

        gets a command list 
        """
        return _robotsim.SimRobotController_commands(self)

    def sendCommand(self, *args):
        """
        sendCommand(SimRobotController self, std::string const & name, std::string const & args) -> bool

        bool
        SimRobotController::sendCommand(const std::string &name, const
        std::string &args)

        sends a command to the controller 
        """
        return _robotsim.SimRobotController_sendCommand(self, *args)

    def getSetting(self, *args):
        """
        getSetting(SimRobotController self, std::string const & name) -> std::string

        std::string
        SimRobotController::getSetting(const std::string &name)

        gets/sets settings of the controller 
        """
        return _robotsim.SimRobotController_getSetting(self, *args)

    def setSetting(self, *args):
        """
        setSetting(SimRobotController self, std::string const & name, std::string const & val) -> bool

        bool
        SimRobotController::setSetting(const std::string &name, const
        std::string &val) 
        """
        return _robotsim.SimRobotController_setSetting(self, *args)

    def setMilestone(self, *args):
        """
        setMilestone(SimRobotController self, doubleVector q)
        setMilestone(SimRobotController self, doubleVector q, doubleVector dq)

        void
        SimRobotController::setMilestone(const std::vector< double > &q, const
        std::vector< double > &dq) 
        """
        return _robotsim.SimRobotController_setMilestone(self, *args)

    def addMilestone(self, *args):
        """
        addMilestone(SimRobotController self, doubleVector q)
        addMilestone(SimRobotController self, doubleVector q, doubleVector dq)

        void
        SimRobotController::addMilestone(const std::vector< double > &q, const
        std::vector< double > &dq) 
        """
        return _robotsim.SimRobotController_addMilestone(self, *args)

    def remainingTime(self):
        """
        remainingTime(SimRobotController self) -> double

        double
        SimRobotController::remainingTime() const

        Returns the remaining duration of the motion queue. 
        """
        return _robotsim.SimRobotController_remainingTime(self)

    def setVelocity(self, *args):
        """
        setVelocity(SimRobotController self, doubleVector dq, double dt)

        void
        SimRobotController::setVelocity(const std::vector< double > &dq,
        double dt)

        Sets a rate controller from the current commanded config to move at
        rate dq for time dt. 
        """
        return _robotsim.SimRobotController_setVelocity(self, *args)

    def setTorque(self, *args):
        """
        setTorque(SimRobotController self, doubleVector t)

        void
        SimRobotController::setTorque(const std::vector< double > &t)

        Sets a torque command controller. 
        """
        return _robotsim.SimRobotController_setTorque(self, *args)

    def setPIDCommand(self, *args):
        """
        setPIDCommand(SimRobotController self, doubleVector qdes, doubleVector dqdes)
        setPIDCommand(SimRobotController self, doubleVector qdes, doubleVector dqdes, doubleVector tfeedforward)

        void
        SimRobotController::setPIDCommand(const std::vector< double > &qdes,
        const std::vector< double > &dqdes, const std::vector< double >
        &tfeedforward)

        Sets a PID command controller with feedforward torques. 
        """
        return _robotsim.SimRobotController_setPIDCommand(self, *args)

    def setManualMode(self, *args):
        """
        setManualMode(SimRobotController self, bool enabled)

        void
        SimRobotController::setManualMode(bool enabled)

        Turns on/off manual mode, if either the setTorque or setPID command
        were previously set. 
        """
        return _robotsim.SimRobotController_setManualMode(self, *args)

    def setPIDGains(self, *args):
        """
        setPIDGains(SimRobotController self, doubleVector kP, doubleVector kI, doubleVector kD)

        void
        SimRobotController::setPIDGains(const std::vector< double > &kP, const
        std::vector< double > &kI, const std::vector< double > &kD)

        Sets the PID gains. 
        """
        return _robotsim.SimRobotController_setPIDGains(self, *args)

    __swig_setmethods__["index"] = _robotsim.SimRobotController_index_set
    __swig_getmethods__["index"] = _robotsim.SimRobotController_index_get
    if _newclass:index = _swig_property(_robotsim.SimRobotController_index_get, _robotsim.SimRobotController_index_set)
    __swig_setmethods__["sim"] = _robotsim.SimRobotController_sim_set
    __swig_getmethods__["sim"] = _robotsim.SimRobotController_sim_get
    if _newclass:sim = _swig_property(_robotsim.SimRobotController_sim_get, _robotsim.SimRobotController_sim_set)
SimRobotController_swigregister = _robotsim.SimRobotController_swigregister
SimRobotController_swigregister(SimRobotController)

class SimBody(_object):
    """
    A reference to a rigid body inside a Simulator (either a
    RigidObjectModel, TerrainModel, or a link of a RobotModel).

    C++ includes: robotsim.h 
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimBody, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SimBody, name)
    __repr__ = _swig_repr
    def applyWrench(self, *args):
        """
        applyWrench(SimBody self, double const [3] f, double const [3] t)

        void
        SimBody::applyWrench(const double f[3], const double t[3])

        Applies a force and torque about the COM. 
        """
        return _robotsim.SimBody_applyWrench(self, *args)

    def setVelocity(self, *args):
        """
        setVelocity(SimBody self, double const [3] w, double const [3] v)

        void
        SimBody::setVelocity(const double w[3], const double v[3])

        Sets the angular velocity and translational velocity. 
        """
        return _robotsim.SimBody_setVelocity(self, *args)

    def getVelocity(self):
        """
        getVelocity(SimBody self)

        void
        SimBody::getVelocity(double out[3], double out2[3])

        Returns the angular velocity and translational velocity. 
        """
        return _robotsim.SimBody_getVelocity(self)

    def setTransform(self, *args):
        """
        setTransform(SimBody self, double const [9] R, double [3] t)

        void
        SimBody::setTransform(const double R[9], double t[3]) 
        """
        return _robotsim.SimBody_setTransform(self, *args)

    def getTransform(self):
        """
        getTransform(SimBody self)

        void
        SimBody::getTransform(double out[9], double out2[3]) 
        """
        return _robotsim.SimBody_getTransform(self)

    def setCollisionPadding(self, *args):
        """
        setCollisionPadding(SimBody self, double padding)

        void
        SimBody::setCollisionPadding(double padding)

        Sets the collision padding (useful for thin objects) 
        """
        return _robotsim.SimBody_setCollisionPadding(self, *args)

    def getCollisionPadding(self):
        """
        getCollisionPadding(SimBody self) -> double

        double
        SimBody::getCollisionPadding() 
        """
        return _robotsim.SimBody_getCollisionPadding(self)

    def surface(self):
        """
        surface(SimBody self) -> ODESurfaceProperties *

        ODESurfaceProperties *
        SimBody::surface()

        Gets/sets the surface properties. 
        """
        return _robotsim.SimBody_surface(self)

    __swig_setmethods__["geometry"] = _robotsim.SimBody_geometry_set
    __swig_getmethods__["geometry"] = _robotsim.SimBody_geometry_get
    if _newclass:geometry = _swig_property(_robotsim.SimBody_geometry_get, _robotsim.SimBody_geometry_set)
    __swig_setmethods__["body"] = _robotsim.SimBody_body_set
    __swig_getmethods__["body"] = _robotsim.SimBody_body_get
    if _newclass:body = _swig_property(_robotsim.SimBody_body_get, _robotsim.SimBody_body_set)
    def __init__(self): 
        """
        __init__(SimBody self) -> SimBody

        A reference to a rigid body inside a Simulator (either a
        RigidObjectModel, TerrainModel, or a link of a RobotModel).

        C++ includes: robotsim.h 
        """
        this = _robotsim.new_SimBody()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _robotsim.delete_SimBody
    __del__ = lambda self : None;
SimBody_swigregister = _robotsim.SimBody_swigregister
SimBody_swigregister(SimBody)

class Simulator(_object):
    """
    A dynamics simulator for a WorldModel.

    C++ includes: robotsim.h 
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Simulator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Simulator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(Simulator self, WorldModel model) -> Simulator

        Simulator::Simulator(const WorldModel &model)

        Constructs the simulator from a WorldModel. If the WorldModel was
        loaded from an XML file, then the simulation setup is loaded from it.

        """
        this = _robotsim.new_Simulator(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _robotsim.delete_Simulator
    __del__ = lambda self : None;
    def reset(self):
        """
        reset(Simulator self)

        void Simulator::reset()

        Resets to the initial state (same as setState(initialState)) 
        """
        return _robotsim.Simulator_reset(self)

    def getWorld(self):
        """
        getWorld(Simulator self) -> WorldModel

        WorldModel
        Simulator::getWorld() const

        Returns the associated world model. 
        """
        return _robotsim.Simulator_getWorld(self)

    def getState(self):
        """
        getState(Simulator self) -> std::string

        string
        Simulator::getState()

        Returns a Base64 string representing the binary data for the current
        simulation state, including controller parameters, etc. 
        """
        return _robotsim.Simulator_getState(self)

    def setState(self, *args):
        """
        setState(Simulator self, std::string const & str)

        void
        Simulator::setState(const std::string &str)

        Sets the current simulation state from a Base64 string returned by a
        prior getState call. 
        """
        return _robotsim.Simulator_setState(self, *args)

    def simulate(self, *args):
        """
        simulate(Simulator self, double t)

        void
        Simulator::simulate(double t)

        Advances the simulation by time t, and updates the world model from
        the simulation state. 
        """
        return _robotsim.Simulator_simulate(self, *args)

    def fakeSimulate(self, *args):
        """
        fakeSimulate(Simulator self, double t)

        void
        Simulator::fakeSimulate(double t)

        Advances a faked simulation by time t, and updates the world model
        from the faked simulation state. 
        """
        return _robotsim.Simulator_fakeSimulate(self, *args)

    def getTime(self):
        """
        getTime(Simulator self) -> double

        double
        Simulator::getTime()

        Returns the simulation time. 
        """
        return _robotsim.Simulator_getTime(self)

    def updateWorld(self):
        """
        updateWorld(Simulator self)

        void
        Simulator::updateWorld()

        Updates the world model from the current simulation state. This only
        needs to be called if you change the world model and want to revert
        back to the simulation state. 
        """
        return _robotsim.Simulator_updateWorld(self)

    def getActualConfig(self, *args):
        """
        getActualConfig(Simulator self, int robot)

        void
        Simulator::getActualConfig(int robot, std::vector< double > &out)

        Returns the current actual configuration of the robot from the
        simulator. 
        """
        return _robotsim.Simulator_getActualConfig(self, *args)

    def getActualVelocity(self, *args):
        """
        getActualVelocity(Simulator self, int robot)

        void
        Simulator::getActualVelocity(int robot, std::vector< double > &out)

        Returns the current actual velocity of the robot from the simulator.

        """
        return _robotsim.Simulator_getActualVelocity(self, *args)

    def getActualTorques(self, *args):
        """
        getActualTorques(Simulator self, int robot)

        void
        Simulator::getActualTorques(int robot, std::vector< double > &out)

        Returns the current actual torques on the robot's drivers from the
        simulator 
        """
        return _robotsim.Simulator_getActualTorques(self, *args)

    def enableContactFeedback(self, *args):
        """
        enableContactFeedback(Simulator self, int obj1, int obj2)

        void
        Simulator::enableContactFeedback(int obj1, int obj2)

        Call this to enable contact feedback between the two objects
        (arguments are indexes returned by object.getID()). Contact feedback
        has a small overhead so you may want to do this selectively. 
        """
        return _robotsim.Simulator_enableContactFeedback(self, *args)

    def enableContactFeedbackAll(self):
        """
        enableContactFeedbackAll(Simulator self)

        void
        Simulator::enableContactFeedbackAll()

        Call this to enable contact feedback between all pairs of objects.
        Contact feedback has a small overhead so you may want to do this
        selectively. 
        """
        return _robotsim.Simulator_enableContactFeedbackAll(self)

    def inContact(self, *args):
        """
        inContact(Simulator self, int aid, int bid) -> bool

        bool
        Simulator::inContact(int aid, int bid)

        Returns true if the objects (indexes returned by object.getID()) are
        in contact on the current time step 
        """
        return _robotsim.Simulator_inContact(self, *args)

    def getContacts(self, *args):
        """
        getContacts(Simulator self, int aid, int bid)

        void
        Simulator::getContacts(int aid, int bid, std::vector< std::vector<
        double > > &out)

        Returns the list of contacts (x,n,kFriction) at the last time step.
        Normals point into object a. 
        """
        return _robotsim.Simulator_getContacts(self, *args)

    def getContactForces(self, *args):
        """
        getContactForces(Simulator self, int aid, int bid)

        void
        Simulator::getContactForces(int aid, int bid, std::vector<
        std::vector< double > > &out)

        Returns the list of contact forces on object a at the last time step.

        """
        return _robotsim.Simulator_getContactForces(self, *args)

    def contactForce(self, *args):
        """
        contactForce(Simulator self, int aid, int bid)

        void
        Simulator::contactForce(int aid, int bid, double out[3])

        Returns the contact force on object a at the last time step. 
        """
        return _robotsim.Simulator_contactForce(self, *args)

    def hadContact(self, *args):
        """
        hadContact(Simulator self, int aid, int bid) -> bool

        bool
        Simulator::hadContact(int aid, int bid)

        Returns true if the objects had contact over the last simulate() call.

        """
        return _robotsim.Simulator_hadContact(self, *args)

    def hadSeparation(self, *args):
        """
        hadSeparation(Simulator self, int aid, int bid) -> bool

        bool
        Simulator::hadSeparation(int aid, int bid)

        Returns true if the objects had ever separated during the last
        simulate() call 
        """
        return _robotsim.Simulator_hadSeparation(self, *args)

    def meanContactForce(self, *args):
        """
        meanContactForce(Simulator self, int aid, int bid)

        void
        Simulator::meanContactForce(int aid, int bid, double out[3])

        Returns the average contact force on object a over the last simulate()
        call 
        """
        return _robotsim.Simulator_meanContactForce(self, *args)

    def getController(self, *args):
        """
        getController(Simulator self, int robot) -> SimRobotController
        getController(Simulator self, RobotModel robot) -> SimRobotController

        SimRobotController
        Simulator::getController(const RobotModel &robot) 
        """
        return _robotsim.Simulator_getController(self, *args)

    def getBody(self, *args):
        """
        getBody(Simulator self, RobotModelLink link) -> SimBody
        getBody(Simulator self, RigidObjectModel object) -> SimBody
        getBody(Simulator self, TerrainModel terrain) -> SimBody

        SimBody
        Simulator::getBody(const TerrainModel &terrain) 
        """
        return _robotsim.Simulator_getBody(self, *args)

    def getJointForces(self, *args):
        """
        getJointForces(Simulator self, RobotModelLink link)

        void
        Simulator::getJointForces(const RobotModelLink &link, double out[6])

        Returns the joint force and torque local to the link, as would be read
        by a force-torque sensor mounted at the given link's origin. The 6
        entries are (fx,fy,fz,mx,my,mz) 
        """
        return _robotsim.Simulator_getJointForces(self, *args)

    def setGravity(self, *args):
        """
        setGravity(Simulator self, double const [3] g)

        void
        Simulator::setGravity(const double g[3])

        Sets the overall gravity vector. 
        """
        return _robotsim.Simulator_setGravity(self, *args)

    def setSimStep(self, *args):
        """
        setSimStep(Simulator self, double dt)

        void
        Simulator::setSimStep(double dt)

        Sets the internal simulation substep. Values < 0.01 are recommended.

        """
        return _robotsim.Simulator_setSimStep(self, *args)

    __swig_setmethods__["index"] = _robotsim.Simulator_index_set
    __swig_getmethods__["index"] = _robotsim.Simulator_index_get
    if _newclass:index = _swig_property(_robotsim.Simulator_index_get, _robotsim.Simulator_index_set)
    __swig_setmethods__["world"] = _robotsim.Simulator_world_set
    __swig_getmethods__["world"] = _robotsim.Simulator_world_get
    if _newclass:world = _swig_property(_robotsim.Simulator_world_get, _robotsim.Simulator_world_set)
    __swig_setmethods__["sim"] = _robotsim.Simulator_sim_set
    __swig_getmethods__["sim"] = _robotsim.Simulator_sim_get
    if _newclass:sim = _swig_property(_robotsim.Simulator_sim_get, _robotsim.Simulator_sim_set)
    __swig_setmethods__["initialState"] = _robotsim.Simulator_initialState_set
    __swig_getmethods__["initialState"] = _robotsim.Simulator_initialState_get
    if _newclass:initialState = _swig_property(_robotsim.Simulator_initialState_get, _robotsim.Simulator_initialState_set)
Simulator_swigregister = _robotsim.Simulator_swigregister
Simulator_swigregister(Simulator)

# This file is compatible with both classic and new-style classes.


