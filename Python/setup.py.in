try:
    from setuptools import setup,Extension
except ImportError:
    from distutils.core import setup,Extension
import os
import glob
import sys
try:
    import numpy
except ImportError:
    print('Building Klampt from source requires numpy.  Try "pip install numpy". Exiting.')
    exit(1)

src_folder = "klampt/src"
root_py_folder = "klampt"
if sys.version_info[0] == 2:
    #python2 version has drifted from current Python3 version... maintain separate packages list for compatibility
    root_py_folder = "python2_version/klampt"
    klampt_packages = ['klampt','klampt.apps', 'klampt.io', 'klampt.math', 'klampt.model', 'klampt.model.create', 'klampt.plan', 'klampt.sim', 'klampt.vis', 'klampt.vis.ipython', 'klampt.vis.backends']
else:
    klampt_packages = ['klampt','klampt.apps', 'klampt.control', 'klampt.control.io', 'klampt.control.blocks', 'klampt.io', 'klampt.math', 'klampt.math.autodiff', 'klampt.model', 'klampt.model.create', 'klampt.plan','klampt.plan.kinetrajopt', 'klampt.sim', 'klampt.vis', 'klampt.vis.ipython', 'klampt.vis.backends']

#Parse settings from CMake
includeDirs = """${KLAMPT_INCLUDE_DIRS}""".split(';')
libs = """${KLAMPT_ABSOLUTE_LIBRARIES}""".split(';')
defs = """${KLAMPT_DEFINITIONS}""".split(';')

extra_shared_libraries = []
extra_compile_args = []
extra_link_args = []
if sys.platform == 'win32':
    import shutil
    extra_shared_libraries = """${KLAMPT_EXTRA_DLLS}""".split(';')
    for fn in extra_shared_libraries:
        shutil.copy(os.path.join("""${KLAMPT_DEPENDENCY_LIB_DIR}""",fn),os.path.join(root_py_folder,fn))
else:
    extra_compile_args = ['-std=c++11']
    
#Parse libraries
if sys.platform == 'win32':
    optlibs = []
    skipone = False
    for i,l in enumerate(libs):
        if skipone: 
            skipone = False
            continue
        skipone = False
        if l == 'optimized':
            optlibs.append(libs[i+1])
            skipone = True
        elif l == 'debug':
            skipone = True
        else:
            optlibs.append(l)
    libs = optlibs
libdirs = []
libnames = []
for l in libs:
    path,fn = os.path.split(l)
    if len(path)>0 and path not in libdirs:
        libdirs.append(path)
    if fn.startswith('lib') and sys.platform != 'win32':
        name = fn.split('.')[0]
        libnames.append(name[3:])
    elif fn.endswith('lib'):
        name = fn.split('.')[0]
        libnames.append(name)
    elif fn.endswith('framework'):
        extra_link_args.append('-framework')
        extra_link_args.append(fn.split('.')[0])
    else:
        libnames.append(fn)
full_libs = libs
libs = libnames

#Parse definitions
commondefines = []
#split whitespace
defs = sum([d.split() for d in defs],[])
#parse -D or -I defines
for d in defs:
    if d.startswith("-I"):
        includeDirs.append(d[2:])
    elif d.startswith("-D"):
        d = d[2:]
        if d.find("=") >= 0:
            commondefines.append(tuple(d.split("=")))
        else:
            commondefines.append((d,None))
    else:
        commondefines.append((d,None))

includeDirs.append(numpy.get_include())

#remove /usr/include and /usr/local/include on Mac build
import platform
if platform.system()=='Darwin':
    print("Removing /usr/local/include from include paths")
    extra_compile_args.append('-H') #show include files
    #TODO convert Path/To/X.framework -> -framework X for linker
    new_include_dirs = []
    for v in includeDirs:
        if v.endswith('/usr/include') or v.endswith('/usr/local/include'):
            continue
        else:
            new_include_dirs.append(v)
    includeDirs = new_include_dirs
    
commonfiles = ['pyerr.cpp']
rssourcefiles = commonfiles + ['robotsim.cpp','robotik.cpp','robotsim_wrap.cxx']
mpsourcefiles = commonfiles + ['motionplanning.cpp','motionplanning_wrap.cxx']
rfsourcefiles = commonfiles + ['rootfind.cpp','pyvectorfield.cpp','rootfind_wrap.cxx']

#get oldest numpy version compatible with build
if sys.version_info[0]==3 and sys.version_info[1]==5:
    numpy_oldest_acceptable_version = '1.18.5'
elif sys.version_info[0]==3 and sys.version_info[1]==6:
    numpy_oldest_acceptable_version = '1.19.5'
else:
    numpy_oldest_acceptable_version = '1.20.0'


setup(name='Klampt',
      version='@KLAMPT_VERSION@.post2',
      description="Python API to Klamp't, a package for robot modeling, simulating, planning, optimization, and visualization",
      author='Kris Hauser',
      author_email='hauser.kris@gmail.com',
      url='https://github.com/krishauser/Klampt',
      ext_modules=[Extension('klampt._robotsim',
                             [os.path.join(src_folder,f) for f in rssourcefiles],
                             include_dirs=includeDirs,
                             define_macros=commondefines,
                             library_dirs=libdirs,
                             libraries=libs,
                             extra_link_args=extra_link_args,
                             extra_compile_args=extra_compile_args,
                             language='c++'),
                   Extension('klampt.plan._motionplanning',
                             [os.path.join(src_folder,f) for f in mpsourcefiles],
                             include_dirs=includeDirs,
                             define_macros=commondefines,
                             library_dirs=libdirs,
                             libraries=libs,
                             extra_link_args=extra_link_args,
                             extra_compile_args=extra_compile_args,
                             language='c++'),
                   Extension('klampt.math._rootfind',
                             [os.path.join(src_folder,f) for f in rfsourcefiles],
                             include_dirs=includeDirs,
                             define_macros=commondefines,
                             library_dirs=libdirs,
                             libraries=libs,
                             extra_link_args=extra_link_args,
                             extra_compile_args=extra_compile_args,
                             language='c++'),
                   ],
      #py_modules=['klampt.robotsim','klampt.plan.motionplanning','klampt.math.rootfind'],
      py_modules=['klampt.robotsim','klampt.plan.motionplanning'],
      packages=klampt_packages,
      package_dir={'klampt': root_py_folder},
      package_data={'klampt': extra_shared_libraries + ['data/*.html','data/*.js','data/*.ui']},
      entry_points = {
        'console_scripts': [
            'klampt_browser=klampt.apps.klampt_browser:main',
            'klampt_control=klampt.apps.klampt_control:main',
            'klampt_path=klampt.apps.klampt_path:main',
            'klampt_sim=klampt.apps.klampt_sim:main',
            'klampt_resource=klampt.apps.klampt_resource:main',
            ],
      },
      classifiers=[
        "Programming Language :: Python :: %d.%d"%(sys.version_info[0],sys.version_info[1]),
        "Development Status :: 4 - Beta",
        "License :: OSI Approved :: BSD License",
        "Natural Language :: English",
        "Operating System :: Microsoft :: Windows",
        "Operating System :: MacOS",
        "Operating System :: POSIX :: Linux",
        "Topic :: Scientific/Engineering"
      ],
      install_requires=[
        'PyOpenGL',
        'numpy>='+numpy_oldest_acceptable_version
      ],
     )

if sys.platform == 'win32':
    for fn in extra_shared_libraries:
        print("Removing temporary file "+os.path.join(root_py_folder,fn))
        os.remove(os.path.join(root_py_folder,fn))
